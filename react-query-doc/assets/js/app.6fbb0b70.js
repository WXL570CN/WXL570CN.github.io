(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function t(t){for(var r,i,s=t[0],u=t[1],c=t[2],d=0,f=[];d<s.length;d++)i=s[d],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&f.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);f.length;)f.shift()();return o.push.apply(o,c||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,s=1;s<n.length;s++){var u=n[s];0!==a[u]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={1:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(e){var t=[],n=a[e];if(0!==n)if(n)t.push(n[2]);else{var r=new Promise((function(t,r){n=a[e]=[t,r]}));t.push(n[2]=r);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(e){return i.p+"assets/js/"+({}[e]||e)+"."+{2:"91327071",3:"a072fba7",4:"35aa5fa3",5:"a00450d1",6:"443ad384",7:"914af52f",8:"e0ca8a9a",9:"d54332fc",10:"d4c61328",11:"b878f72b",12:"1131b975",13:"326b6630",14:"4f8c1b5e",15:"8ef9af03",16:"c045c4c1",17:"b893d27b",18:"3f04039c",19:"94c8268f",20:"3dee5977",21:"19d10cc6",22:"3fdd803d",23:"87a77b86",24:"2662bfb7",25:"ee8d6c75",26:"4a7081d3",27:"01b42ffa",28:"9a70bfce",29:"d6f51523",30:"7cba60c6",31:"4357f10d",32:"a36c9970",33:"62184cb7",34:"3302564d",35:"de6d9152",36:"351e13b8",37:"9cd58721",38:"133c7bf8",39:"abed7db2",40:"b6f3714f",41:"8ddfe4e6"}[e]+".js"}(e);var u=new Error;o=function(t){s.onerror=s.onload=null,clearTimeout(c);var n=a[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",u.name="ChunkLoadError",u.type=r,u.request=o,n[1](u)}a[e]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(t)},i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/react-query-doc/",i.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],u=s.push.bind(s);s.push=t,s=s.slice();for(var c=0;c<s.length;c++)t(s[c]);var l=u;o.push([102,0]),n()}([function(e,t,n){var r=n(55),a=r.all;e.exports=r.IS_HTMLDDA?function(e){return"function"==typeof e||e===a}:function(e){return"function"==typeof e}},function(e,t,n){var r=n(27),a=Function.prototype,o=a.call,i=r&&a.bind.bind(o,o);e.exports=r?i:function(e){return function(){return o.apply(e,arguments)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,t,n){var r=n(2);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(69),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o},function(e,t,n){"use strict";function r(e,t,n,r,a,o,i,s){var u,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),i?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=u):a&&(u=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),u)if(c.functional){c._injectStyles=u;var l=c.render;c.render=function(e,t){return u.call(t),l(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:c}}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(1),a=n(32),o=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(a(e),t)}},function(e,t,n){var r=n(0),a=n(55),o=a.all;e.exports=a.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:r(e)||e===o}:function(e){return"object"==typeof e?null!==e:r(e)}},function(e,t,n){var r=n(163),a=n(166);e.exports=function(e,t){var n=a(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";n.d(t,"e",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"j",(function(){return i})),n.d(t,"g",(function(){return u})),n.d(t,"h",(function(){return c})),n.d(t,"i",(function(){return l})),n.d(t,"c",(function(){return d})),n.d(t,"f",(function(){return f})),n.d(t,"l",(function(){return p})),n.d(t,"m",(function(){return h})),n.d(t,"d",(function(){return g})),n.d(t,"k",(function(){return m})),n.d(t,"n",(function(){return v})),n.d(t,"a",(function(){return q}));n(16);const r=/#.*$/,a=/\.(md|html)$/,o=/\/$/,i=/^[a-z]+:/i;function s(e){return decodeURI(e).replace(r,"").replace(a,"")}function u(e){return i.test(e)}function c(e){return/^mailto:/.test(e)}function l(e){return/^tel:/.test(e)}function d(e){if(u(e))return e;if(!e)return"404";const t=e.match(r),n=t?t[0]:"",a=s(e);return o.test(a)?e:a+".html"+n}function f(e,t){const n=e.hash,a=function(e){const t=e&&e.match(r);if(t)return t[0]}(t);if(a&&n!==a)return!1;return s(e.path)===s(t)}function p(e,t,n){if(u(t))return{type:"external",path:t};n&&(t=function(e,t,n){const r=e.charAt(0);if("/"===r)return e;if("?"===r||"#"===r)return t+e;const a=t.split("/");n&&a[a.length-1]||a.pop();const o=e.replace(/^\//,"").split("/");for(let e=0;e<o.length;e++){const t=o[e];".."===t?a.pop():"."!==t&&a.push(t)}""!==a[0]&&a.unshift("");return a.join("/")}(t,n));const r=s(t);for(let t=0;t<e.length;t++)if(s(e[t].regularPath)===r)return Object.assign({},e[t],{type:"page",path:d(e[t].path)});return console.error(`[vuepress] No matching page found for sidebar item "${t}"`),{}}function h(e,t,n,r){const{pages:a,themeConfig:o}=n,i=r&&o.locales&&o.locales[r]||o;if("auto"===(e.frontmatter.sidebar||i.sidebar||o.sidebar))return y(e);const s=i.sidebar||o.sidebar;if(s){const{base:n,config:r}=function(e,t){if(Array.isArray(t))return{base:"/",config:t};for(const r in t)if(0===(n=e,/(\.html|\/)$/.test(n)?n:n+"/").indexOf(encodeURI(r)))return{base:r,config:t[r]};var n;return{}}(t,s);return"auto"===r?y(e):r?r.map(e=>function e(t,n,r,a=1){if("string"==typeof t)return p(n,t,r);if(Array.isArray(t))return Object.assign(p(n,t[0],r),{title:t[1]});{a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=t.children||[];return 0===o.length&&t.path?Object.assign(p(n,t.path,r),{title:t.title}):{type:"group",path:t.path,title:t.title,sidebarDepth:t.sidebarDepth,initialOpenGroupIndex:t.initialOpenGroupIndex,children:o.map(t=>e(t,n,r,a+1)),collapsable:!1!==t.collapsable}}}(e,a,n)):[]}return[]}function y(e){const t=g(e.headers||[]);return[{type:"group",collapsable:!1,title:e.title,path:null,children:t.map(t=>({type:"auto",title:t.title,basePath:e.path,path:e.path+"#"+t.slug,children:t.children||[]}))}]}function g(e){let t;return(e=e.map(e=>Object.assign({},e))).forEach(e=>{2===e.level?t=e:t&&(t.children||(t.children=[])).push(e)}),e.filter(e=>2===e.level)}function m(e){return Object.assign(e,{type:e.items&&e.items.length?"links":"link"})}function v(e){return Object.prototype.toString.call(e).match(/\[object (.*?)\]/)[1].toLowerCase()}function b(e){let t=e.frontmatter.date||e.lastUpdated||new Date,n=new Date(t);return"Invalid Date"==n&&t&&(n=new Date(t.replace(/-/g,"/"))),n.getTime()}function q(e,t){return b(t)-b(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(15),a=n(148),o=n(149),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?a(e):o(e)}},function(e,t,n){var r=n(4),a=n(17),o=n(35);e.exports=r?function(e,t,n){return a.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(6).Symbol;e.exports=r},function(e,t,n){"use strict";var r=n(26),a=n(32),o=n(33),i=n(127),s=n(129);r({target:"Array",proto:!0,arity:1,forced:n(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var t=a(this),n=o(t),r=arguments.length;s(n+r);for(var u=0;u<r;u++)t[n]=arguments[u],n++;return i(t,n),n}})},function(e,t,n){var r=n(4),a=n(64),o=n(98),i=n(25),s=n(54),u=TypeError,c=Object.defineProperty,l=Object.getOwnPropertyDescriptor;t.f=r?o?function(e,t,n){if(i(e),t=s(t),i(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var r=l(e,t);r&&r.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return c(e,t,n)}:c:function(e,t,n){if(i(e),t=s(t),i(n),a)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw u("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(1),a=r({}.toString),o=r("".slice);e.exports=function(e){return o(a(e),8,-1)}},function(e,t,n){var r=n(153),a=n(154),o=n(155),i=n(156),s=n(157);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(71);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(10)(Object,"create");e.exports=r},function(e,t,n){var r=n(175);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(45);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var e,t,n={version:"0.2.0"},r=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(e,t,n){return e<t?t:e>n?n:e}function o(e){return 100*(-1+e)}n.configure=function(e){var t,n;for(t in e)void 0!==(n=e[t])&&e.hasOwnProperty(t)&&(r[t]=n);return this},n.status=null,n.set=function(e){var t=n.isStarted();e=a(e,r.minimum,1),n.status=1===e?null:e;var u=n.render(!t),c=u.querySelector(r.barSelector),l=r.speed,d=r.easing;return u.offsetWidth,i((function(t){""===r.positionUsing&&(r.positionUsing=n.getPositioningCSS()),s(c,function(e,t,n){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+t+"ms "+n,a}(e,l,d)),1===e?(s(u,{transition:"none",opacity:1}),u.offsetWidth,setTimeout((function(){s(u,{transition:"all "+l+"ms linear",opacity:0}),setTimeout((function(){n.remove(),t()}),l)}),l)):setTimeout(t,l)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var e=function(){setTimeout((function(){n.status&&(n.trickle(),e())}),r.trickleSpeed)};return r.trickle&&e(),this},n.done=function(e){return e||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(e){var t=n.status;return t?("number"!=typeof e&&(e=(1-t)*a(Math.random()*t,.1,.95)),t=a(t+e,0,.994),n.set(t)):n.start()},n.trickle=function(){return n.inc(Math.random()*r.trickleRate)},e=0,t=0,n.promise=function(r){return r&&"resolved"!==r.state()?(0===t&&n.start(),e++,t++,r.always((function(){0==--t?(e=0,n.done()):n.set((e-t)/e)})),this):this},n.render=function(e){if(n.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=r.template;var a,i=t.querySelector(r.barSelector),u=e?"-100":o(n.status||0),l=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+u+"%,0,0)"}),r.showSpinner||(a=t.querySelector(r.spinnerSelector))&&f(a),l!=document.body&&c(l,"nprogress-custom-parent"),l.appendChild(t),t},n.remove=function(){l(document.documentElement,"nprogress-busy"),l(document.querySelector(r.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&f(e)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var e=document.body.style,t="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return t+"Perspective"in e?"translate3d":t+"Transform"in e?"translate":"margin"};var i=function(){var e=[];function t(){var n=e.shift();n&&n(t)}return function(n){e.push(n),1==e.length&&t()}}(),s=function(){var e=["Webkit","O","Moz","ms"],t={};function n(n){return n=n.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()})),t[n]||(t[n]=function(t){var n=document.body.style;if(t in n)return t;for(var r,a=e.length,o=t.charAt(0).toUpperCase()+t.slice(1);a--;)if((r=e[a]+o)in n)return r;return t}(n))}function r(e,t,r){t=n(t),e.style[t]=r}return function(e,t){var n,a,o=arguments;if(2==o.length)for(n in t)void 0!==(a=t[n])&&t.hasOwnProperty(n)&&r(e,n,a);else r(e,o[1],o[2])}}();function u(e,t){return("string"==typeof e?e:d(e)).indexOf(" "+t+" ")>=0}function c(e,t){var n=d(e),r=n+t;u(n,t)||(e.className=r.substring(1))}function l(e,t){var n,r=d(e);u(e,t)&&(n=r.replace(" "+t+" "," "),e.className=n.substring(1,n.length-1))}function d(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function f(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return n})?r.call(t,n,t,e):r)||(e.exports=a)},function(e,t,n){var r=n(9),a=String,o=TypeError;e.exports=function(e){if(r(e))return e;throw o(a(e)+" is not an object")}},function(e,t,n){var r=n(3),a=n(51).f,o=n(14),i=n(110),s=n(37),u=n(65),c=n(123);e.exports=function(e,t){var n,l,d,f,p,h=e.target,y=e.global,g=e.stat;if(n=y?r:g?r[h]||s(h,{}):(r[h]||{}).prototype)for(l in t){if(f=t[l],d=e.dontCallGetSet?(p=a(n,l))&&p.value:n[l],!c(y?l:h+(g?".":"#")+l,e.forced)&&void 0!==d){if(typeof f==typeof d)continue;u(f,d)}(e.sham||d&&d.sham)&&o(f,"sham",!0),i(n,l,f,e)}}},function(e,t,n){var r=n(2);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,t,n){var r=n(47),a=n(52);e.exports=function(e){return r(a(e))}},function(e,t,n){var r=n(3),a=n(0),o=function(e){return a(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e]):r[e]&&r[e][t]}},function(e,t,n){var r=n(0),a=n(108),o=TypeError;e.exports=function(e){if(r(e))return e;throw o(a(e)+" is not a function")}},function(e,t,n){var r=n(3),a=n(61),o=n(8),i=n(63),s=n(59),u=n(58),c=r.Symbol,l=a("wks"),d=u?c.for||c:c&&c.withoutSetter||i;e.exports=function(e){return o(l,e)||(l[e]=s&&o(c,e)?c[e]:d("Symbol."+e)),l[e]}},function(e,t,n){var r=n(52),a=Object;e.exports=function(e){return a(r(e))}},function(e,t,n){var r=n(121);e.exports=function(e){return r(e.length)}},function(e,t,n){var r=n(27),a=Function.prototype.call;e.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(3),a=n(37),o=r["__core-js_shared__"]||a("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(3),a=Object.defineProperty;e.exports=function(e,t){try{a(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(147),a=n(12),o=Object.prototype,i=o.hasOwnProperty,s=o.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return a(e)&&i.call(e,"callee")&&!s.call(e,"callee")};e.exports=u},function(e,t,n){var r=n(10)(n(6),"Map");e.exports=r},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(167),a=n(174),o=n(176),i=n(177),s=n(178);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){var r=n(5),a=n(45),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!a(e))||(i.test(e)||!o.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var r=n(13),a=n(12);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==r(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(1),a=n(2),o=n(18),i=Object,s=r("".split);e.exports=a((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?s(e,""):i(e)}:i},function(e,t){e.exports={}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,u="object"==typeof self&&self&&self.Object===Object&&self,c=s||u||Function("return this")(),l=Object.prototype.toString,d=Math.max,f=Math.min,p=function(){return c.Date.now()};function h(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==l.call(e)}(e))return NaN;if(h(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=h(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=a.test(e);return s||o.test(e)?i(e.slice(2),s?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var r,a,o,i,s,u,c=0,l=!1,g=!1,m=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function v(t){var n=r,o=a;return r=a=void 0,c=t,i=e.apply(o,n)}function b(e){return c=e,s=setTimeout(w,t),l?v(e):i}function q(e){var n=e-u;return void 0===u||n>=t||n<0||g&&e-c>=o}function w(){var e=p();if(q(e))return k(e);s=setTimeout(w,function(e){var n=t-(e-u);return g?f(n,o-(e-c)):n}(e))}function k(e){return s=void 0,m&&r?v(e):(r=a=void 0,i)}function x(){var e=p(),n=q(e);if(r=arguments,a=this,u=e,n){if(void 0===s)return b(u);if(g)return s=setTimeout(w,t),v(u)}return void 0===s&&(s=setTimeout(w,t)),i}return t=y(t)||0,h(n)&&(l=!!n.leading,o=(g="maxWait"in n)?d(y(n.maxWait)||0,t):o,m="trailing"in n?!!n.trailing:m),x.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=u=a=s=void 0},x.flush=function(){return void 0===s?i:k(p())},x}},function(e,t,n){var r=n(4),a=n(34),o=n(104),i=n(35),s=n(28),u=n(54),c=n(8),l=n(64),d=Object.getOwnPropertyDescriptor;t.f=r?d:function(e,t){if(e=s(e),t=u(t),l)try{return d(e,t)}catch(e){}if(c(e,t))return i(!a(o.f,e,t),e[t])}},function(e,t,n){var r=n(53),a=TypeError;e.exports=function(e){if(r(e))throw a("Can't call method on "+e);return e}},function(e,t){e.exports=function(e){return null==e}},function(e,t,n){var r=n(105),a=n(56);e.exports=function(e){var t=r(e,"string");return a(t)?t:t+""}},function(e,t){var n="object"==typeof document&&document.all,r=void 0===n&&void 0!==n;e.exports={all:n,IS_HTMLDDA:r}},function(e,t,n){var r=n(29),a=n(0),o=n(57),i=n(58),s=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return a(t)&&o(t.prototype,s(e))}},function(e,t,n){var r=n(1);e.exports=r({}.isPrototypeOf)},function(e,t,n){var r=n(59);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r=n(60),a=n(2);e.exports=!!Object.getOwnPropertySymbols&&!a((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(e,t,n){var r,a,o=n(3),i=n(106),s=o.process,u=o.Deno,c=s&&s.versions||u&&u.version,l=c&&c.v8;l&&(a=(r=l.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(a=+r[1]),e.exports=a},function(e,t,n){var r=n(62),a=n(36);(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.29.1",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.29.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,t){e.exports=!1},function(e,t,n){var r=n(1),a=0,o=Math.random(),i=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++a+o,36)}},function(e,t,n){var r=n(4),a=n(2),o=n(97);e.exports=!r&&!a((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(8),a=n(116),o=n(51),i=n(17);e.exports=function(e,t,n){for(var s=a(t),u=i.f,c=o.f,l=0;l<s.length;l++){var d=s[l];r(e,d)||n&&r(n,d)||u(e,d,c(t,d))}}},function(e,t,n){var r=n(120);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},function(e,t,n){var r=n(133),a=n(25),o=n(134);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.prototype,"__proto__","set"))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return a(n),o(r),t?e(n,r):n.__proto__=r,n}}():void 0)},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}},function(e,t){var n="object"==typeof global&&global&&global.Object===Object&&global;e.exports=n},function(e,t,n){var r=n(19),a=n(158),o=n(159),i=n(160),s=n(161),u=n(162);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=a,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=s,c.prototype.set=u,e.exports=c},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(13),a=n(40);e.exports=function(e){if(!a(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(179),a=n(12);e.exports=function e(t,n,o,i,s){return t===n||(null==t||null==n||!a(t)&&!a(n)?t!=t&&n!=n:r(t,n,o,i,e,s))}},function(e,t,n){var r=n(76),a=n(182),o=n(77);e.exports=function(e,t,n,i,s,u){var c=1&n,l=e.length,d=t.length;if(l!=d&&!(c&&d>l))return!1;var f=u.get(e),p=u.get(t);if(f&&p)return f==t&&p==e;var h=-1,y=!0,g=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++h<l;){var m=e[h],v=t[h];if(i)var b=c?i(v,m,h,t,e,u):i(m,v,h,e,t,u);if(void 0!==b){if(b)continue;y=!1;break}if(g){if(!a(t,(function(e,t){if(!o(g,t)&&(m===e||s(m,e,n,i,u)))return g.push(t)}))){y=!1;break}}else if(m!==v&&!s(m,v,n,i,u)){y=!1;break}}return u.delete(e),u.delete(t),y}},function(e,t,n){var r=n(41),a=n(180),o=n(181);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=a,i.prototype.has=o,e.exports=i},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t,n){var r=n(192),a=n(198),o=n(82);e.exports=function(e){return o(e)?r(e):a(e)}},function(e,t,n){(function(e){var r=n(6),a=n(194),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===o?r.Buffer:void 0,u=(s?s.isBuffer:void 0)||a;e.exports=u}).call(this,n(49)(e))},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(195),a=n(196),o=n(197),i=o&&o.isTypedArray,s=i?a(i):r;e.exports=s},function(e,t,n){var r=n(72),a=n(43);e.exports=function(e){return null!=e&&a(e.length)&&!r(e)}},function(e,t,n){var r=n(10)(n(6),"Set");e.exports=r},function(e,t,n){var r=n(40);e.exports=function(e){return e==e&&!r(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},function(e,t,n){var r=n(87),a=n(23);e.exports=function(e,t){for(var n=0,o=(t=r(t,e)).length;null!=e&&n<o;)e=e[a(t[n++])];return n&&n==o?e:void 0}},function(e,t,n){var r=n(5),a=n(44),o=n(209),i=n(212);e.exports=function(e,t){return r(e)?e:a(e,t)?[e]:o(i(e))}},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){var r=n(145),a=n(150),o=n(221),i=n(229),s=n(238),u=n(101),c=o((function(e){var t=u(e);return s(t)&&(t=void 0),i(r(e,1,s,!0),a(t,2))}));e.exports=c},function(e,t,n){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;e.exports=function(e){var t,n=""+e,a=r.exec(n);if(!a)return n;var o="",i=0,s=0;for(i=a.index;i<n.length;i++){switch(n.charCodeAt(i)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}s!==i&&(o+=n.substring(s,i)),s=i+1,o+=t}return s!==i?o+n.substring(s,i):o}},function(e,t,n){"use strict";n.r(t);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(n(241),n(7)),o=Object(a.a)(r,(function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4a629865",null);t.default=o.exports},function(e,t,n){"use strict";n.r(t);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(e){this.codeTabs.forEach(e=>{e.elm.classList.remove("theme-code-block__active")}),this.codeTabs[e].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(e=>Boolean(e.componentOptions)).map((e,t)=>(""===e.componentOptions.propsData.active&&(this.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(e){this.activeCodeTabIndex=e}}},a=(n(242),n(7)),o=Object(a.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"theme-code-group"},[n("div",{staticClass:"theme-code-group__nav"},[n("ul",{staticClass:"theme-code-group__ul"},e._l(e.codeTabs,(function(t,r){return n("li",{key:t.title,staticClass:"theme-code-group__li"},[n("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===e.activeCodeTabIndex},on:{click:function(t){return e.changeCodeTab(r)}}},[e._v("\n            "+e._s(t.title)+"\n          ")])])})),0)]),e._v(" "),e._t("default"),e._v(" "),e.codeTabs.length<1?n("pre",{staticClass:"pre-blank"},[e._v("// Make sure to add code blocks to your code group")]):e._e()],2)}),[],!1,null,"585e7ab0",null);t.default=o.exports},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(3),a=n(9),o=r.document,i=a(o)&&a(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(4),a=n(2);e.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,t,n){var r=n(61),a=n(63),o=r("keys");e.exports=function(e){return o[e]||(o[e]=a(e))}},function(e,t,n){var r=n(1),a=n(8),o=n(28),i=n(118).indexOf,s=n(48),u=r([].push);e.exports=function(e,t){var n,r=o(e),c=0,l=[];for(n in r)!a(s,n)&&a(r,n)&&u(l,n);for(;t.length>c;)a(r,n=t[c++])&&(~i(l,n)||u(l,n));return l}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},function(e,t,n){e.exports=n(247)},function(e,t,n){"use strict";var r=n(26),a=n(124).left,o=n(125),i=n(60);r({target:"Array",proto:!0,forced:!n(126)&&i>79&&i<83||!o("reduce")},{reduce:function(e){var t=arguments.length;return a(this,e,t,t>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,o=a&&!r.call({1:2},1);t.f=o?function(e){var t=a(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(34),a=n(9),o=n(56),i=n(107),s=n(109),u=n(31),c=TypeError,l=u("toPrimitive");e.exports=function(e,t){if(!a(e)||o(e))return e;var n,u=i(e,l);if(u){if(void 0===t&&(t="default"),n=r(u,e,t),!a(n)||o(n))return n;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),s(e,t)}},function(e,t){e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,t,n){var r=n(30),a=n(53);e.exports=function(e,t){var n=e[t];return a(n)?void 0:r(n)}},function(e,t){var n=String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},function(e,t,n){var r=n(34),a=n(0),o=n(9),i=TypeError;e.exports=function(e,t){var n,s;if("string"===t&&a(n=e.toString)&&!o(s=r(n,e)))return s;if(a(n=e.valueOf)&&!o(s=r(n,e)))return s;if("string"!==t&&a(n=e.toString)&&!o(s=r(n,e)))return s;throw i("Can't convert object to primitive value")}},function(e,t,n){var r=n(0),a=n(17),o=n(111),i=n(37);e.exports=function(e,t,n,s){s||(s={});var u=s.enumerable,c=void 0!==s.name?s.name:t;if(r(n)&&o(n,c,s),s.global)u?e[t]=n:i(t,n);else{try{s.unsafe?e[t]&&(u=!0):delete e[t]}catch(e){}u?e[t]=n:a.f(e,t,{value:n,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,t,n){var r=n(1),a=n(2),o=n(0),i=n(8),s=n(4),u=n(112).CONFIGURABLE,c=n(113),l=n(114),d=l.enforce,f=l.get,p=String,h=Object.defineProperty,y=r("".slice),g=r("".replace),m=r([].join),v=s&&!a((function(){return 8!==h((function(){}),"length",{value:8}).length})),b=String(String).split("String"),q=e.exports=function(e,t,n){"Symbol("===y(p(t),0,7)&&(t="["+g(p(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!i(e,"name")||u&&e.name!==t)&&(s?h(e,"name",{value:t,configurable:!0}):e.name=t),v&&n&&i(n,"arity")&&e.length!==n.arity&&h(e,"length",{value:n.arity});try{n&&i(n,"constructor")&&n.constructor?s&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=d(e);return i(r,"source")||(r.source=m(b,"string"==typeof t?t:"")),e};Function.prototype.toString=q((function(){return o(this)&&f(this).source||c(this)}),"toString")},function(e,t,n){var r=n(4),a=n(8),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=a(o,"name"),u=s&&"something"===function(){}.name,c=s&&(!r||r&&i(o,"name").configurable);e.exports={EXISTS:s,PROPER:u,CONFIGURABLE:c}},function(e,t,n){var r=n(1),a=n(0),o=n(36),i=r(Function.toString);a(o.inspectSource)||(o.inspectSource=function(e){return i(e)}),e.exports=o.inspectSource},function(e,t,n){var r,a,o,i=n(115),s=n(3),u=n(9),c=n(14),l=n(8),d=n(36),f=n(99),p=n(48),h=s.TypeError,y=s.WeakMap;if(i||d.state){var g=d.state||(d.state=new y);g.get=g.get,g.has=g.has,g.set=g.set,r=function(e,t){if(g.has(e))throw h("Object already initialized");return t.facade=e,g.set(e,t),t},a=function(e){return g.get(e)||{}},o=function(e){return g.has(e)}}else{var m=f("state");p[m]=!0,r=function(e,t){if(l(e,m))throw h("Object already initialized");return t.facade=e,c(e,m,t),t},a=function(e){return l(e,m)?e[m]:{}},o=function(e){return l(e,m)}}e.exports={set:r,get:a,has:o,enforce:function(e){return o(e)?a(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=a(t)).type!==e)throw h("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(3),a=n(0),o=r.WeakMap;e.exports=a(o)&&/native code/.test(String(o))},function(e,t,n){var r=n(29),a=n(1),o=n(117),i=n(122),s=n(25),u=a([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(s(e)),n=i.f;return n?u(t,n(e)):t}},function(e,t,n){var r=n(100),a=n(96).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,a)}},function(e,t,n){var r=n(28),a=n(119),o=n(33),i=function(e){return function(t,n,i){var s,u=r(t),c=o(u),l=a(i,c);if(e&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,n){var r=n(66),a=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?a(n+t,0):o(n,t)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=Math.trunc||function(e){var t=+e;return(t>0?r:n)(t)}},function(e,t,n){var r=n(66),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(2),a=n(0),o=/#|\.prototype\./,i=function(e,t){var n=u[s(e)];return n==l||n!=c&&(a(t)?r(t):!!t)},s=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},u=i.data={},c=i.NATIVE="N",l=i.POLYFILL="P";e.exports=i},function(e,t,n){var r=n(30),a=n(32),o=n(47),i=n(33),s=TypeError,u=function(e){return function(t,n,u,c){r(n);var l=a(t),d=o(l),f=i(l),p=e?f-1:0,h=e?-1:1;if(u<2)for(;;){if(p in d){c=d[p],p+=h;break}if(p+=h,e?p<0:f<=p)throw s("Reduce of empty array with no initial value")}for(;e?p>=0:f>p;p+=h)p in d&&(c=n(c,d[p],p,l));return c}};e.exports={left:u(!1),right:u(!0)}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},function(e,t,n){var r=n(18);e.exports="undefined"!=typeof process&&"process"==r(process)},function(e,t,n){"use strict";var r=n(4),a=n(128),o=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,t){if(a(e)&&!i(e,"length").writable)throw o("Cannot set read only .length");return e.length=t}:function(e,t){return e.length=t}},function(e,t,n){var r=n(18);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t){var n=TypeError;e.exports=function(e){if(e>9007199254740991)throw n("Maximum allowed index exceeded");return e}},function(e,t,n){var r=n(26),a=n(3),o=n(131),i=n(132),s=a.WebAssembly,u=7!==Error("e",{cause:7}).cause,c=function(e,t){var n={};n[e]=i(e,t,u),r({global:!0,constructor:!0,arity:1,forced:u},n)},l=function(e,t){if(s&&s[e]){var n={};n[e]=i("WebAssembly."+e,t,u),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:u},n)}};c("Error",(function(e){return function(t){return o(e,this,arguments)}})),c("EvalError",(function(e){return function(t){return o(e,this,arguments)}})),c("RangeError",(function(e){return function(t){return o(e,this,arguments)}})),c("ReferenceError",(function(e){return function(t){return o(e,this,arguments)}})),c("SyntaxError",(function(e){return function(t){return o(e,this,arguments)}})),c("TypeError",(function(e){return function(t){return o(e,this,arguments)}})),c("URIError",(function(e){return function(t){return o(e,this,arguments)}})),l("CompileError",(function(e){return function(t){return o(e,this,arguments)}})),l("LinkError",(function(e){return function(t){return o(e,this,arguments)}})),l("RuntimeError",(function(e){return function(t){return o(e,this,arguments)}}))},function(e,t,n){var r=n(27),a=Function.prototype,o=a.apply,i=a.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(o):function(){return i.apply(o,arguments)})},function(e,t,n){"use strict";var r=n(29),a=n(8),o=n(14),i=n(57),s=n(67),u=n(65),c=n(135),l=n(136),d=n(137),f=n(141),p=n(142),h=n(4),y=n(62);e.exports=function(e,t,n,g){var m=g?2:1,v=e.split("."),b=v[v.length-1],q=r.apply(null,v);if(q){var w=q.prototype;if(!y&&a(w,"cause")&&delete w.cause,!n)return q;var k=r("Error"),x=t((function(e,t){var n=d(g?t:e,void 0),r=g?new q(e):new q;return void 0!==n&&o(r,"message",n),p(r,x,r.stack,2),this&&i(w,this)&&l(r,this,x),arguments.length>m&&f(r,arguments[m]),r}));if(x.prototype=w,"Error"!==b?s?s(x,k):u(x,k,{name:!0}):h&&"stackTraceLimit"in q&&(c(x,q,"stackTraceLimit"),c(x,q,"prepareStackTrace")),u(x,q),!y)try{w.name!==b&&o(w,"name",b),w.constructor=x}catch(e){}return x}}},function(e,t,n){var r=n(1),a=n(30);e.exports=function(e,t,n){try{return r(a(Object.getOwnPropertyDescriptor(e,t)[n]))}catch(e){}}},function(e,t,n){var r=n(0),a=String,o=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw o("Can't set "+a(e)+" as a prototype")}},function(e,t,n){var r=n(17).f;e.exports=function(e,t,n){n in e||r(e,n,{configurable:!0,get:function(){return t[n]},set:function(e){t[n]=e}})}},function(e,t,n){var r=n(0),a=n(9),o=n(67);e.exports=function(e,t,n){var i,s;return o&&r(i=t.constructor)&&i!==n&&a(s=i.prototype)&&s!==n.prototype&&o(e,s),e}},function(e,t,n){var r=n(138);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:r(e)}},function(e,t,n){var r=n(139),a=String;e.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return a(e)}},function(e,t,n){var r=n(140),a=n(0),o=n(18),i=n(31)("toStringTag"),s=Object,u="Arguments"==o(function(){return arguments}());e.exports=r?o:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=s(e),i))?n:u?o(t):"Object"==(r=o(t))&&a(t.callee)?"Arguments":r}},function(e,t,n){var r={};r[n(31)("toStringTag")]="z",e.exports="[object z]"===String(r)},function(e,t,n){var r=n(9),a=n(14);e.exports=function(e,t){r(t)&&"cause"in t&&a(e,"cause",t.cause)}},function(e,t,n){var r=n(14),a=n(143),o=n(144),i=Error.captureStackTrace;e.exports=function(e,t,n,s){o&&(i?i(e,t):r(e,"stack",a(n,s)))}},function(e,t,n){var r=n(1),a=Error,o=r("".replace),i=String(a("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,u=s.test(i);e.exports=function(e,t){if(u&&"string"==typeof e&&!a.prepareStackTrace)for(;t--;)e=o(e,s,"");return e}},function(e,t,n){var r=n(2),a=n(35);e.exports=!r((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",a(1,7)),7!==e.stack)}))},function(e,t,n){var r=n(68),a=n(146);e.exports=function e(t,n,o,i,s){var u=-1,c=t.length;for(o||(o=a),s||(s=[]);++u<c;){var l=t[u];n>0&&o(l)?n>1?e(l,n-1,o,i,s):r(s,l):i||(s[s.length]=l)}return s}},function(e,t,n){var r=n(15),a=n(38),o=n(5),i=r?r.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||a(e)||!!(i&&e&&e[i])}},function(e,t,n){var r=n(13),a=n(12);e.exports=function(e){return a(e)&&"[object Arguments]"==r(e)}},function(e,t,n){var r=n(15),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[s]=n:delete e[s]),a}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(151),a=n(207),o=n(46),i=n(5),s=n(218);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?i(e)?a(e[0],e[1]):r(e):s(e)}},function(e,t,n){var r=n(152),a=n(206),o=n(85);e.exports=function(e){var t=a(e);return 1==t.length&&t[0][2]?o(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(70),a=n(74);e.exports=function(e,t,n,o){var i=n.length,s=i,u=!o;if(null==e)return!s;for(e=Object(e);i--;){var c=n[i];if(u&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++i<s;){var l=(c=n[i])[0],d=e[l],f=c[1];if(u&&c[2]){if(void 0===d&&!(l in e))return!1}else{var p=new r;if(o)var h=o(d,f,l,e,t,p);if(!(void 0===h?a(f,d,3,o,p):h))return!1}}return!0}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(20),a=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():a.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(20);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(20);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(20);e.exports=function(e,t){var n=this.__data__,a=r(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this}},function(e,t,n){var r=n(19);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(19),a=n(39),o=n(41);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!a||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(72),a=n(164),o=n(40),i=n(73),s=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,l=u.toString,d=c.hasOwnProperty,f=RegExp("^"+l.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||a(e))&&(r(e)?f:s).test(i(e))}},function(e,t,n){var r,a=n(165),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!o&&o in e}},function(e,t,n){var r=n(6)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(168),a=n(19),o=n(39);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},function(e,t,n){var r=n(169),a=n(170),o=n(171),i=n(172),s=n(173);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=s,e.exports=u},function(e,t,n){var r=n(21);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(21),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return a.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(21),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:a.call(t,e)}},function(e,t,n){var r=n(21);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(22);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(22);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(22);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(22);e.exports=function(e,t){var n=r(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this}},function(e,t,n){var r=n(70),a=n(75),o=n(183),i=n(186),s=n(202),u=n(5),c=n(79),l=n(81),d="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,p,h,y){var g=u(e),m=u(t),v=g?"[object Array]":s(e),b=m?"[object Array]":s(t),q=(v="[object Arguments]"==v?d:v)==d,w=(b="[object Arguments]"==b?d:b)==d,k=v==b;if(k&&c(e)){if(!c(t))return!1;g=!0,q=!1}if(k&&!q)return y||(y=new r),g||l(e)?a(e,t,n,p,h,y):o(e,t,v,n,p,h,y);if(!(1&n)){var x=q&&f.call(e,"__wrapped__"),_=w&&f.call(t,"__wrapped__");if(x||_){var C=x?e.value():e,E=_?t.value():t;return y||(y=new r),h(C,E,n,p,y)}}return!!k&&(y||(y=new r),i(e,t,n,p,h,y))}},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t,n){var r=n(15),a=n(184),o=n(71),i=n(75),s=n(185),u=n(42),c=r?r.prototype:void 0,l=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,d,f){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new a(e),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=s;case"[object Set]":var h=1&r;if(p||(p=u),e.size!=t.size&&!h)return!1;var y=f.get(e);if(y)return y==t;r|=2,f.set(e,t);var g=i(p(e),p(t),r,c,d,f);return f.delete(e),g;case"[object Symbol]":if(l)return l.call(e)==l.call(t)}return!1}},function(e,t,n){var r=n(6).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t,n){var r=n(187),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,i,s){var u=1&n,c=r(e),l=c.length;if(l!=r(t).length&&!u)return!1;for(var d=l;d--;){var f=c[d];if(!(u?f in t:a.call(t,f)))return!1}var p=s.get(e),h=s.get(t);if(p&&h)return p==t&&h==e;var y=!0;s.set(e,t),s.set(t,e);for(var g=u;++d<l;){var m=e[f=c[d]],v=t[f];if(o)var b=u?o(v,m,f,t,e,s):o(m,v,f,e,t,s);if(!(void 0===b?m===v||i(m,v,n,o,s):b)){y=!1;break}g||(g="constructor"==f)}if(y&&!g){var q=e.constructor,w=t.constructor;q==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof q&&q instanceof q&&"function"==typeof w&&w instanceof w||(y=!1)}return s.delete(e),s.delete(t),y}},function(e,t,n){var r=n(188),a=n(189),o=n(78);e.exports=function(e){return r(e,o,a)}},function(e,t,n){var r=n(68),a=n(5);e.exports=function(e,t,n){var o=t(e);return a(e)?o:r(o,n(e))}},function(e,t,n){var r=n(190),a=n(191),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return o.call(e,t)})))}:a;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,a=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[a++]=i)}return o}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(193),a=n(38),o=n(5),i=n(79),s=n(80),u=n(81),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),l=!n&&a(e),d=!n&&!l&&i(e),f=!n&&!l&&!d&&u(e),p=n||l||d||f,h=p?r(e.length,String):[],y=h.length;for(var g in e)!t&&!c.call(e,g)||p&&("length"==g||d&&("offset"==g||"parent"==g)||f&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,y))||h.push(g);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(13),a=n(43),o=n(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&a(e.length)&&!!i[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(69),a=t&&!t.nodeType&&t,o=a&&"object"==typeof e&&e&&!e.nodeType&&e,i=o&&o.exports===a&&r.process,s=function(){try{var e=o&&o.require&&o.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=s}).call(this,n(49)(e))},function(e,t,n){var r=n(199),a=n(200),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return a(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(201)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(203),a=n(39),o=n(204),i=n(83),s=n(205),u=n(13),c=n(73),l=c(r),d=c(a),f=c(o),p=c(i),h=c(s),y=u;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=y(new a)||o&&"[object Promise]"!=y(o.resolve())||i&&"[object Set]"!=y(new i)||s&&"[object WeakMap]"!=y(new s))&&(y=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case d:return"[object Map]";case f:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=y},function(e,t,n){var r=n(10)(n(6),"DataView");e.exports=r},function(e,t,n){var r=n(10)(n(6),"Promise");e.exports=r},function(e,t,n){var r=n(10)(n(6),"WeakMap");e.exports=r},function(e,t,n){var r=n(84),a=n(78);e.exports=function(e){for(var t=a(e),n=t.length;n--;){var o=t[n],i=e[o];t[n]=[o,i,r(i)]}return t}},function(e,t,n){var r=n(74),a=n(208),o=n(215),i=n(44),s=n(84),u=n(85),c=n(23);e.exports=function(e,t){return i(e)&&s(t)?u(c(e),t):function(n){var i=a(n,e);return void 0===i&&i===t?o(n,e):r(t,i,3)}}},function(e,t,n){var r=n(86);e.exports=function(e,t,n){var a=null==e?void 0:r(e,t);return void 0===a?n:a}},function(e,t,n){var r=n(210),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(a,(function(e,n,r,a){t.push(r?a.replace(o,"$1"):n||e)})),t}));e.exports=i},function(e,t,n){var r=n(211);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var r=n(41);function a(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,a=t?t.apply(this,r):r[0],o=n.cache;if(o.has(a))return o.get(a);var i=e.apply(this,r);return n.cache=o.set(a,i)||o,i};return n.cache=new(a.Cache||r),n}a.Cache=r,e.exports=a},function(e,t,n){var r=n(213);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(15),a=n(214),o=n(5),i=n(45),s=r?r.prototype:void 0,u=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return a(t,e)+"";if(i(t))return u?u.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}},function(e,t,n){var r=n(216),a=n(217);e.exports=function(e,t){return null!=e&&a(e,t,r)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(87),a=n(38),o=n(5),i=n(80),s=n(43),u=n(23);e.exports=function(e,t,n){for(var c=-1,l=(t=r(t,e)).length,d=!1;++c<l;){var f=u(t[c]);if(!(d=null!=e&&n(e,f)))break;e=e[f]}return d||++c!=l?d:!!(l=null==e?0:e.length)&&s(l)&&i(f,l)&&(o(e)||a(e))}},function(e,t,n){var r=n(219),a=n(220),o=n(44),i=n(23);e.exports=function(e){return o(e)?r(i(e)):a(e)}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(86);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t,n){var r=n(46),a=n(222),o=n(224);e.exports=function(e,t){return o(a(e,t,r),e+"")}},function(e,t,n){var r=n(223),a=Math.max;e.exports=function(e,t,n){return t=a(void 0===t?e.length-1:t,0),function(){for(var o=arguments,i=-1,s=a(o.length-t,0),u=Array(s);++i<s;)u[i]=o[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=o[i];return c[t]=n(u),r(e,this,c)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(225),a=n(228)(r);e.exports=a},function(e,t,n){var r=n(226),a=n(227),o=n(46),i=a?function(e,t){return a(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:o;e.exports=i},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var r=n(10),a=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=a},function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var a=n(),o=16-(a-r);if(r=a,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(76),a=n(230),o=n(235),i=n(77),s=n(236),u=n(42);e.exports=function(e,t,n){var c=-1,l=a,d=e.length,f=!0,p=[],h=p;if(n)f=!1,l=o;else if(d>=200){var y=t?null:s(e);if(y)return u(y);f=!1,l=i,h=new r}else h=t?[]:p;e:for(;++c<d;){var g=e[c],m=t?t(g):g;if(g=n||0!==g?g:0,f&&m==m){for(var v=h.length;v--;)if(h[v]===m)continue e;t&&h.push(m),p.push(g)}else l(h,m,n)||(h!==p&&h.push(m),p.push(g))}return p}},function(e,t,n){var r=n(231);e.exports=function(e,t){return!!(null==e?0:e.length)&&r(e,t,0)>-1}},function(e,t,n){var r=n(232),a=n(233),o=n(234);e.exports=function(e,t,n){return t==t?o(e,t,n):r(e,a,n)}},function(e,t){e.exports=function(e,t,n,r){for(var a=e.length,o=n+(r?1:-1);r?o--:++o<a;)if(t(e[o],o,e))return o;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var r=n-1,a=e.length;++r<a;)if(e[r]===t)return r;return-1}},function(e,t){e.exports=function(e,t,n){for(var r=-1,a=null==e?0:e.length;++r<a;)if(n(t,e[r]))return!0;return!1}},function(e,t,n){var r=n(83),a=n(237),o=n(42),i=r&&1/o(new r([,-0]))[1]==1/0?function(e){return new r(e)}:a;e.exports=i},function(e,t){e.exports=function(){}},function(e,t,n){var r=n(82),a=n(12);e.exports=function(e){return a(e)&&r(e)}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n(88)},function(e,t,n){"use strict";n(89)},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n(90)},function(e,t,n){"use strict";n(91)},function(e,t,n){"use strict";n.r(t);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),a=Array.isArray;function o(e){return null==e}function i(e){return null!=e}function s(e){return!0===e}function u(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return"function"==typeof e}function l(e){return null!==e&&"object"==typeof e}var d=Object.prototype.toString;function f(e){return"[object Object]"===d.call(e)}function p(e){return"[object RegExp]"===d.call(e)}function h(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function y(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||f(e)&&e.toString===d?JSON.stringify(e,null,2):String(e)}function m(e){var t=parseFloat(e);return isNaN(t)?e:t}function v(e,t){for(var n=Object.create(null),r=e.split(","),a=0;a<r.length;a++)n[r[a]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}v("slot,component",!0);var b=v("key,ref,slot,slot-scope,is");function q(e,t){var n=e.length;if(n){if(t===e[n-1])return void(e.length=n-1);var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function k(e,t){return w.call(e,t)}function x(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\w)/g,C=x((function(e){return e.replace(_,(function(e,t){return t?t.toUpperCase():""}))})),E=x((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),P=/\B([A-Z])/g,T=x((function(e){return e.replace(P,"-$1").toLowerCase()}));var Q=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function S(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function O(e,t){for(var n in t)e[n]=t[n];return e}function A(e){for(var t={},n=0;n<e.length;n++)e[n]&&O(t,e[n]);return t}function j(e,t,n){}var I=function(e,t,n){return!1},D=function(e){return e};function $(e,t){if(e===t)return!0;var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var a=Array.isArray(e),o=Array.isArray(t);if(a&&o)return e.length===t.length&&e.every((function(e,n){return $(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(a||o)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(n){return $(e[n],t[n])}))}catch(e){return!1}}function F(e,t){for(var n=0;n<e.length;n++)if($(e[n],t))return n;return-1}function M(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function L(e,t){return e===t?0===e&&1/e!=1/t:e==e||t==t}var z=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:j,parsePlatformTagName:D,mustUseProp:I,async:!0,_lifecycleHooks:R},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function K(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function U(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var H=new RegExp("[^".concat(B.source,".$_\\d]"));var V="__proto__"in{},G="undefined"!=typeof window,W=G&&window.navigator.userAgent.toLowerCase(),Z=W&&/msie|trident/.test(W),J=W&&W.indexOf("msie 9.0")>0,X=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var Y=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var ee,te=W&&W.match(/firefox\/(\d+)/),ne={}.watch,re=!1;if(G)try{var ae={};Object.defineProperty(ae,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,ae)}catch(e){}var oe=function(){return void 0===ee&&(ee=!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},ie=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);ue="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=null;function de(e){void 0===e&&(e=null),e||le&&le._scope.off(),le=e,e&&e._scope.on()}var fe=function(){function e(e,t,n,r,a,o,i,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),pe=function(e){void 0===e&&(e="");var t=new fe;return t.text=e,t.isComment=!0,t};function he(e){return new fe(void 0,void 0,void 0,String(e))}function ye(e){var t=new fe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ge=0,me=[],ve=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,me.push(this))},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var t=this.subs.filter((function(e){return e}));for(var n=0,r=t.length;n<r;n++){0,t[n].update()}},e}();ve.target=null;var be=[];function qe(e){be.push(e),ve.target=e}function we(){be.pop(),ve.target=be[be.length-1]}var ke=Array.prototype,xe=Object.create(ke);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=ke[e];U(xe,e,(function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var a,o=t.apply(this,n),i=this.__ob__;switch(e){case"push":case"unshift":a=n;break;case"splice":a=n.slice(2)}return a&&i.observeArray(a),i.dep.notify(),o}))}));var _e=Object.getOwnPropertyNames(xe),Ce={},Ee=!0;function Pe(e){Ee=e}var Te={notify:j,depend:j,addSub:j,removeSub:j},Qe=function(){function e(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=!1),this.value=e,this.shallow=t,this.mock=n,this.dep=n?Te:new ve,this.vmCount=0,U(e,"__ob__",this),a(e)){if(!n)if(V)e.__proto__=xe;else for(var r=0,o=_e.length;r<o;r++){U(e,s=_e[r],xe[s])}t||this.observeArray(e)}else{var i=Object.keys(e);for(r=0;r<i.length;r++){var s;Oe(e,s=i[r],Ce,void 0,t,n)}}}return e.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Se(e[t],!1,this.mock)},e}();function Se(e,t,n){return e&&k(e,"__ob__")&&e.__ob__ instanceof Qe?e.__ob__:!Ee||!n&&oe()||!a(e)&&!f(e)||!Object.isExtensible(e)||e.__v_skip||Me(e)||e instanceof fe?void 0:new Qe(e,t,n)}function Oe(e,t,n,r,o,i){var s=new ve,u=Object.getOwnPropertyDescriptor(e,t);if(!u||!1!==u.configurable){var c=u&&u.get,l=u&&u.set;c&&!l||n!==Ce&&2!==arguments.length||(n=e[t]);var d=!o&&Se(n,!1,i);return Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=c?c.call(e):n;return ve.target&&(s.depend(),d&&(d.dep.depend(),a(t)&&Ie(t))),Me(t)&&!o?t.value:t},set:function(t){var r=c?c.call(e):n;if(L(r,t)){if(l)l.call(e,t);else{if(c)return;if(!o&&Me(r)&&!Me(t))return void(r.value=t);n=t}d=!o&&Se(t,!1,i),s.notify()}}}),s}}function Ae(e,t,n){if(!Fe(e)){var r=e.__ob__;return a(e)&&h(t)?(e.length=Math.max(e.length,t),e.splice(t,1,n),r&&!r.shallow&&r.mock&&Se(n,!1,!0),n):t in e&&!(t in Object.prototype)?(e[t]=n,n):e._isVue||r&&r.vmCount?n:r?(Oe(r.value,t,n,void 0,r.shallow,r.mock),r.dep.notify(),n):(e[t]=n,n)}}function je(e,t){if(a(e)&&h(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||Fe(e)||k(e,t)&&(delete e[t],n&&n.dep.notify())}}function Ie(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),a(t)&&Ie(t)}function De(e){return $e(e,!0),U(e,"__v_isShallow",!0),e}function $e(e,t){if(!Fe(e)){Se(e,t,oe());0}}function Fe(e){return!(!e||!e.__v_isReadonly)}function Me(e){return!(!e||!0!==e.__v_isRef)}function Le(e,t,n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var e=t[n];if(Me(e))return e.value;var r=e&&e.__ob__;return r&&r.dep.depend(),e},set:function(e){var r=t[n];Me(r)&&!Me(e)?r.value=e:t[n]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var ze;var Re=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=ze,!e&&ze&&(this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=ze;try{return ze=this,e()}finally{ze=t}}else 0},e.prototype.on=function(){ze=this},e.prototype.off=function(){ze=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,n=void 0;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].teardown();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Ne(e){var t=e._provided,n=e.$parent&&e.$parent._provided;return n===t?e._provided=Object.create(n):t}var Be=x((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function Ke(e,t){function n(){var e=n.fns;if(!a(e))return Et(e,null,arguments,t,"v-on handler");for(var r=e.slice(),o=0;o<r.length;o++)Et(r[o],null,arguments,t,"v-on handler")}return n.fns=e,n}function Ue(e,t,n,r,a,i){var u,c,l,d;for(u in e)c=e[u],l=t[u],d=Be(u),o(c)||(o(l)?(o(c.fns)&&(c=e[u]=Ke(c,i)),s(d.once)&&(c=e[u]=a(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==l&&(l.fns=c,e[u]=l));for(u in t)o(e[u])&&r((d=Be(u)).name,t[u],d.capture)}function He(e,t,n){var r;e instanceof fe&&(e=e.data.hook||(e.data.hook={}));var a=e[t];function u(){n.apply(this,arguments),q(r.fns,u)}o(a)?r=Ke([u]):i(a.fns)&&s(a.merged)?(r=a).fns.push(u):r=Ke([a,u]),r.merged=!0,e[t]=r}function Ve(e,t,n,r,a){if(i(t)){if(k(t,n))return e[n]=t[n],a||delete t[n],!0;if(k(t,r))return e[n]=t[r],a||delete t[r],!0}return!1}function Ge(e){return u(e)?[he(e)]:a(e)?function e(t,n){var r,c,l,d,f=[];for(r=0;r<t.length;r++)o(c=t[r])||"boolean"==typeof c||(l=f.length-1,d=f[l],a(c)?c.length>0&&(We((c=e(c,"".concat(n||"","_").concat(r)))[0])&&We(d)&&(f[l]=he(d.text+c[0].text),c.shift()),f.push.apply(f,c)):u(c)?We(d)?f[l]=he(d.text+c):""!==c&&f.push(he(c)):We(c)&&We(d)?f[l]=he(d.text+c.text):(s(t._isVList)&&i(c.tag)&&o(c.key)&&i(n)&&(c.key="__vlist".concat(n,"_").concat(r,"__")),f.push(c)));return f}(e):void 0}function We(e){return i(e)&&i(e.text)&&!1===e.isComment}function Ze(e,t){var n,r,o,s,u=null;if(a(e)||"string"==typeof e)for(u=new Array(e.length),n=0,r=e.length;n<r;n++)u[n]=t(e[n],n);else if("number"==typeof e)for(u=new Array(e),n=0;n<e;n++)u[n]=t(n+1,n);else if(l(e))if(ce&&e[Symbol.iterator]){u=[];for(var c=e[Symbol.iterator](),d=c.next();!d.done;)u.push(t(d.value,u.length)),d=c.next()}else for(o=Object.keys(e),u=new Array(o.length),n=0,r=o.length;n<r;n++)s=o[n],u[n]=t(e[s],s,n);return i(u)||(u=[]),u._isVList=!0,u}function Je(e,t,n,r){var a,o=this.$scopedSlots[e];o?(n=n||{},r&&(n=O(O({},r),n)),a=o(n)||(c(t)?t():t)):a=this.$slots[e]||(c(t)?t():t);var i=n&&n.slot;return i?this.$createElement("template",{slot:i},a):a}function Xe(e){return Sn(this.$options,"filters",e,!0)||D}function Ye(e,t){return a(e)?-1===e.indexOf(t):e!==t}function et(e,t,n,r,a){var o=N.keyCodes[t]||n;return a&&r&&!N.keyCodes[t]?Ye(a,r):o?Ye(o,e):r?T(r)!==t:void 0===e}function tt(e,t,n,r,o){if(n)if(l(n)){a(n)&&(n=A(n));var i=void 0,s=function(a){if("class"===a||"style"===a||b(a))i=e;else{var s=e.attrs&&e.attrs.type;i=r||N.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=C(a),c=T(a);u in i||c in i||(i[a]=n[a],o&&((e.on||(e.on={}))["update:".concat(a)]=function(e){n[a]=e}))};for(var u in n)s(u)}else;return e}function nt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||at(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),r}function rt(e,t,n){return at(e,"__once__".concat(t).concat(n?"_".concat(n):""),!0),e}function at(e,t,n){if(a(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&ot(e[r],"".concat(t,"_").concat(r),n);else ot(e,t,n)}function ot(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function it(e,t){if(t)if(f(t)){var n=e.on=e.on?O({},e.on):{};for(var r in t){var a=n[r],o=t[r];n[r]=a?[].concat(a,o):o}}else;return e}function st(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];a(i)?st(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function ut(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r&&(e[t[n]]=t[n+1])}return e}function ct(e,t){return"string"==typeof e?t+e:e}function lt(e){e._o=rt,e._n=m,e._s=g,e._l=Ze,e._t=Je,e._q=$,e._i=F,e._m=nt,e._f=Xe,e._k=et,e._b=tt,e._v=he,e._e=pe,e._u=st,e._g=it,e._d=ut,e._p=ct}function dt(e,t){if(!e||!e.length)return{};for(var n={},r=0,a=e.length;r<a;r++){var o=e[r],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==t&&o.fnContext!==t||!i||null==i.slot)(n.default||(n.default=[])).push(o);else{var s=i.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var c in n)n[c].every(ft)&&delete n[c];return n}function ft(e){return e.isComment&&!e.asyncFactory||" "===e.text}function pt(e){return e.isComment&&e.asyncFactory}function ht(e,t,n,a){var o,i=Object.keys(n).length>0,s=t?!!t.$stable:!i,u=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(s&&a&&a!==r&&u===a.$key&&!i&&!a.$hasNormal)return a;for(var c in o={},t)t[c]&&"$"!==c[0]&&(o[c]=yt(e,n,c,t[c]))}else o={};for(var l in n)l in o||(o[l]=gt(n,l));return t&&Object.isExtensible(t)&&(t._normalized=o),U(o,"$stable",s),U(o,"$key",u),U(o,"$hasNormal",i),o}function yt(e,t,n,r){var o=function(){var t=le;de(e);var n=arguments.length?r.apply(null,arguments):r({}),o=(n=n&&"object"==typeof n&&!a(n)?[n]:Ge(n))&&n[0];return de(t),n&&(!o||1===n.length&&o.isComment&&!pt(o))?void 0:n};return r.proxy&&Object.defineProperty(t,n,{get:o,enumerable:!0,configurable:!0}),o}function gt(e,t){return function(){return e[t]}}function mt(e){return{get attrs(){if(!e._attrsProxy){var t=e._attrsProxy={};U(t,"_v_attr_proxy",!0),vt(t,e.$attrs,r,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||vt(e._listenersProxy={},e.$listeners,r,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||qt(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:Q(e.$emit,e),expose:function(t){t&&Object.keys(t).forEach((function(n){return Le(e,t,n)}))}}}function vt(e,t,n,r,a){var o=!1;for(var i in t)i in e?t[i]!==n[i]&&(o=!0):(o=!0,bt(e,i,r,a));for(var i in e)i in t||(o=!0,delete e[i]);return o}function bt(e,t,n,r){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return n[r][t]}})}function qt(e,t){for(var n in t)e[n]=t[n];for(var n in e)n in t||delete e[n]}var wt=null;function kt(e,t){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function xt(e){if(a(e))for(var t=0;t<e.length;t++){var n=e[t];if(i(n)&&(i(n.componentOptions)||pt(n)))return n}}function _t(e,t,n,r,d,f){return(a(n)||u(n))&&(d=r,r=n,n=void 0),s(f)&&(d=2),function(e,t,n,r,u){if(i(n)&&i(n.__ob__))return pe();i(n)&&i(n.is)&&(t=n.is);if(!t)return pe();0;a(r)&&c(r[0])&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===u?r=Ge(r):1===u&&(r=function(e){for(var t=0;t<e.length;t++)if(a(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var d,f;if("string"==typeof t){var p=void 0;f=e.$vnode&&e.$vnode.ns||N.getTagNamespace(t),d=N.isReservedTag(t)?new fe(N.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!i(p=Sn(e.$options,"components",t))?new fe(t,n,r,void 0,void 0,e):qn(p,n,e,r,t)}else d=qn(t,n,e,r);return a(d)?d:i(d)?(i(f)&&function e(t,n,r){t.ns=n,"foreignObject"===t.tag&&(n=void 0,r=!0);if(i(t.children))for(var a=0,u=t.children.length;a<u;a++){var c=t.children[a];i(c.tag)&&(o(c.ns)||s(r)&&"svg"!==c.tag)&&e(c,n,r)}}(d,f),i(n)&&function(e){l(e.style)&&Rt(e.style);l(e.class)&&Rt(e.class)}(n),d):pe()}(e,t,n,r,d)}function Ct(e,t,n){qe();try{if(t)for(var r=t;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(r,e,t,n))return}catch(e){Pt(e,r,"errorCaptured hook")}}Pt(e,t,n)}finally{we()}}function Et(e,t,n,r,a){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&y(o)&&!o._handled&&(o.catch((function(e){return Ct(e,r,a+" (Promise/async)")})),o._handled=!0)}catch(e){Ct(e,r,a)}return o}function Pt(e,t,n){if(N.errorHandler)try{return N.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Tt(t,null,"config.errorHandler")}Tt(e,t,n)}function Tt(e,t,n){if(!G||"undefined"==typeof console)throw e;console.error(e)}var Qt,St=!1,Ot=[],At=!1;function jt(){At=!1;var e=Ot.slice(0);Ot.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var It=Promise.resolve();Qt=function(){It.then(jt),Y&&setTimeout(j)},St=!0}else if(Z||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Qt="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(jt)}:function(){setTimeout(jt,0)};else{var Dt=1,$t=new MutationObserver(jt),Ft=document.createTextNode(String(Dt));$t.observe(Ft,{characterData:!0}),Qt=function(){Dt=(Dt+1)%2,Ft.data=String(Dt)},St=!0}function Mt(e,t){var n;if(Ot.push((function(){if(e)try{e.call(t)}catch(e){Ct(e,t,"nextTick")}else n&&n(t)})),At||(At=!0,Qt()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}function Lt(e){return function(t,n){if(void 0===n&&(n=le),n)return function(e,t,n){var r=e.$options;r[t]=En(r[t],n)}(n,e,t)}}Lt("beforeMount"),Lt("mounted"),Lt("beforeUpdate"),Lt("updated"),Lt("beforeDestroy"),Lt("destroyed"),Lt("activated"),Lt("deactivated"),Lt("serverPrefetch"),Lt("renderTracked"),Lt("renderTriggered"),Lt("errorCaptured");var zt=new ue;function Rt(e){return function e(t,n){var r,o,i=a(t);if(!i&&!l(t)||t.__v_skip||Object.isFrozen(t)||t instanceof fe)return;if(t.__ob__){var s=t.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(i)for(r=t.length;r--;)e(t[r],n);else if(Me(t))e(t.value,n);else for(o=Object.keys(t),r=o.length;r--;)e(t[o[r]],n)}(e,zt),zt.clear(),e}var Nt,Bt=0,Kt=function(){function e(e,t,n,r,a){var o,i;o=this,void 0===(i=ze&&!ze._vm?ze:e?e._scope:void 0)&&(i=ze),i&&i.active&&i.effects.push(o),(this.vm=e)&&a&&(e._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Bt,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression="",c(t)?this.getter=t:(this.getter=function(e){if(!H.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=j)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;qe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Ct(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Rt(e),we(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():fn(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'.concat(this.expression,'"');Et(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&q(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Ut(e,t){Nt.$on(e,t)}function Ht(e,t){Nt.$off(e,t)}function Vt(e,t){var n=Nt;return function r(){var a=t.apply(null,arguments);null!==a&&n.$off(e,r)}}function Gt(e,t,n){Nt=e,Ue(t,n||{},Ut,Ht,Vt,e),Nt=void 0}var Wt=null;function Zt(e){var t=Wt;return Wt=e,function(){Wt=t}}function Jt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Xt(e,t){if(t){if(e._directInactive=!1,Jt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Xt(e.$children[n]);Yt(e,"activated")}}function Yt(e,t,n,r){void 0===r&&(r=!0),qe();var a=le;r&&de(e);var o=e.$options[t],i="".concat(t," hook");if(o)for(var s=0,u=o.length;s<u;s++)Et(o[s],e,n||null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),r&&de(a),we()}var en=[],tn=[],nn={},rn=!1,an=!1,on=0;var sn=0,un=Date.now;if(G&&!Z){var cn=window.performance;cn&&"function"==typeof cn.now&&un()>document.createEvent("Event").timeStamp&&(un=function(){return cn.now()})}var ln=function(e,t){if(e.post){if(!t.post)return 1}else if(t.post)return-1;return e.id-t.id};function dn(){var e,t;for(sn=un(),an=!0,en.sort(ln),on=0;on<en.length;on++)(e=en[on]).before&&e.before(),t=e.id,nn[t]=null,e.run();var n=tn.slice(),r=en.slice();on=en.length=tn.length=0,nn={},rn=an=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Xt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r&&r._watcher===n&&r._isMounted&&!r._isDestroyed&&Yt(r,"updated")}}(r),function(){for(var e=0;e<me.length;e++){var t=me[e];t.subs=t.subs.filter((function(e){return e})),t._pending=!1}me.length=0}(),ie&&N.devtools&&ie.emit("flush")}function fn(e){var t=e.id;if(null==nn[t]&&(e!==ve.target||!e.noRecurse)){if(nn[t]=!0,an){for(var n=en.length-1;n>on&&en[n].id>e.id;)n--;en.splice(n+1,0,e)}else en.push(e);rn||(rn=!0,Mt(dn))}}function pn(e,t){if(e){for(var n=Object.create(null),r=ce?Reflect.ownKeys(e):Object.keys(e),a=0;a<r.length;a++){var o=r[a];if("__ob__"!==o){var i=e[o].from;if(i in t._provided)n[o]=t._provided[i];else if("default"in e[o]){var s=e[o].default;n[o]=c(s)?s.call(t):s}else 0}}return n}}function hn(e,t,n,o,i){var u,c=this,l=i.options;k(o,"_uid")?(u=Object.create(o))._original=o:(u=o,o=o._original);var d=s(l._compiled),f=!d;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||r,this.injections=pn(l.inject,o),this.slots=function(){return c.$slots||ht(o,e.scopedSlots,c.$slots=dt(n,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ht(o,e.scopedSlots,this.slots())}}),d&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=ht(o,e.scopedSlots,this.$slots)),l._scopeId?this._c=function(e,t,n,r){var i=_t(u,e,t,n,r,f);return i&&!a(i)&&(i.fnScopeId=l._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return _t(u,e,t,n,r,f)}}function yn(e,t,n,r,a){var o=ye(e);return o.fnContext=n,o.fnOptions=r,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function gn(e,t){for(var n in t)e[C(n)]=t[n]}function mn(e){return e.name||e.__name||e._componentTag}lt(hn.prototype);var vn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;vn.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Wt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,a,o){var i=a.data.scopedSlots,s=e.$scopedSlots,u=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&e.$scopedSlots.$key!==i.$key||!i&&e.$scopedSlots.$key),c=!!(o||e.$options._renderChildren||u),l=e.$vnode;e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a),e.$options._renderChildren=o;var d=a.data.attrs||r;e._attrsProxy&&vt(e._attrsProxy,d,l.data&&l.data.attrs||r,e,"$attrs")&&(c=!0),e.$attrs=d,n=n||r;var f=e.$options._parentListeners;if(e._listenersProxy&&vt(e._listenersProxy,n,f||r,e,"$listeners"),e.$listeners=e.$options._parentListeners=n,Gt(e,n,f),t&&e.$options.props){Pe(!1);for(var p=e._props,h=e.$options._propKeys||[],y=0;y<h.length;y++){var g=h[y],m=e.$options.props;p[g]=On(g,m,t,e)}Pe(!0),e.$options.propsData=t}c&&(e.$slots=dt(o,a.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Yt(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,tn.push(t)):Xt(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(!(n&&(t._directInactive=!0,Jt(t))||t._inactive)){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);Yt(t,"deactivated")}}(t,!0):t.$destroy())}},bn=Object.keys(vn);function qn(e,t,n,u,c){if(!o(e)){var d=n.$options._base;if(l(e)&&(e=d.extend(e)),"function"==typeof e){var f;if(o(e.cid)&&void 0===(e=function(e,t){if(s(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var n=wt;if(n&&i(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),s(e.loading)&&i(e.loadingComp))return e.loadingComp;if(n&&!i(e.owners)){var r=e.owners=[n],a=!0,u=null,c=null;n.$on("hook:destroyed",(function(){return q(r,n)}));var d=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==u&&(clearTimeout(u),u=null),null!==c&&(clearTimeout(c),c=null))},f=M((function(n){e.resolved=kt(n,t),a?r.length=0:d(!0)})),p=M((function(t){i(e.errorComp)&&(e.error=!0,d(!0))})),h=e(f,p);return l(h)&&(y(h)?o(e.resolved)&&h.then(f,p):y(h.component)&&(h.component.then(f,p),i(h.error)&&(e.errorComp=kt(h.error,t)),i(h.loading)&&(e.loadingComp=kt(h.loading,t),0===h.delay?e.loading=!0:u=setTimeout((function(){u=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),h.delay||200)),i(h.timeout)&&(c=setTimeout((function(){c=null,o(e.resolved)&&p(null)}),h.timeout)))),a=!1,e.loading?e.loadingComp:e.resolved}}(f=e,d)))return function(e,t,n,r,a){var o=pe();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:r,tag:a},o}(f,t,n,u,c);t=t||{},Un(e),i(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),s=o[r],u=t.model.callback;i(s)?(a(s)?-1===s.indexOf(u):s!==u)&&(o[r]=[u].concat(s)):o[r]=u}(e.options,t);var p=function(e,t,n){var r=t.options.props;if(!o(r)){var a={},s=e.attrs,u=e.props;if(i(s)||i(u))for(var c in r){var l=T(c);Ve(a,u,c,l,!0)||Ve(a,s,c,l,!1)}return a}}(t,e);if(s(e.options.functional))return function(e,t,n,o,s){var u=e.options,c={},l=u.props;if(i(l))for(var d in l)c[d]=On(d,l,t||r);else i(n.attrs)&&gn(c,n.attrs),i(n.props)&&gn(c,n.props);var f=new hn(n,c,s,o,e),p=u.render.call(null,f._c,f);if(p instanceof fe)return yn(p,n,f.parent,u,f);if(a(p)){for(var h=Ge(p)||[],y=new Array(h.length),g=0;g<h.length;g++)y[g]=yn(h[g],n,f.parent,u,f);return y}}(e,p,t,n,u);var h=t.on;if(t.on=t.nativeOn,s(e.options.abstract)){var g=t.slot;t={},g&&(t.slot=g)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<bn.length;n++){var r=bn[n],a=t[r],o=vn[r];a===o||a&&a._merged||(t[r]=a?wn(o,a):o)}}(t);var m=mn(e.options)||c;return new fe("vue-component-".concat(e.cid).concat(m?"-".concat(m):""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:h,tag:c,children:u},f)}}}function wn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}var kn=j,xn=N.optionMergeStrategies;function _n(e,t,n){if(void 0===n&&(n=!0),!t)return e;for(var r,a,o,i=ce?Reflect.ownKeys(t):Object.keys(t),s=0;s<i.length;s++)"__ob__"!==(r=i[s])&&(a=e[r],o=t[r],n&&k(e,r)?a!==o&&f(a)&&f(o)&&_n(a,o):Ae(e,r,o));return e}function Cn(e,t,n){return n?function(){var r=c(t)?t.call(n,n):t,a=c(e)?e.call(n,n):e;return r?_n(r,a):a}:t?e?function(){return _n(c(t)?t.call(this,this):t,c(e)?e.call(this,this):e)}:t:e}function En(e,t){var n=t?e?e.concat(t):a(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Pn(e,t,n,r){var a=Object.create(e||null);return t?O(a,t):a}xn.data=function(e,t,n){return n?Cn(e,t,n):t&&"function"!=typeof t?e:Cn(e,t)},R.forEach((function(e){xn[e]=En})),z.forEach((function(e){xn[e+"s"]=Pn})),xn.watch=function(e,t,n,r){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var o={};for(var i in O(o,e),t){var s=o[i],u=t[i];s&&!a(s)&&(s=[s]),o[i]=s?s.concat(u):a(u)?u:[u]}return o},xn.props=xn.methods=xn.inject=xn.computed=function(e,t,n,r){if(!e)return t;var a=Object.create(null);return O(a,e),t&&O(a,t),a},xn.provide=function(e,t){return e?function(){var n=Object.create(null);return _n(n,c(e)?e.call(this):e),t&&_n(n,c(t)?t.call(this):t,!1),n}:t};var Tn=function(e,t){return void 0===t?e:t};function Qn(e,t,n){if(c(t)&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,i={};if(a(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[C(o)]={type:null});else if(f(n))for(var s in n)o=n[s],i[C(s)]=f(o)?o:{type:o};else 0;e.props=i}}(t),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(a(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var s=n[i];r[i]=f(s)?O({from:i},s):{from:s}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];c(r)&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Qn(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Qn(e,t.mixins[r],n);var i,s={};for(i in e)u(i);for(i in t)k(e,i)||u(i);function u(r){var a=xn[r]||Tn;s[r]=a(e[r],t[r],n,r)}return s}function Sn(e,t,n,r){if("string"==typeof n){var a=e[t];if(k(a,n))return a[n];var o=C(n);if(k(a,o))return a[o];var i=E(o);return k(a,i)?a[i]:a[n]||a[o]||a[i]}}function On(e,t,n,r){var a=t[e],o=!k(n,e),i=n[e],s=Dn(Boolean,a.type);if(s>-1)if(o&&!k(a,"default"))i=!1;else if(""===i||i===T(e)){var u=Dn(String,a.type);(u<0||s<u)&&(i=!0)}if(void 0===i){i=function(e,t,n){if(!k(t,"default"))return;var r=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return c(r)&&"Function"!==jn(t.type)?r.call(e):r}(r,a,e);var l=Ee;Pe(!0),Se(i),Pe(l)}return i}var An=/^\s*function (\w+)/;function jn(e){var t=e&&e.toString().match(An);return t?t[1]:""}function In(e,t){return jn(e)===jn(t)}function Dn(e,t){if(!a(t))return In(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(In(t[n],e))return n;return-1}var $n={enumerable:!0,configurable:!0,get:j,set:j};function Fn(e,t,n){$n.get=function(){return this[t][n]},$n.set=function(e){this[t][n]=e},Object.defineProperty(e,n,$n)}function Mn(e){var t=e.$options;if(t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props=De({}),a=e.$options._propKeys=[];e.$parent&&Pe(!1);var o=function(o){a.push(o);var i=On(o,t,n,e);Oe(r,o,i),o in e||Fn(e,"_props",o)};for(var i in t)o(i);Pe(!0)}(e,t.props),function(e){var t=e.$options,n=t.setup;if(n){var r=e._setupContext=mt(e);de(e),qe();var a=Et(n,null,[e._props||De({}),r],e,"setup");if(we(),de(),c(a))t.render=a;else if(l(a))if(e._setupState=a,a.__sfc){var o=e._setupProxy={};for(var i in a)"__sfc"!==i&&Le(o,a,i)}else for(var i in a)K(i)||Le(e,a,i);else 0}}(e),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?j:Q(t[n],e)}(e,t.methods),t.data)!function(e){var t=e.$options.data;f(t=e._data=c(t)?function(e,t){qe();try{return e.call(t,t)}catch(e){return Ct(e,t,"data()"),{}}finally{we()}}(t,e):t||{})||(t={});var n=Object.keys(t),r=e.$options.props,a=(e.$options.methods,n.length);for(;a--;){var o=n[a];0,r&&k(r,o)||K(o)||Fn(e,"_data",o)}var i=Se(t);i&&i.vmCount++}(e);else{var n=Se(e._data={});n&&n.vmCount++}t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=oe();for(var a in t){var o=t[a],i=c(o)?o:o.get;0,r||(n[a]=new Kt(e,i||j,j,Ln)),a in e||zn(e,a,o)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var r=t[n];if(a(r))for(var o=0;o<r.length;o++)Bn(e,n,r[o]);else Bn(e,n,r)}}(e,t.watch)}var Ln={lazy:!0};function zn(e,t,n){var r=!oe();c(n)?($n.get=r?Rn(t):Nn(n),$n.set=j):($n.get=n.get?r&&!1!==n.cache?Rn(t):Nn(n.get):j,$n.set=n.set||j),Object.defineProperty(e,t,$n)}function Rn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ve.target&&t.depend(),t.value}}function Nn(e){return function(){return e.call(this,this)}}function Bn(e,t,n,r){return f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var Kn=0;function Un(e){var t=e.options;if(e.super){var n=Un(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var a in n)n[a]!==r[a]&&(t||(t={}),t[a]=n[a]);return t}(e);r&&O(e.extendOptions,r),(t=e.options=Qn(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Hn(e){this._init(e)}function Vn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,a=e._Ctor||(e._Ctor={});if(a[r])return a[r];var o=mn(e)||mn(n.options);var i=function(e){this._init(e)};return(i.prototype=Object.create(n.prototype)).constructor=i,i.cid=t++,i.options=Qn(n.options,e),i.super=n,i.options.props&&function(e){var t=e.options.props;for(var n in t)Fn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)zn(e.prototype,n,t[n])}(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,z.forEach((function(e){i[e]=n[e]})),o&&(i.options.components[o]=i),i.superOptions=n.options,i.extendOptions=e,i.sealedOptions=O({},i.options),a[r]=i,i}}function Gn(e){return e&&(mn(e.Ctor.options)||e.tag)}function Wn(e,t){return a(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function Zn(e,t){var n=e.cache,r=e.keys,a=e._vnode;for(var o in n){var i=n[o];if(i){var s=i.name;s&&!t(s)&&Jn(n,o,r,a)}}}function Jn(e,t,n,r){var a=e[t];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),e[t]=null,q(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=Kn++,t._isVue=!0,t.__v_skip=!0,t._scope=new Re(!0),t._scope._vm=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var a=r.componentOptions;n.propsData=a.propsData,n._parentListeners=a.listeners,n._renderChildren=a.children,n._componentTag=a.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Qn(Un(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._provided=n?n._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Gt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,a=n&&n.context;e.$slots=dt(t._renderChildren,a),e.$scopedSlots=n?ht(e.$parent,n.data.scopedSlots,e.$slots):r,e._c=function(t,n,r,a){return _t(e,t,n,r,a,!1)},e.$createElement=function(t,n,r,a){return _t(e,t,n,r,a,!0)};var o=n&&n.data;Oe(e,"$attrs",o&&o.attrs||r,null,!0),Oe(e,"$listeners",t._parentListeners||r,null,!0)}(t),Yt(t,"beforeCreate",void 0,!1),function(e){var t=pn(e.$options.inject,e);t&&(Pe(!1),Object.keys(t).forEach((function(n){Oe(e,n,t[n])})),Pe(!0))}(t),Mn(t),function(e){var t=e.$options.provide;if(t){var n=c(t)?t.call(e):t;if(!l(n))return;for(var r=Ne(e),a=ce?Reflect.ownKeys(n):Object.keys(n),o=0;o<a.length;o++){var i=a[o];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(n,i))}}}(t),Yt(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Hn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ae,e.prototype.$delete=je,e.prototype.$watch=function(e,t,n){if(f(t))return Bn(this,e,t,n);(n=n||{}).user=!0;var r=new Kt(this,e,t,n);if(n.immediate){var a='callback for immediate watcher "'.concat(r.expression,'"');qe(),Et(t,this,[r.value],this,a),we()}return function(){r.teardown()}}}(Hn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(a(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(a(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,s=n._events[e];if(!s)return n;if(!t)return n._events[e]=null,n;for(var u=s.length;u--;)if((i=s[u])===t||i.fn===t){s.splice(u,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?S(n):n;for(var r=S(arguments,1),a='event handler for "'.concat(e,'"'),o=0,i=n.length;o<i;o++)Et(n[o],t,r,t,a)}return t}}(Hn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,a=n._vnode,o=Zt(n);n._vnode=e,n.$el=a?n.__patch__(a,e):n.__patch__(n.$el,e,t,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n);for(var i=n;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Yt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||q(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Yt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Hn),function(e){lt(e.prototype),e.prototype.$nextTick=function(e){return Mt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&t._isMounted&&(t.$scopedSlots=ht(t.$parent,o.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&qt(t._slotsProxy,t.$scopedSlots)),t.$vnode=o;try{de(t),wt=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){Ct(n,t,"render"),e=t._vnode}finally{wt=null,de()}return a(e)&&1===e.length&&(e=e[0]),e instanceof fe||(e=pe()),e.parent=o,e}}(Hn);var Xn=[String,RegExp,Array],Yn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Xn,exclude:Xn,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,t=this.keys,n=this.vnodeToCache,r=this.keyToCache;if(n){var a=n.tag,o=n.componentInstance,i=n.componentOptions;e[r]={name:Gn(i),tag:a,componentInstance:o},t.push(r),this.max&&t.length>parseInt(this.max)&&Jn(e,t[0],t,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Jn(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Zn(e,(function(e){return Wn(t,e)}))})),this.$watch("exclude",(function(t){Zn(e,(function(e){return!Wn(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=xt(e),n=t&&t.componentOptions;if(n){var r=Gn(n),a=this.include,o=this.exclude;if(a&&(!r||!Wn(a,r))||o&&r&&Wn(o,r))return t;var i=this.cache,s=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::".concat(n.tag):""):t.key;i[u]?(t.componentInstance=i[u].componentInstance,q(s,u),s.push(u)):(this.vnodeToCache=t,this.keyToCache=u),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return N}};Object.defineProperty(e,"config",t),e.util={warn:kn,extend:O,mergeOptions:Qn,defineReactive:Oe},e.set=Ae,e.delete=je,e.nextTick=Mt,e.observable=function(e){return Se(e),e},e.options=Object.create(null),z.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,O(e.options.components,Yn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=S(arguments,1);return n.unshift(this),c(e.install)?e.install.apply(e,n):c(e)&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Qn(this.options,e),this}}(e),Vn(e),function(e){z.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&c(n)&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Hn),Object.defineProperty(Hn.prototype,"$isServer",{get:oe}),Object.defineProperty(Hn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Hn,"FunctionalRenderContext",{value:hn}),Hn.version="2.7.14";var er=v("style,class"),tr=v("input,textarea,option,select,progress"),nr=v("contenteditable,draggable,spellcheck"),rr=v("events,caret,typing,plaintext-only"),ar=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),or="http://www.w3.org/1999/xlink",ir=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},sr=function(e){return ir(e)?e.slice(6,e.length):""},ur=function(e){return null==e||!1===e};function cr(e){for(var t=e.data,n=e,r=e;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=lr(r.data,t));for(;i(n=n.parent);)n&&n.data&&(t=lr(t,n.data));return function(e,t){if(i(e)||i(t))return dr(e,fr(t));return""}(t.staticClass,t.class)}function lr(e,t){return{staticClass:dr(e.staticClass,t.staticClass),class:i(e.class)?[e.class,t.class]:t.class}}function dr(e,t){return e?t?e+" "+t:e:t||""}function fr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,a=e.length;r<a;r++)i(t=fr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var pr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),yr=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),gr=function(e){return hr(e)||yr(e)};var mr=Object.create(null);var vr=v("text,number,password,search,email,tel,url");var br=Object.freeze({__proto__:null,createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(pr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),qr={create:function(e,t){wr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(wr(e,!0),wr(t))},destroy:function(e){wr(e,!0)}};function wr(e,t){var n=e.data.ref;if(i(n)){var r=e.context,o=e.componentInstance||e.elm,s=t?null:o,u=t?void 0:o;if(c(n))Et(n,r,[s],r,"template ref function");else{var l=e.data.refInFor,d="string"==typeof n||"number"==typeof n,f=Me(n),p=r.$refs;if(d||f)if(l){var h=d?p[n]:n.value;t?a(h)&&q(h,o):a(h)?h.includes(o)||h.push(o):d?(p[n]=[o],kr(r,n,p[n])):n.value=[o]}else if(d){if(t&&p[n]!==o)return;p[n]=u,kr(r,n,s)}else if(f){if(t&&n.value!==o)return;n.value=s}else 0}}}function kr(e,t,n){var r=e._setupState;r&&k(r,t)&&(Me(r[t])?r[t].value=n:r[t]=n)}var xr=new fe("",{},[]),_r=["create","activate","update","remove","destroy"];function Cr(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&i(e.data)===i(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=i(n=e.data)&&i(n=n.attrs)&&n.type,a=i(n=t.data)&&i(n=n.attrs)&&n.type;return r===a||vr(r)&&vr(a)}(e,t)||s(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function Er(e,t,n){var r,a,o={};for(r=t;r<=n;++r)i(a=e[r].key)&&(o[a]=r);return o}var Pr={create:Tr,update:Tr,destroy:function(e){Tr(e,xr)}};function Tr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,a,o=e===xr,i=t===xr,s=Sr(e.data.directives,e.context),u=Sr(t.data.directives,t.context),c=[],l=[];for(n in u)r=s[n],a=u[n],r?(a.oldValue=r.value,a.oldArg=r.arg,Ar(a,"update",t,e),a.def&&a.def.componentUpdated&&l.push(a)):(Ar(a,"bind",t,e),a.def&&a.def.inserted&&c.push(a));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Ar(c[n],"inserted",t,e)};o?He(t,"insert",d):d()}l.length&&He(t,"postpatch",(function(){for(var n=0;n<l.length;n++)Ar(l[n],"componentUpdated",t,e)}));if(!o)for(n in s)u[n]||Ar(s[n],"unbind",e,e,i)}(e,t)}var Qr=Object.create(null);function Sr(e,t){var n,r,a=Object.create(null);if(!e)return a;for(n=0;n<e.length;n++){if((r=e[n]).modifiers||(r.modifiers=Qr),a[Or(r)]=r,t._setupState&&t._setupState.__sfc){var o=r.def||Sn(t,"_setupState","v-"+r.name);r.def="function"==typeof o?{bind:o,update:o}:o}r.def=r.def||Sn(t.$options,"directives",r.name)}return a}function Or(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Ar(e,t,n,r,a){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,r,a)}catch(r){Ct(r,n.context,"directive ".concat(e.name," ").concat(t," hook"))}}var jr=[qr,Pr];function Ir(e,t){var n=t.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var r,a,u=t.elm,c=e.data.attrs||{},l=t.data.attrs||{};for(r in(i(l.__ob__)||s(l._v_attr_proxy))&&(l=t.data.attrs=O({},l)),l)a=l[r],c[r]!==a&&Dr(u,r,a,t.data.pre);for(r in(Z||X)&&l.value!==c.value&&Dr(u,"value",l.value),c)o(l[r])&&(ir(r)?u.removeAttributeNS(or,sr(r)):nr(r)||u.removeAttribute(r))}}function Dr(e,t,n,r){r||e.tagName.indexOf("-")>-1?$r(e,t,n):ar(t)?ur(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):nr(t)?e.setAttribute(t,function(e,t){return ur(t)||"false"===t?"false":"contenteditable"===e&&rr(t)?t:"true"}(t,n)):ir(t)?ur(n)?e.removeAttributeNS(or,sr(t)):e.setAttributeNS(or,t,n):$r(e,t,n)}function $r(e,t,n){if(ur(n))e.removeAttribute(t);else{if(Z&&!J&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var Fr={create:Ir,update:Ir};function Mr(e,t){var n=t.elm,r=t.data,a=e.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=cr(t),u=n._transitionClasses;i(u)&&(s=dr(s,fr(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Lr,zr={create:Mr,update:Mr};function Rr(e,t,n){var r=Lr;return function a(){var o=t.apply(null,arguments);null!==o&&Kr(e,a,n,r)}}var Nr=St&&!(te&&Number(te[1])<=53);function Br(e,t,n,r){if(Nr){var a=sn,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=a||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}Lr.addEventListener(e,t,re?{capture:n,passive:r}:n)}function Kr(e,t,n,r){(r||Lr).removeEventListener(e,t._wrapper||t,n)}function Ur(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Lr=t.elm||e.elm,function(e){if(i(e.__r)){var t=Z?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}i(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Ue(n,r,Br,Kr,Rr,t.context),Lr=void 0}}var Hr,Vr={create:Ur,update:Ur,destroy:function(e){return Ur(e,xr)}};function Gr(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,r,a=t.elm,u=e.data.domProps||{},c=t.data.domProps||{};for(n in(i(c.__ob__)||s(c._v_attr_proxy))&&(c=t.data.domProps=O({},c)),u)n in c||(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===u[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=r;var l=o(r)?"":String(r);Wr(a,l)&&(a.value=l)}else if("innerHTML"===n&&yr(a.tagName)&&o(a.innerHTML)){(Hr=Hr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var d=Hr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;d.firstChild;)a.appendChild(d.firstChild)}else if(r!==u[n])try{a[n]=r}catch(e){}}}}function Wr(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(i(r)){if(r.number)return m(n)!==m(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Zr={create:Gr,update:Gr},Jr=x((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function Xr(e){var t=Yr(e.style);return e.staticStyle?O(e.staticStyle,t):t}function Yr(e){return Array.isArray(e)?A(e):"string"==typeof e?Jr(e):e}var ea,ta=/^--/,na=/\s*!important$/,ra=function(e,t,n){if(ta.test(t))e.style.setProperty(t,n);else if(na.test(n))e.style.setProperty(T(t),n.replace(na,""),"important");else{var r=oa(t);if(Array.isArray(n))for(var a=0,o=n.length;a<o;a++)e.style[r]=n[a];else e.style[r]=n}},aa=["Webkit","Moz","ms"],oa=x((function(e){if(ea=ea||document.createElement("div").style,"filter"!==(e=C(e))&&e in ea)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<aa.length;n++){var r=aa[n]+t;if(r in ea)return r}}));function ia(e,t){var n=t.data,r=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,s,u=t.elm,c=r.staticStyle,l=r.normalizedStyle||r.style||{},d=c||l,f=Yr(t.data.style)||{};t.data.normalizedStyle=i(f.__ob__)?O({},f):f;var p=function(e,t){var n,r={};if(t)for(var a=e;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(n=Xr(a.data))&&O(r,n);(n=Xr(e.data))&&O(r,n);for(var o=e;o=o.parent;)o.data&&(n=Xr(o.data))&&O(r,n);return r}(t,!0);for(s in d)o(p[s])&&ra(u,s,"");for(s in p)(a=p[s])!==d[s]&&ra(u,s,null==a?"":a)}}var sa={create:ia,update:ia},ua=/\s+/;function ca(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(ua).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" ".concat(e.getAttribute("class")||""," ");n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function la(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(ua).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" ".concat(e.getAttribute("class")||""," "),r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function da(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&O(t,fa(e.name||"v")),O(t,e),t}return"string"==typeof e?fa(e):void 0}}var fa=x((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),pa=G&&!J,ha="transition",ya="transitionend",ga="animation",ma="animationend";pa&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ha="WebkitTransition",ya="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ga="WebkitAnimation",ma="webkitAnimationEnd"));var va=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function ba(e){va((function(){va(e)}))}function qa(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),ca(e,t))}function wa(e,t){e._transitionClasses&&q(e._transitionClasses,t),la(e,t)}function ka(e,t,n){var r=_a(e,t),a=r.type,o=r.timeout,i=r.propCount;if(!a)return n();var s="transition"===a?ya:ma,u=0,c=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++u>=i&&c()};setTimeout((function(){u<i&&c()}),o+1),e.addEventListener(s,l)}var xa=/\b(transform|all)(,|$)/;function _a(e,t){var n,r=window.getComputedStyle(e),a=(r[ha+"Delay"]||"").split(", "),o=(r[ha+"Duration"]||"").split(", "),i=Ca(a,o),s=(r[ga+"Delay"]||"").split(", "),u=(r[ga+"Duration"]||"").split(", "),c=Ca(s,u),l=0,d=0;return"transition"===t?i>0&&(n="transition",l=i,d=o.length):"animation"===t?c>0&&(n="animation",l=c,d=u.length):d=(n=(l=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===n?o.length:u.length:0,{type:n,timeout:l,propCount:d,hasTransform:"transition"===n&&xa.test(r[ha+"Property"])}}function Ca(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Ea(t)+Ea(e[n])})))}function Ea(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Pa(e,t){var n=e.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=da(e.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,u=r.enterClass,d=r.enterToClass,f=r.enterActiveClass,p=r.appearClass,h=r.appearToClass,y=r.appearActiveClass,g=r.beforeEnter,v=r.enter,b=r.afterEnter,q=r.enterCancelled,w=r.beforeAppear,k=r.appear,x=r.afterAppear,_=r.appearCancelled,C=r.duration,E=Wt,P=Wt.$vnode;P&&P.parent;)E=P.context,P=P.parent;var T=!E._isMounted||!e.isRootInsert;if(!T||k||""===k){var Q=T&&p?p:u,S=T&&y?y:f,O=T&&h?h:d,A=T&&w||g,j=T&&c(k)?k:v,I=T&&x||b,D=T&&_||q,$=m(l(C)?C.enter:C);0;var F=!1!==a&&!J,L=Sa(j),z=n._enterCb=M((function(){F&&(wa(n,O),wa(n,S)),z.cancelled?(F&&wa(n,Q),D&&D(n)):I&&I(n),n._enterCb=null}));e.data.show||He(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),j&&j(n,z)})),A&&A(n),F&&(qa(n,Q),qa(n,S),ba((function(){wa(n,Q),z.cancelled||(qa(n,O),L||(Qa($)?setTimeout(z,$):ka(n,s,z)))}))),e.data.show&&(t&&t(),j&&j(n,z)),F||L||z()}}}function Ta(e,t){var n=e.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=da(e.data.transition);if(o(r)||1!==n.nodeType)return t();if(!i(n._leaveCb)){var a=r.css,s=r.type,u=r.leaveClass,c=r.leaveToClass,d=r.leaveActiveClass,f=r.beforeLeave,p=r.leave,h=r.afterLeave,y=r.leaveCancelled,g=r.delayLeave,v=r.duration,b=!1!==a&&!J,q=Sa(p),w=m(l(v)?v.leave:v);0;var k=n._leaveCb=M((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),b&&(wa(n,c),wa(n,d)),k.cancelled?(b&&wa(n,u),y&&y(n)):(t(),h&&h(n)),n._leaveCb=null}));g?g(x):x()}function x(){k.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),f&&f(n),b&&(qa(n,u),qa(n,d),ba((function(){wa(n,u),k.cancelled||(qa(n,c),q||(Qa(w)?setTimeout(k,w):ka(n,s,k)))}))),p&&p(n,k),b||q||k())}}function Qa(e){return"number"==typeof e&&!isNaN(e)}function Sa(e){if(o(e))return!1;var t=e.fns;return i(t)?Sa(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Oa(e,t){!0!==t.data.show&&Pa(t)}var Aa=function(e){var t,n,r={},c=e.modules,l=e.nodeOps;for(t=0;t<_r.length;++t)for(r[_r[t]]=[],n=0;n<c.length;++n)i(c[n][_r[t]])&&r[_r[t]].push(c[n][_r[t]]);function d(e){var t=l.parentNode(e);i(t)&&l.removeChild(t,e)}function f(e,t,n,a,o,u,c){if(i(e.elm)&&i(u)&&(e=u[c]=ye(e)),e.isRootInsert=!o,!function(e,t,n,a){var o=e.data;if(i(o)){var u=i(e.componentInstance)&&o.keepAlive;if(i(o=o.hook)&&i(o=o.init)&&o(e,!1),i(e.componentInstance))return p(e,t),h(n,e.elm,a),s(u)&&function(e,t,n,a){var o,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(o=s.data)&&i(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](xr,s);t.push(s);break}h(n,e.elm,a)}(e,t,n,a),!0}}(e,t,n,a)){var d=e.data,f=e.children,g=e.tag;i(g)?(e.elm=e.ns?l.createElementNS(e.ns,g):l.createElement(g,e),b(e),y(e,f,t),i(d)&&m(e,t),h(n,e.elm,a)):s(e.isComment)?(e.elm=l.createComment(e.text),h(n,e.elm,a)):(e.elm=l.createTextNode(e.text),h(n,e.elm,a))}}function p(e,t){i(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(m(e,t),b(e)):(wr(e),t.push(e))}function h(e,t,n){i(e)&&(i(n)?l.parentNode(n)===e&&l.insertBefore(e,t,n):l.appendChild(e,t))}function y(e,t,n){if(a(t)){0;for(var r=0;r<t.length;++r)f(t[r],n,e.elm,null,!0,t,r)}else u(e.text)&&l.appendChild(e.elm,l.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function m(e,n){for(var a=0;a<r.create.length;++a)r.create[a](xr,e);i(t=e.data.hook)&&(i(t.create)&&t.create(xr,e),i(t.insert)&&n.push(e))}function b(e){var t;if(i(t=e.fnScopeId))l.setStyleScope(e.elm,t);else for(var n=e;n;)i(t=n.context)&&i(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t),n=n.parent;i(t=Wt)&&t!==e.context&&t!==e.fnContext&&i(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t)}function q(e,t,n,r,a,o){for(;r<=a;++r)f(n[r],o,e,t,!1,n,r)}function w(e){var t,n,a=e.data;if(i(a))for(i(t=a.hook)&&i(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(i(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function k(e,t,n){for(;t<=n;++t){var r=e[t];i(r)&&(i(r.tag)?(x(r),w(r)):d(r.elm))}}function x(e,t){if(i(t)||i(e.data)){var n,a=r.remove.length+1;for(i(t)?t.listeners+=a:t=function(e,t){function n(){0==--n.listeners&&d(e)}return n.listeners=t,n}(e.elm,a),i(n=e.componentInstance)&&i(n=n._vnode)&&i(n.data)&&x(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);i(n=e.data.hook)&&i(n=n.remove)?n(e,t):t()}else d(e.elm)}function _(e,t,n,r){for(var a=n;a<r;a++){var o=t[a];if(i(o)&&Cr(e,o))return a}}function C(e,t,n,a,u,c){if(e!==t){i(t.elm)&&i(a)&&(t=a[u]=ye(t));var d=t.elm=e.elm;if(s(e.isAsyncPlaceholder))i(t.asyncFactory.resolved)?T(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,h=t.data;i(h)&&i(p=h.hook)&&i(p=p.prepatch)&&p(e,t);var y=e.children,m=t.children;if(i(h)&&g(t)){for(p=0;p<r.update.length;++p)r.update[p](e,t);i(p=h.hook)&&i(p=p.update)&&p(e,t)}o(t.text)?i(y)&&i(m)?y!==m&&function(e,t,n,r,a){var s,u,c,d=0,p=0,h=t.length-1,y=t[0],g=t[h],m=n.length-1,v=n[0],b=n[m],w=!a;for(0;d<=h&&p<=m;)o(y)?y=t[++d]:o(g)?g=t[--h]:Cr(y,v)?(C(y,v,r,n,p),y=t[++d],v=n[++p]):Cr(g,b)?(C(g,b,r,n,m),g=t[--h],b=n[--m]):Cr(y,b)?(C(y,b,r,n,m),w&&l.insertBefore(e,y.elm,l.nextSibling(g.elm)),y=t[++d],b=n[--m]):Cr(g,v)?(C(g,v,r,n,p),w&&l.insertBefore(e,g.elm,y.elm),g=t[--h],v=n[++p]):(o(s)&&(s=Er(t,d,h)),o(u=i(v.key)?s[v.key]:_(v,t,d,h))?f(v,r,e,y.elm,!1,n,p):Cr(c=t[u],v)?(C(c,v,r,n,p),t[u]=void 0,w&&l.insertBefore(e,c.elm,y.elm)):f(v,r,e,y.elm,!1,n,p),v=n[++p]);d>h?q(e,o(n[m+1])?null:n[m+1].elm,n,p,m,r):p>m&&k(t,d,h)}(d,y,m,n,c):i(m)?(i(e.text)&&l.setTextContent(d,""),q(d,null,m,0,m.length-1,n)):i(y)?k(y,0,y.length-1):i(e.text)&&l.setTextContent(d,""):e.text!==t.text&&l.setTextContent(d,t.text),i(h)&&i(p=h.hook)&&i(p=p.postpatch)&&p(e,t)}}}function E(e,t,n){if(s(n)&&i(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var P=v("attrs,class,staticClass,staticStyle,key");function T(e,t,n,r){var a,o=t.tag,u=t.data,c=t.children;if(r=r||u&&u.pre,t.elm=e,s(t.isComment)&&i(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(i(u)&&(i(a=u.hook)&&i(a=a.init)&&a(t,!0),i(a=t.componentInstance)))return p(t,n),!0;if(i(o)){if(i(c))if(e.hasChildNodes())if(i(a=u)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==e.innerHTML)return!1}else{for(var l=!0,d=e.firstChild,f=0;f<c.length;f++){if(!d||!T(d,c[f],n,r)){l=!1;break}d=d.nextSibling}if(!l||d)return!1}else y(t,c,n);if(i(u)){var h=!1;for(var g in u)if(!P(g)){h=!0,m(t,n);break}!h&&u.class&&Rt(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,a){if(!o(t)){var u,c=!1,d=[];if(o(e))c=!0,f(t,d);else{var p=i(e.nodeType);if(!p&&Cr(e,t))C(e,t,d,null,null,a);else{if(p){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),s(n)&&T(e,t,d))return E(t,d,!0),e;u=e,e=new fe(l.tagName(u).toLowerCase(),{},[],void 0,u)}var h=e.elm,y=l.parentNode(h);if(f(t,d,h._leaveCb?null:y,l.nextSibling(h)),i(t.parent))for(var m=t.parent,v=g(t);m;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](m);if(m.elm=t.elm,v){for(var q=0;q<r.create.length;++q)r.create[q](xr,m);var x=m.data.hook.insert;if(x.merged)for(var _=1;_<x.fns.length;_++)x.fns[_]()}else wr(m);m=m.parent}i(y)?k([e],0,0):i(e.tag)&&w(e)}}return E(t,d,c),t.elm}i(e)&&w(e)}}({nodeOps:br,modules:[Fr,zr,Vr,Zr,sa,G?{create:Oa,activate:Oa,remove:function(e,t){!0!==e.data.show?Ta(e,t):t()}}:{}].concat(jr)});J&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&za(e,"input")}));var ja={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?He(n,"postpatch",(function(){ja.componentUpdated(e,t,n)})):Ia(e,t,n.context),e._vOptions=[].map.call(e.options,Fa)):("textarea"===n.tag||vr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Ma),e.addEventListener("compositionend",La),e.addEventListener("change",La),J&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Ia(e,t,n.context);var r=e._vOptions,a=e._vOptions=[].map.call(e.options,Fa);if(a.some((function(e,t){return!$(e,r[t])})))(e.multiple?t.value.some((function(e){return $a(e,a)})):t.value!==t.oldValue&&$a(t.value,a))&&za(e,"change")}}};function Ia(e,t,n){Da(e,t,n),(Z||X)&&setTimeout((function(){Da(e,t,n)}),0)}function Da(e,t,n){var r=t.value,a=e.multiple;if(!a||Array.isArray(r)){for(var o,i,s=0,u=e.options.length;s<u;s++)if(i=e.options[s],a)o=F(r,Fa(i))>-1,i.selected!==o&&(i.selected=o);else if($(Fa(i),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));a||(e.selectedIndex=-1)}}function $a(e,t){return t.every((function(t){return!$(t,e)}))}function Fa(e){return"_value"in e?e._value:e.value}function Ma(e){e.target.composing=!0}function La(e){e.target.composing&&(e.target.composing=!1,za(e.target,"input"))}function za(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Ra(e){return!e.componentInstance||e.data&&e.data.transition?e:Ra(e.componentInstance._vnode)}var Na={model:ja,show:{bind:function(e,t,n){var r=t.value,a=(n=Ra(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&a?(n.data.show=!0,Pa(n,(function(){e.style.display=o}))):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Ra(n)).data&&n.data.transition?(n.data.show=!0,r?Pa(n,(function(){e.style.display=e.__vOriginalDisplay})):Ta(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,a){a||(e.style.display=e.__vOriginalDisplay)}}},Ba={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ka(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Ka(xt(t.children)):e}function Ua(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var a=n._parentListeners;for(var r in a)t[C(r)]=a[r];return t}function Ha(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Va=function(e){return e.tag||pt(e)},Ga=function(e){return"show"===e.name},Wa={name:"transition",props:Ba,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Va)).length){0;var r=this.mode;0;var a=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return a;var o=Ka(a);if(!o)return a;if(this._leaving)return Ha(e,a);var i="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?i+"comment":i+o.tag:u(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=Ua(this),c=this._vnode,l=Ka(c);if(o.data.directives&&o.data.directives.some(Ga)&&(o.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,l)&&!pt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var d=l.data.transition=O({},s);if("out-in"===r)return this._leaving=!0,He(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Ha(e,a);if("in-out"===r){if(pt(o))return c;var f,p=function(){f()};He(s,"afterEnter",p),He(s,"enterCancelled",p),He(d,"delayLeave",(function(e){f=e}))}}return a}}},Za=O({tag:String,moveClass:String},Ba);function Ja(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Xa(e){e.data.newPos=e.elm.getBoundingClientRect()}function Ya(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,a=t.top-n.top;if(r||a){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate(".concat(r,"px,").concat(a,"px)"),o.transitionDuration="0s"}}delete Za.mode;var eo={Transition:Wa,TransitionGroup:{props:Za,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var a=Zt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,a(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],i=Ua(this),s=0;s<a.length;s++){if((l=a[s]).tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),n[l.key]=l,(l.data||(l.data={})).transition=i;else;}if(r){var u=[],c=[];for(s=0;s<r.length;s++){var l;(l=r[s]).data.transition=i,l.data.pos=l.elm.getBoundingClientRect(),n[l.key]?u.push(l):c.push(l)}this.kept=e(t,null,u),this.removed=c}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ja),e.forEach(Xa),e.forEach(Ya),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;qa(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ya,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ya,e),n._moveCb=null,wa(n,t))})}})))},methods:{hasMove:function(e,t){if(!pa)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){la(n,e)})),ca(n,t),n.style.display="none",this.$el.appendChild(n);var r=_a(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};function to(e,t){for(var n in t)e[n]=t[n];return e}Hn.config.mustUseProp=function(e,t,n){return"value"===n&&tr(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Hn.config.isReservedTag=gr,Hn.config.isReservedAttr=er,Hn.config.getTagNamespace=function(e){return yr(e)?"svg":"math"===e?"math":void 0},Hn.config.isUnknownElement=function(e){if(!G)return!0;if(gr(e))return!1;if(e=e.toLowerCase(),null!=mr[e])return mr[e];var t=document.createElement(e);return e.indexOf("-")>-1?mr[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:mr[e]=/HTMLUnknownElement/.test(t.toString())},O(Hn.options.directives,Na),O(Hn.options.components,eo),Hn.prototype.__patch__=G?Aa:j,Hn.prototype.$mount=function(e,t){return function(e,t,n){var r;e.$el=t,e.$options.render||(e.$options.render=pe),Yt(e,"beforeMount"),r=function(){e._update(e._render(),n)},new Kt(e,r,j,{before:function(){e._isMounted&&!e._isDestroyed&&Yt(e,"beforeUpdate")}},!0),n=!1;var a=e._preWatchers;if(a)for(var o=0;o<a.length;o++)a[o].run();return null==e.$vnode&&(e._isMounted=!0,Yt(e,"mounted")),e}(this,e=e&&G?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}(e):void 0,t)},G&&setTimeout((function(){N.devtools&&ie&&ie.emit("init",Hn)}),0);var no=/[!'()*]/g,ro=function(e){return"%"+e.charCodeAt(0).toString(16)},ao=/%2C/g,oo=function(e){return encodeURIComponent(e).replace(no,ro).replace(ao,",")};function io(e){try{return decodeURIComponent(e)}catch(e){0}return e}var so=function(e){return null==e||"object"==typeof e?e:String(e)};function uo(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),r=io(n.shift()),a=n.length>0?io(n.join("=")):null;void 0===t[r]?t[r]=a:Array.isArray(t[r])?t[r].push(a):t[r]=[t[r],a]})),t):t}function co(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return oo(t);if(Array.isArray(n)){var r=[];return n.forEach((function(e){void 0!==e&&(null===e?r.push(oo(t)):r.push(oo(t)+"="+oo(e)))})),r.join("&")}return oo(t)+"="+oo(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var lo=/\/?$/;function fo(e,t,n,r){var a=r&&r.options.stringifyQuery,o=t.query||{};try{o=po(o)}catch(e){}var i={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:o,params:t.params||{},fullPath:go(t,a),matched:e?yo(e):[]};return n&&(i.redirectedFrom=go(n,a)),Object.freeze(i)}function po(e){if(Array.isArray(e))return e.map(po);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=po(e[n]);return t}return e}var ho=fo(null,{path:"/"});function yo(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function go(e,t){var n=e.path,r=e.query;void 0===r&&(r={});var a=e.hash;return void 0===a&&(a=""),(n||"/")+(t||co)(r)+a}function mo(e,t,n){return t===ho?e===t:!!t&&(e.path&&t.path?e.path.replace(lo,"")===t.path.replace(lo,"")&&(n||e.hash===t.hash&&vo(e.query,t.query)):!(!e.name||!t.name)&&(e.name===t.name&&(n||e.hash===t.hash&&vo(e.query,t.query)&&vo(e.params,t.params))))}function vo(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),r=Object.keys(t).sort();return n.length===r.length&&n.every((function(n,a){var o=e[n];if(r[a]!==n)return!1;var i=t[n];return null==o||null==i?o===i:"object"==typeof o&&"object"==typeof i?vo(o,i):String(o)===String(i)}))}function bo(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var r in n.instances){var a=n.instances[r],o=n.enteredCbs[r];if(a&&o){delete n.enteredCbs[r];for(var i=0;i<o.length;i++)a._isBeingDestroyed||o[i](a)}}}}var qo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,r=t.children,a=t.parent,o=t.data;o.routerView=!0;for(var i=a.$createElement,s=n.name,u=a.$route,c=a._routerViewCache||(a._routerViewCache={}),l=0,d=!1;a&&a._routerRoot!==a;){var f=a.$vnode?a.$vnode.data:{};f.routerView&&l++,f.keepAlive&&a._directInactive&&a._inactive&&(d=!0),a=a.$parent}if(o.routerViewDepth=l,d){var p=c[s],h=p&&p.component;return h?(p.configProps&&wo(h,o,p.route,p.configProps),i(h,o,r)):i()}var y=u.matched[l],g=y&&y.components[s];if(!y||!g)return c[s]=null,i();c[s]={component:g},o.registerRouteInstance=function(e,t){var n=y.instances[s];(t&&n!==e||!t&&n===e)&&(y.instances[s]=t)},(o.hook||(o.hook={})).prepatch=function(e,t){y.instances[s]=t.componentInstance},o.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==y.instances[s]&&(y.instances[s]=e.componentInstance),bo(u)};var m=y.props&&y.props[s];return m&&(to(c[s],{route:u,configProps:m}),wo(g,o,u,m)),i(g,o,r)}};function wo(e,t,n,r){var a=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,r);if(a){a=t.props=to({},a);var o=t.attrs=t.attrs||{};for(var i in a)e.props&&i in e.props||(o[i]=a[i],delete a[i])}}function ko(e,t,n){var r=e.charAt(0);if("/"===r)return e;if("?"===r||"#"===r)return t+e;var a=t.split("/");n&&a[a.length-1]||a.pop();for(var o=e.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var s=o[i];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function xo(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var _o=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Co=Lo,Eo=Oo,Po=function(e,t){return jo(Oo(e,t),t)},To=jo,Qo=Mo,So=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Oo(e,t){for(var n,r=[],a=0,o=0,i="",s=t&&t.delimiter||"/";null!=(n=So.exec(e));){var u=n[0],c=n[1],l=n.index;if(i+=e.slice(o,l),o=l+u.length,c)i+=c[1];else{var d=e[o],f=n[2],p=n[3],h=n[4],y=n[5],g=n[6],m=n[7];i&&(r.push(i),i="");var v=null!=f&&null!=d&&d!==f,b="+"===g||"*"===g,q="?"===g||"*"===g,w=n[2]||s,k=h||y;r.push({name:p||a++,prefix:f||"",delimiter:w,optional:q,repeat:b,partial:v,asterisk:!!m,pattern:k?Do(k):m?".*":"[^"+Io(w)+"]+?"})}}return o<e.length&&(i+=e.substr(o)),i&&r.push(i),r}function Ao(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function jo(e,t){for(var n=new Array(e.length),r=0;r<e.length;r++)"object"==typeof e[r]&&(n[r]=new RegExp("^(?:"+e[r].pattern+")$",Fo(t)));return function(t,r){for(var a="",o=t||{},i=(r||{}).pretty?Ao:encodeURIComponent,s=0;s<e.length;s++){var u=e[s];if("string"!=typeof u){var c,l=o[u.name];if(null==l){if(u.optional){u.partial&&(a+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(_o(l)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var d=0;d<l.length;d++){if(c=i(l[d]),!n[s].test(c))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===d?u.prefix:u.delimiter)+c}}else{if(c=u.asterisk?encodeURI(l).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):i(l),!n[s].test(c))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+c+'"');a+=u.prefix+c}}else a+=u}return a}}function Io(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Do(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function $o(e,t){return e.keys=t,e}function Fo(e){return e&&e.sensitive?"":"i"}function Mo(e,t,n){_o(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,a=!1!==n.end,o="",i=0;i<e.length;i++){var s=e[i];if("string"==typeof s)o+=Io(s);else{var u=Io(s.prefix),c="(?:"+s.pattern+")";t.push(s),s.repeat&&(c+="(?:"+u+c+")*"),o+=c=s.optional?s.partial?u+"("+c+")?":"(?:"+u+"("+c+"))?":u+"("+c+")"}}var l=Io(n.delimiter||"/"),d=o.slice(-l.length)===l;return r||(o=(d?o.slice(0,-l.length):o)+"(?:"+l+"(?=$))?"),o+=a?"$":r&&d?"":"(?="+l+"|$)",$o(new RegExp("^"+o,Fo(n)),t)}function Lo(e,t,n){return _o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return $o(e,t)}(e,t):_o(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(Lo(e[a],t,n).source);return $o(new RegExp("(?:"+r.join("|")+")",Fo(n)),t)}(e,t,n):function(e,t,n){return Mo(Oo(e,n),t,n)}(e,t,n)}Co.parse=Eo,Co.compile=Po,Co.tokensToFunction=To,Co.tokensToRegExp=Qo;var zo=Object.create(null);function Ro(e,t,n){t=t||{};try{var r=zo[e]||(zo[e]=Co.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),r(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function No(e,t,n,r){var a="string"==typeof e?{path:e}:e;if(a._normalized)return a;if(a.name){var o=(a=to({},e)).params;return o&&"object"==typeof o&&(a.params=to({},o)),a}if(!a.path&&a.params&&t){(a=to({},a))._normalized=!0;var i=to(to({},t.params),a.params);if(t.name)a.name=t.name,a.params=i;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;a.path=Ro(s,i,t.path)}else 0;return a}var u=function(e){var t="",n="",r=e.indexOf("#");r>=0&&(t=e.slice(r),e=e.slice(0,r));var a=e.indexOf("?");return a>=0&&(n=e.slice(a+1),e=e.slice(0,a)),{path:e,query:n,hash:t}}(a.path||""),c=t&&t.path||"/",l=u.path?ko(u.path,c,n||a.append):c,d=function(e,t,n){void 0===t&&(t={});var r,a=n||uo;try{r=a(e||"")}catch(e){r={}}for(var o in t){var i=t[o];r[o]=Array.isArray(i)?i.map(so):so(i)}return r}(u.query,a.query,r&&r.options.parseQuery),f=a.hash||u.hash;return f&&"#"!==f.charAt(0)&&(f="#"+f),{_normalized:!0,path:l,query:d,hash:f}}var Bo,Ko=function(){},Uo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,r=this.$route,a=n.resolve(this.to,r,this.append),o=a.location,i=a.route,s=a.href,u={},c=n.options.linkActiveClass,l=n.options.linkExactActiveClass,d=null==c?"router-link-active":c,f=null==l?"router-link-exact-active":l,p=null==this.activeClass?d:this.activeClass,h=null==this.exactActiveClass?f:this.exactActiveClass,y=i.redirectedFrom?fo(null,No(i.redirectedFrom),null,n):i;u[h]=mo(r,y,this.exactPath),u[p]=this.exact||this.exactPath?u[h]:function(e,t){return 0===e.path.replace(lo,"/").indexOf(t.path.replace(lo,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(r,y);var g=u[h]?this.ariaCurrentValue:null,m=function(e){Ho(e)&&(t.replace?n.replace(o,Ko):n.push(o,Ko))},v={click:Ho};Array.isArray(this.event)?this.event.forEach((function(e){v[e]=m})):v[this.event]=m;var b={class:u},q=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:m,isActive:u[p],isExactActive:u[h]});if(q){if(1===q.length)return q[0];if(q.length>1||!q.length)return 0===q.length?e():e("span",{},q)}if("a"===this.tag)b.on=v,b.attrs={href:s,"aria-current":g};else{var w=function e(t){var n;if(t)for(var r=0;r<t.length;r++){if("a"===(n=t[r]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(w){w.isStatic=!1;var k=w.data=to({},w.data);for(var x in k.on=k.on||{},k.on){var _=k.on[x];x in v&&(k.on[x]=Array.isArray(_)?_:[_])}for(var C in v)C in k.on?k.on[C].push(v[C]):k.on[C]=m;var E=w.data.attrs=to({},w.data.attrs);E.href=s,E["aria-current"]=g}else b.on=v}return e(this.tag,b,this.$slots.default)}};function Ho(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var Vo="undefined"!=typeof window;function Go(e,t,n,r,a){var o=t||[],i=n||Object.create(null),s=r||Object.create(null);e.forEach((function(e){!function e(t,n,r,a,o,i){var s=a.path,u=a.name;0;var c=a.pathToRegexpOptions||{},l=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return xo(t.path+"/"+e)}(s,o,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var d={path:l,regex:Wo(l,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:u,parent:o,matchAs:i,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var o=i?xo(i+"/"+a.path):void 0;e(t,n,r,a,d,o)}));n[d.path]||(t.push(d.path),n[d.path]=d);if(void 0!==a.alias)for(var f=Array.isArray(a.alias)?a.alias:[a.alias],p=0;p<f.length;++p){0;var h={path:f[p],children:a.children};e(t,n,r,h,o,d.path||"/")}u&&(r[u]||(r[u]=d))}(o,i,s,e,a)}));for(var u=0,c=o.length;u<c;u++)"*"===o[u]&&(o.push(o.splice(u,1)[0]),c--,u--);return{pathList:o,pathMap:i,nameMap:s}}function Wo(e,t){return Co(e,[],t)}function Zo(e,t){var n=Go(e),r=n.pathList,a=n.pathMap,o=n.nameMap;function i(e,n,i){var s=No(e,n,!1,t),c=s.name;if(c){var l=o[c];if(!l)return u(null,s);var d=l.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),n&&"object"==typeof n.params)for(var f in n.params)!(f in s.params)&&d.indexOf(f)>-1&&(s.params[f]=n.params[f]);return s.path=Ro(l.path,s.params),u(l,s,i)}if(s.path){s.params={};for(var p=0;p<r.length;p++){var h=r[p],y=a[h];if(Jo(y.regex,s.path,s.params))return u(y,s,i)}}return u(null,s)}function s(e,n){var r=e.redirect,a="function"==typeof r?r(fo(e,n,null,t)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return u(null,n);var s=a,c=s.name,l=s.path,d=n.query,f=n.hash,p=n.params;if(d=s.hasOwnProperty("query")?s.query:d,f=s.hasOwnProperty("hash")?s.hash:f,p=s.hasOwnProperty("params")?s.params:p,c){o[c];return i({_normalized:!0,name:c,query:d,hash:f,params:p},void 0,n)}if(l){var h=function(e,t){return ko(e,t.parent?t.parent.path:"/",!0)}(l,e);return i({_normalized:!0,path:Ro(h,p),query:d,hash:f},void 0,n)}return u(null,n)}function u(e,n,r){return e&&e.redirect?s(e,r||n):e&&e.matchAs?function(e,t,n){var r=i({_normalized:!0,path:Ro(n,t.params)});if(r){var a=r.matched,o=a[a.length-1];return t.params=r.params,u(o,t)}return u(null,t)}(0,n,e.matchAs):fo(e,n,r,t)}return{match:i,addRoute:function(e,t){var n="object"!=typeof e?o[e]:void 0;Go([t||e],r,a,o,n),n&&n.alias.length&&Go(n.alias.map((function(e){return{path:e,children:[t]}})),r,a,o,n)},getRoutes:function(){return r.map((function(e){return a[e]}))},addRoutes:function(e){Go(e,r,a,o)}}}function Jo(e,t,n){var r=t.match(e);if(!r)return!1;if(!n)return!0;for(var a=1,o=r.length;a<o;++a){var i=e.keys[a-1];i&&(n[i.name||"pathMatch"]="string"==typeof r[a]?io(r[a]):r[a])}return!0}var Xo=Vo&&window.performance&&window.performance.now?window.performance:Date;function Yo(){return Xo.now().toFixed(3)}var ei=Yo();function ti(){return ei}function ni(e){return ei=e}var ri=Object.create(null);function ai(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=to({},window.history.state);return n.key=ti(),window.history.replaceState(n,"",t),window.addEventListener("popstate",si),function(){window.removeEventListener("popstate",si)}}function oi(e,t,n,r){if(e.app){var a=e.options.scrollBehavior;a&&e.app.$nextTick((function(){var o=function(){var e=ti();if(e)return ri[e]}(),i=a.call(e,t,n,r?o:null);i&&("function"==typeof i.then?i.then((function(e){fi(e,o)})).catch((function(e){0})):fi(i,o))}))}}function ii(){var e=ti();e&&(ri[e]={x:window.pageXOffset,y:window.pageYOffset})}function si(e){ii(),e.state&&e.state.key&&ni(e.state.key)}function ui(e){return li(e.x)||li(e.y)}function ci(e){return{x:li(e.x)?e.x:window.pageXOffset,y:li(e.y)?e.y:window.pageYOffset}}function li(e){return"number"==typeof e}var di=/^#\d/;function fi(e,t){var n,r="object"==typeof e;if(r&&"string"==typeof e.selector){var a=di.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(a){var o=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{x:r.left-n.left-t.x,y:r.top-n.top-t.y}}(a,o={x:li((n=o).x)?n.x:0,y:li(n.y)?n.y:0})}else ui(e)&&(t=ci(e))}else r&&ui(e)&&(t=ci(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var pi,hi=Vo&&((-1===(pi=window.navigator.userAgent).indexOf("Android 2.")&&-1===pi.indexOf("Android 4.0")||-1===pi.indexOf("Mobile Safari")||-1!==pi.indexOf("Chrome")||-1!==pi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function yi(e,t){ii();var n=window.history;try{if(t){var r=to({},n.state);r.key=ti(),n.replaceState(r,"",e)}else n.pushState({key:ni(Yo())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function gi(e){yi(e,!0)}var mi={redirected:2,aborted:4,cancelled:8,duplicated:16};function vi(e,t){return qi(e,t,mi.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return wi.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function bi(e,t){return qi(e,t,mi.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function qi(e,t,n,r){var a=new Error(r);return a._isRouter=!0,a.from=e,a.to=t,a.type=n,a}var wi=["params","query","hash"];function ki(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function xi(e,t){return ki(e)&&e._isRouter&&(null==t||e.type===t)}function _i(e,t,n){var r=function(a){a>=e.length?n():e[a]?t(e[a],(function(){r(a+1)})):r(a+1)};r(0)}function Ci(e){return function(t,n,r){var a=!1,o=0,i=null;Ei(e,(function(e,t,n,s){if("function"==typeof e&&void 0===e.cid){a=!0,o++;var u,c=Qi((function(t){var a;((a=t).__esModule||Ti&&"Module"===a[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:Bo.extend(t),n.components[s]=t,--o<=0&&r()})),l=Qi((function(e){var t="Failed to resolve async component "+s+": "+e;i||(i=ki(e)?e:new Error(t),r(i))}));try{u=e(c,l)}catch(e){l(e)}if(u)if("function"==typeof u.then)u.then(c,l);else{var d=u.component;d&&"function"==typeof d.then&&d.then(c,l)}}})),a||r()}}function Ei(e,t){return Pi(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function Pi(e){return Array.prototype.concat.apply([],e)}var Ti="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Qi(e){var t=!1;return function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];if(!t)return t=!0,e.apply(this,n)}}var Si=function(e,t){this.router=e,this.base=function(e){if(!e)if(Vo){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=ho,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Oi(e,t,n,r){var a=Ei(e,(function(e,r,a,o){var i=function(e,t){"function"!=typeof e&&(e=Bo.extend(e));return e.options[t]}(e,t);if(i)return Array.isArray(i)?i.map((function(e){return n(e,r,a,o)})):n(i,r,a,o)}));return Pi(r?a.reverse():a)}function Ai(e,t){if(t)return function(){return e.apply(t,arguments)}}Si.prototype.listen=function(e){this.cb=e},Si.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},Si.prototype.onError=function(e){this.errorCbs.push(e)},Si.prototype.transitionTo=function(e,t,n){var r,a=this;try{r=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var o=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),t&&t(r),a.ensureURL(),a.router.afterHooks.forEach((function(e){e&&e(r,o)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(e){e(r)})))}),(function(e){n&&n(e),e&&!a.ready&&(xi(e,mi.redirected)&&o===ho||(a.ready=!0,a.readyErrorCbs.forEach((function(t){t(e)}))))}))},Si.prototype.confirmTransition=function(e,t,n){var r=this,a=this.current;this.pending=e;var o,i,s=function(e){!xi(e)&&ki(e)&&(r.errorCbs.length?r.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},u=e.matched.length-1,c=a.matched.length-1;if(mo(e,a)&&u===c&&e.matched[u]===a.matched[c])return this.ensureURL(),e.hash&&oi(this.router,a,e,!1),s(((i=qi(o=a,e,mi.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",i));var l=function(e,t){var n,r=Math.max(e.length,t.length);for(n=0;n<r&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),d=l.updated,f=l.deactivated,p=l.activated,h=[].concat(function(e){return Oi(e,"beforeRouteLeave",Ai,!0)}(f),this.router.beforeHooks,function(e){return Oi(e,"beforeRouteUpdate",Ai)}(d),p.map((function(e){return e.beforeEnter})),Ci(p)),y=function(t,n){if(r.pending!==e)return s(bi(a,e));try{t(e,a,(function(t){!1===t?(r.ensureURL(!0),s(function(e,t){return qi(e,t,mi.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(a,e))):ki(t)?(r.ensureURL(!0),s(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(s(vi(a,e)),"object"==typeof t&&t.replace?r.replace(t):r.push(t)):n(t)}))}catch(e){s(e)}};_i(h,y,(function(){_i(function(e){return Oi(e,"beforeRouteEnter",(function(e,t,n,r){return function(e,t,n){return function(r,a,o){return e(r,a,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),o(e)}))}}(e,n,r)}))}(p).concat(r.router.resolveHooks),y,(function(){if(r.pending!==e)return s(bi(a,e));r.pending=null,t(e),r.router.app&&r.router.app.$nextTick((function(){bo(e)}))}))}))},Si.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Si.prototype.setupListeners=function(){},Si.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=ho,this.pending=null};var ji=function(e){function t(t,n){e.call(this,t,n),this._startLocation=Ii(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,r=hi&&n;r&&this.listeners.push(ai());var a=function(){var n=e.current,a=Ii(e.base);e.current===ho&&a===e._startLocation||e.transitionTo(a,(function(e){r&&oi(t,e,n,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var r=this,a=this.current;this.transitionTo(e,(function(e){yi(xo(r.base+e.fullPath)),oi(r.router,e,a,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var r=this,a=this.current;this.transitionTo(e,(function(e){gi(xo(r.base+e.fullPath)),oi(r.router,e,a,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(Ii(this.base)!==this.current.fullPath){var t=xo(this.base+this.current.fullPath);e?yi(t):gi(t)}},t.prototype.getCurrentLocation=function(){return Ii(this.base)},t}(Si);function Ii(e){var t=window.location.pathname,n=t.toLowerCase(),r=e.toLowerCase();return!e||n!==r&&0!==n.indexOf(xo(r+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var Di=function(e){function t(t,n,r){e.call(this,t,n),r&&function(e){var t=Ii(e);if(!/^\/#/.test(t))return window.location.replace(xo(e+"/#"+t)),!0}(this.base)||$i()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=hi&&t;n&&this.listeners.push(ai());var r=function(){var t=e.current;$i()&&e.transitionTo(Fi(),(function(r){n&&oi(e.router,r,t,!0),hi||zi(r.fullPath)}))},a=hi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},t.prototype.push=function(e,t,n){var r=this,a=this.current;this.transitionTo(e,(function(e){Li(e.fullPath),oi(r.router,e,a,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var r=this,a=this.current;this.transitionTo(e,(function(e){zi(e.fullPath),oi(r.router,e,a,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Fi()!==t&&(e?Li(t):zi(t))},t.prototype.getCurrentLocation=function(){return Fi()},t}(Si);function $i(){var e=Fi();return"/"===e.charAt(0)||(zi("/"+e),!1)}function Fi(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function Mi(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function Li(e){hi?yi(Mi(e)):window.location.hash=e}function zi(e){hi?gi(Mi(e)):window.location.replace(Mi(e))}var Ri=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var r=this;this.transitionTo(e,(function(e){r.stack=r.stack.slice(0,r.index+1).concat(e),r.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var r=this;this.transitionTo(e,(function(e){r.stack=r.stack.slice(0,r.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,(function(){var e=t.current;t.index=n,t.updateRoute(r),t.router.afterHooks.forEach((function(t){t&&t(r,e)}))}),(function(e){xi(e,mi.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(Si),Ni=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Zo(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!hi&&!1!==e.fallback,this.fallback&&(t="hash"),Vo||(t="abstract"),this.mode=t,t){case"history":this.history=new ji(this,e.base);break;case"hash":this.history=new Di(this,e.base,this.fallback);break;case"abstract":this.history=new Ri(this,e.base);break;default:0}},Bi={currentRoute:{configurable:!0}};Ni.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},Bi.currentRoute.get=function(){return this.history&&this.history.current},Ni.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof ji||n instanceof Di){var r=function(e){n.setupListeners(),function(e){var r=n.current,a=t.options.scrollBehavior;hi&&a&&"fullPath"in e&&oi(t,e,r,!1)}(e)};n.transitionTo(n.getCurrentLocation(),r,r)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},Ni.prototype.beforeEach=function(e){return Ui(this.beforeHooks,e)},Ni.prototype.beforeResolve=function(e){return Ui(this.resolveHooks,e)},Ni.prototype.afterEach=function(e){return Ui(this.afterHooks,e)},Ni.prototype.onReady=function(e,t){this.history.onReady(e,t)},Ni.prototype.onError=function(e){this.history.onError(e)},Ni.prototype.push=function(e,t,n){var r=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){r.history.push(e,t,n)}));this.history.push(e,t,n)},Ni.prototype.replace=function(e,t,n){var r=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){r.history.replace(e,t,n)}));this.history.replace(e,t,n)},Ni.prototype.go=function(e){this.history.go(e)},Ni.prototype.back=function(){this.go(-1)},Ni.prototype.forward=function(){this.go(1)},Ni.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},Ni.prototype.resolve=function(e,t,n){var r=No(e,t=t||this.history.current,n,this),a=this.match(r,t),o=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(e,t,n){var r="hash"===n?"#"+t:t;return e?xo(e+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:a}},Ni.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ni.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Ni.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ni.prototype,Bi);var Ki=Ni;function Ui(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}Ni.install=function e(t){if(!e.installed||Bo!==t){e.installed=!0,Bo=t;var n=function(e){return void 0!==e},r=function(e,t){var r=e.$options._parentVnode;n(r)&&n(r=r.data)&&n(r=r.registerRouteInstance)&&r(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",qo),t.component("RouterLink",Uo);var a=t.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Ni.version="3.6.5",Ni.isNavigationFailure=xi,Ni.NavigationFailureType=mi,Ni.START_LOCATION=ho,Vo&&window.Vue&&window.Vue.use(Ni);n(103);n(16),n(130);var Hi={NotFound:()=>Promise.all([n.e(0),n.e(4)]).then(n.bind(null,330)),Layout:()=>Promise.all([n.e(0),n.e(2)]).then(n.bind(null,329))},Vi={"v-a8c6d0c2":()=>n.e(7).then(n.bind(null,331)),"v-5c841446":()=>n.e(9).then(n.bind(null,332)),"v-08eaa20c":()=>n.e(10).then(n.bind(null,333)),"v-0c84a61a":()=>n.e(8).then(n.bind(null,334)),"v-0690f45b":()=>n.e(6).then(n.bind(null,335)),"v-73464cac":()=>n.e(12).then(n.bind(null,336)),"v-492159b4":()=>n.e(11).then(n.bind(null,337)),"v-7e8e8920":()=>n.e(13).then(n.bind(null,338)),"v-79d04a1a":()=>n.e(16).then(n.bind(null,339)),"v-7b4c733a":()=>n.e(14).then(n.bind(null,340)),"v-12bd433c":()=>n.e(17).then(n.bind(null,341)),"v-51fcd5b6":()=>n.e(20).then(n.bind(null,342)),"v-21394984":()=>n.e(18).then(n.bind(null,343)),"v-3e105a2f":()=>n.e(15).then(n.bind(null,344)),"v-46f9d175":()=>n.e(19).then(n.bind(null,345)),"v-54ddb50d":()=>n.e(21).then(n.bind(null,346)),"v-2245dff0":()=>n.e(23).then(n.bind(null,347)),"v-2d9dc22e":()=>n.e(24).then(n.bind(null,348)),"v-7f12c942":()=>n.e(22).then(n.bind(null,349)),"v-5776902a":()=>n.e(25).then(n.bind(null,350)),"v-5cf913ea":()=>n.e(26).then(n.bind(null,351)),"v-1868812c":()=>n.e(28).then(n.bind(null,352)),"v-77162b2a":()=>n.e(29).then(n.bind(null,353)),"v-5a22e16a":()=>n.e(27).then(n.bind(null,354)),"v-833e7788":()=>n.e(30).then(n.bind(null,355)),"v-4191778a":()=>n.e(33).then(n.bind(null,356)),"v-0819964c":()=>n.e(31).then(n.bind(null,357)),"v-a9b3546c":()=>n.e(32).then(n.bind(null,358)),"v-3848fcaa":()=>n.e(34).then(n.bind(null,359)),"v-054ae28a":()=>n.e(36).then(n.bind(null,360)),"v-4ba8376c":()=>n.e(35).then(n.bind(null,361)),"v-5f04cf24":()=>n.e(38).then(n.bind(null,362)),"v-22d42028":()=>n.e(37).then(n.bind(null,363)),"v-cb7d9a7c":()=>n.e(41).then(n.bind(null,364)),"v-1e079aca":()=>n.e(39).then(n.bind(null,365)),"v-f3679c2c":()=>n.e(40).then(n.bind(null,366)),"v-251cb4a4":()=>Promise.all([n.e(0),n.e(5)]).then(n.bind(null,367))};function Gi(e){const t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}const Wi=/-(\w)/g,Zi=Gi(e=>e.replace(Wi,(e,t)=>t?t.toUpperCase():"")),Ji=/\B([A-Z])/g,Xi=Gi(e=>e.replace(Ji,"-$1").toLowerCase()),Yi=Gi(e=>e.charAt(0).toUpperCase()+e.slice(1));function es(e,t){if(!t)return;if(e(t))return e(t);return t.includes("-")?e(Yi(Zi(t))):e(Yi(t))||e(Xi(t))}const ts=Object.assign({},Hi,Vi),ns=e=>ts[e],rs=e=>Vi[e],as=e=>Hi[e],os=e=>Hn.component(e);function is(e){return es(rs,e)}function ss(e){return es(as,e)}function us(e){return es(ns,e)}function cs(e){return es(os,e)}function ls(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!cs(e)&&us(e)){const t=await us(e)();Hn.component(e,t.default)}}))}function ds(e,t){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=t)}var fs=n(92),ps=n.n(fs),hs=n(93),ys=n.n(hs),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,t])=>t),this.$ssrContext){const t=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=t)?e.map(e=>{let t="<meta";return Object.keys(e).forEach(n=>{t+=` ${n}="${ys()(e[n])}"`}),t+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vs(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=bs(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return ps()([{name:"description",content:this.$description}],e,this.siteMeta,qs)},updateCanonicalLink(){ms(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bs(null,this.currentMetaTags),ms()}};function ms(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function vs(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function bs(e,t){if(t&&[...t].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const t=document.createElement("meta");return Object.keys(e).forEach(n=>{t.setAttribute(n,e[n])}),document.head.appendChild(t),t})}function qs(e){for(const t of["name","property","itemprop"])if(e.hasOwnProperty(t))return e[t]+t;return JSON.stringify(e)}var ws=n(50),ks={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:n.n(ws)()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter(t=>e.some(e=>e.hash===t.hash)),n=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+n;for(let e=0;e<t.length;e++){const o=t[e],i=t[e+1],s=0===e&&0===n||n>=o.parentElement.offsetTop+10&&(!i||n<i.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(s&&u!==decodeURIComponent(o.hash)){const n=o;if(a===r)for(let n=e+1;n<t.length;n++)if(u===decodeURIComponent(t[n].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(n.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},xs=n(24),_s=n.n(xs),Cs={mounted(){_s.a.configure({showSpinner:!1}),this.$router.beforeEach((e,t,n)=>{e.path===t.path||Hn.component(e.name)||_s.a.start(),n()}),this.$router.afterEach(()=>{_s.a.done(),this.isSidebarOpen=!1})}};n(239),n(240);class Es{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:e="",duration:t=3e3}){let n=document.createElement("div");n.className="message move-in",n.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${e}</div>\n    `,this.containerEl.appendChild(n),t>0&&setTimeout(()=>{this.close(n)},t)}close(e){e.className=e.className.replace("move-in",""),e.className+="move-out",e.addEventListener("animationend",()=>{e.remove()})}}var Ps={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(e=>{document.querySelectorAll(e).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(e){if(e.classList.contains("codecopy-enabled"))return;const t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",()=>{this.copyToClipboard(e.innerText)}),e.appendChild(t),e.classList.add("codecopy-enabled")},copyToClipboard(e){const t=document.createElement("textarea");t.value=e,t.setAttribute("readonly",""),t.style.position="absolute",t.style.left="-9999px",document.body.appendChild(t);const n=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);t.select(),document.execCommand("copy");(new Es).show({text:"复制成功",duration:1e3}),document.body.removeChild(t),n&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(n))}}};!function(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===n&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Ts={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Qs={},Ss=function(e){return'<div id="app">\n'.concat(e,"\n</div>")},Os=function(e){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[e]?window.$VUEPRESS_DEMO_BLOCK[e]:Ts[e]},As=function e(t,n,r){var a=document.createElement(t);return n&&Object.keys(n).forEach((function(e){if(e.indexOf("data"))a[e]=n[e];else{var t=e.replace("data","");a.dataset[t]=n[e]}})),r&&r.forEach((function(t){var n=t.tag,r=t.attrs,o=t.children;a.appendChild(e(n,r,o))})),a},js=function(e,t,n){var r,a=(r=e.querySelectorAll(".".concat(t)),Array.prototype.slice.call(r));return 1!==a.length||n?a:a[0]},Is=function(e,t){var n,r,a=e.match(/<style>([\s\S]+)<\/style>/),o=e.match(/<template>([\s\S]+)<\/template>/),i=e.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:t.jsLib||[],cssLib:t.cssLib||[]};s.htmlTpl=Ss(s.html),s.jsTpl=(n=s.js,r=n.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(e,t){var n=e.split(/export\s+default/),r="(function() {".concat(n[0]," ; return ").concat(n[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,o=[eval][0](a);return o.template=t,o}(s.js,s.html);var u=Os("vue");return s.jsLib.unshift(u),s},Ds=function(e,t){var n,r=e.match(/<style>([\s\S]+)<\/style>/),a=e.match(/<html>([\s\S]+)<\/html>/),o=e.match(/<script>([\s\S]+)<\/script>/),i={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:t.jsLib||[],cssLib:t.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(n=i.js,window.Babel?window.Babel.transform(n,{presets:["es2015"]}).code:n),i},$s=function(e){return e=e.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),e+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Fs(){var e=js(document,"vuepress-plugin-demo-block__wrapper",!0);e.length?e.forEach((function(e){if("true"!==e.dataset.created){e.style.display="block";var t=js(e,"vuepress-plugin-demo-block__code"),n=js(e,"vuepress-plugin-demo-block__display"),r=js(e,"vuepress-plugin-demo-block__footer"),a=js(n,"vuepress-plugin-demo-block__app"),o=decodeURIComponent(e.dataset.code),i=decodeURIComponent(e.dataset.config),s=decodeURIComponent(e.dataset.type);i=i?JSON.parse(i):{};var u=t.querySelector("div").clientHeight,c="react"===s?function(e,t){var n=(0,window.Babel.transform)(e,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(n,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),o={js:a,css:a.__style__||"",jsLib:t.jsLib||[],cssLib:t.cssLib||[],jsTpl:$s(e),htmlTpl:Ss("")},i=Os("react"),s=Os("reactDOM");return o.jsLib.unshift(i,s),o}(o,i):"vanilla"===s?Ds(o,i):Is(o,i),l=As("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(l),l.addEventListener("click",Ms.bind(null,l,u,t,r)),Os("jsfiddle")&&r.appendChild(function(e){var t=e.css,n=e.htmlTpl,r=e.jsTpl,a=e.jsLib,o=e.cssLib,i=a.concat(o).concat(Os("cssLib")).concat(Os("jsLib")).join(",");return As("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:t}},{tag:"input",attrs:{type:"hidden",name:"html",value:n}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Os("codepen")&&r.appendChild(function(e){var t=e.css,n=e.htmlTpl,r=e.jsTpl,a=e.jsLib,o=e.cssLib,i=JSON.stringify({css:t,html:n,js:r,js_external:a.concat(Os("jsLib")).join(";"),css_external:o.concat(Os("cssLib")).join(";"),layout:Os("codepenLayout"),js_pre_processor:Os("codepenJsProcessor"),editors:Os("codepenEditors")});return As("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==i.horizontal?i.horizontal:Os("horizontal")){e.classList.add("vuepress-plugin-demo-block__horizontal");var d=t.firstChild.cloneNode(!0);d.classList.add("vuepress-plugin-demo-block__h_code"),n.appendChild(d)}if(c.css&&function(e){if(!Qs[e]){var t=As("style",{innerHTML:e});document.body.appendChild(t),Qs[e]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),a);else if("vue"===s){var f=(new(Vue.extend(c.script))).$mount();a.appendChild(f.$el)}else"vanilla"===s&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());e.dataset.created="true"}})):setTimeout((function(e){Fs()}),300)}function Ms(e,t,n,r){var a="1"!==e.dataset.isExpand;n.style.height=a?"".concat(t,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),e.dataset.isExpand=a?"1":"0"}var Ls={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Fs()},updated:function(){Fs()}},zs="auto",Rs="zoom-in",Ns="zoom-out",Bs="grab",Ks="move";function Us(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?e.addEventListener(t,n,a):e.removeEventListener(t,n,a)}function Hs(e,t){if(e){var n=new Image;n.onload=function(){t&&t(n)},n.src=e}}function Vs(e){return e.dataset.original?e.dataset.original:"A"===e.parentNode.tagName?e.parentNode.getAttribute("href"):null}function Gs(e,t,n){!function(e){var t=Ws,n=Zs;if(e.transition){var r=e.transition;delete e.transition,e[t]=r}if(e.transform){var a=e.transform;delete e.transform,e[n]=a}}(t);var r=e.style,a={};for(var o in t)n&&(a[o]=r[o]||""),r[o]=t[o];return a}var Ws="transition",Zs="transform",Js="transform",Xs="transitionend";var Ys=function(){},eu={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ys,onClose:Ys,onGrab:Ys,onMove:Ys,onRelease:Ys,onBeforeOpen:Ys,onBeforeClose:Ys,onBeforeGrab:Ys,onBeforeRelease:Ys,onImageLoading:Ys,onImageLoaded:Ys},tu={init:function(e){var t,n;t=this,n=e,Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){t[e]=t[e].bind(n)}))},click:function(e){if(e.preventDefault(),ru(e))return window.open(this.target.srcOriginal||e.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(e.currentTarget)},scroll:function(){var e=document.documentElement||document.body.parentNode||document.body,t=window.pageXOffset||e.scrollLeft,n=window.pageYOffset||e.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:t,y:n});var r=this.lastScrollPosition.x-t,a=this.lastScrollPosition.y-n,o=this.options.scrollThreshold;(Math.abs(a)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(e){(function(e){return"Escape"===(e.key||e.code)||27===e.keyCode})(e)&&(this.released?this.close():this.release(this.close))},mousedown:function(e){if(nu(e)&&!ru(e)){e.preventDefault();var t=e.clientX,n=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,n)}.bind(this),200)}},mousemove:function(e){this.released||this.move(e.clientX,e.clientY)},mouseup:function(e){nu(e)&&!ru(e)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(e){e.preventDefault();var t=e.touches[0],n=t.clientX,r=t.clientY;this.pressTimer=setTimeout(function(){this.grab(n,r)}.bind(this),200)},touchmove:function(e){if(!this.released){var t=e.touches[0],n=t.clientX,r=t.clientY;this.move(n,r)}},touchend:function(e){(function(e){e.targetTouches.length})(e)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function nu(e){return 0===e.button}function ru(e){return e.metaKey||e.ctrlKey}var au={init:function(e){this.el=document.createElement("div"),this.instance=e,this.parent=document.body,Gs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(e.options),Us(this.el,"click",e.handler.clickOverlay.bind(e))},updateStyle:function(e){Gs(this.el,{zIndex:e.zIndex,backgroundColor:e.bgColor,transition:"opacity\n        "+e.transitionDuration+"s\n        "+e.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},ou="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},iu=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),su=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},uu={init:function(e,t){this.el=e,this.instance=t,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Vs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var e=this.instance.options,t=e.zIndex,n=e.enableGrab,r=e.transitionDuration,a=e.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:t+1,cursor:n?Bs:Ns,transition:Js+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Gs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Gs(this.el,{transform:"none"})},grab:function(e,t,n){var r=cu(),a=r.x-e,o=r.y-t;Gs(this.el,{cursor:Ks,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+n)+","+(this.scale.y+n)+")"})},move:function(e,t,n){var r=cu(),a=r.x-e,o=r.y-t;Gs(this.el,{transition:Js,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+n)+","+(this.scale.y+n)+")"})},restoreCloseStyle:function(){Gs(this.el,this.styleClose)},restoreOpenStyle:function(){Gs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var e=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var t=this.el.cloneNode(!1);t.setAttribute("src",this.srcOriginal),t.style.position="fixed",t.style.visibility="hidden",e.appendChild(t),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),e.removeChild(t)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var e=cu(),t=this.rect.left+this.rect.width/2,n=this.rect.top+this.rect.height/2;return{x:e.x-t,y:e.y-n}},calculateScale:function(){var e=this.el.dataset,t=e.zoomingHeight,n=e.zoomingWidth,r=this.instance.options,a=r.customSize,o=r.scaleBase;if(!a&&t&&n)return{x:n/this.rect.width,y:t/this.rect.height};if(a&&"object"===(void 0===a?"undefined":ou(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,u=cu(),c={x:u.x-i,y:u.y-s},l=c.x/i,d=c.y/s,f=o+Math.min(l,d);if(a&&"string"==typeof a){var p=n||this.el.naturalWidth,h=t||this.el.naturalHeight,y=parseFloat(a)*p/(100*this.rect.width),g=parseFloat(a)*h/(100*this.rect.height);if(f>y||f>g)return{x:y,y:g}}return{x:f,y:f}}};function cu(){var e=document.documentElement;return{x:Math.min(e.clientWidth,window.innerWidth)/2,y:Math.min(e.clientHeight,window.innerHeight)/2}}function lu(e,t,n){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Us(e,r,t[r],n)}))}var du=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.target=Object.create(uu),this.overlay=Object.create(au),this.handler=Object.create(tu),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=su({},eu,t),this.overlay.init(this),this.handler.init(this)}return iu(e,[{key:"listen",value:function(e){if("string"==typeof e)for(var t=document.querySelectorAll(e),n=t.length;n--;)this.listen(t[n]);else"IMG"===e.tagName&&(e.style.cursor=Rs,Us(e,"click",this.handler.click),this.options.preloadImage&&Hs(Vs(e)));return this}},{key:"config",value:function(e){return e?(su(this.options,e),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof e?document.querySelector(e):e;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Hs(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Us(document,"scroll",this.handler.scroll),Us(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Us(window,"resize",this.handler.resizeWindow);var o=function e(){Us(r,Xs,e,!1),t.lock=!1,t.target.upgradeSource(),t.options.enableGrab&&lu(document,t.handler,!0),n(r)};return Us(r,Xs,o),this}}}},{key:"close",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var n=this.target.el;this.options.onBeforeClose(n),this.lock=!0,this.body.style.cursor=zs,this.overlay.fadeOut(),this.target.zoomOut(),Us(document,"scroll",this.handler.scroll,!1),Us(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Us(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Us(n,Xs,r,!1),e.shown=!1,e.lock=!1,e.target.downgradeSource(),e.options.enableGrab&&lu(document,e.handler,!1),e.target.restoreCloseStyle(),e.overlay.remove(),t(n)};return Us(n,Xs,r),this}}},{key:"grab",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(e,t,n);var o=function e(){Us(a,Xs,e,!1),r(a)};return Us(a,Xs,o),this}}},{key:"move",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Ks,this.target.move(e,t,n);var a=this.target.el,o=function e(){Us(a,Xs,e,!1),r(a)};return Us(a,Xs,o),this}}},{key:"release",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var n=this.target.el;this.options.onBeforeRelease(n),this.lock=!0,this.body.style.cursor=zs,this.target.restoreOpenStyle();var r=function r(){Us(n,Xs,r,!1),e.lock=!1,e.released=!0,t(n)};return Us(n,Xs,r),this}}}]),e}();const fu=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),pu=Number("500");class hu{constructor(){this.instance=new du(fu)}update(e=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(e)}updateDelay(e=".theme-vdoing-content img:not(.no-zoom)",t=pu){setTimeout(()=>this.update(e),t)}}var yu=[gs,ks,Cs,Ps,Ls,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new hu,this.$vuepress.zooming.updateDelay()}}],gu={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return ds("layout",e),Hn.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},mu=n(7),vu=Object(mu.a)(gu,(function(){var e=this.$createElement;return(this._self._c||e)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,t,n){switch(t){case"components":e[t]||(e[t]={}),Object.assign(e[t],n);break;case"mixins":e[t]||(e[t]=[]),e[t].push(...n);break;default:throw new Error("Unknown option name.")}}(vu,"mixins",yu);const bu=[{name:"v-a8c6d0c2",path:"/pages/1ab0d6/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-a8c6d0c2").then(n)}},{path:"/pages/1ab0d6/index.html",redirect:"/pages/1ab0d6/"},{path:"/01.文档/01.入门/02.安装.html",redirect:"/pages/1ab0d6/"},{name:"v-5c841446",path:"/pages/3e9b56/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-5c841446").then(n)}},{path:"/pages/3e9b56/index.html",redirect:"/pages/3e9b56/"},{path:"/01.文档/02.指南和概念/01.Querys.html",redirect:"/pages/3e9b56/"},{name:"v-08eaa20c",path:"/pages/0b320a/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-08eaa20c").then(n)}},{path:"/pages/0b320a/index.html",redirect:"/pages/0b320a/"},{path:"/01.文档/02.指南和概念/02.Query Keys.html",redirect:"/pages/0b320a/"},{name:"v-0c84a61a",path:"/pages/c31375/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-0c84a61a").then(n)}},{path:"/pages/c31375/index.html",redirect:"/pages/c31375/"},{path:"/01.文档/01.入门/03.快速开始.html",redirect:"/pages/c31375/"},{name:"v-0690f45b",path:"/pages/70bdff/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-0690f45b").then(n)}},{path:"/pages/70bdff/index.html",redirect:"/pages/70bdff/"},{path:"/01.文档/01.入门/01.概述.html",redirect:"/pages/70bdff/"},{name:"v-73464cac",path:"/pages/b75375/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-73464cac").then(n)}},{path:"/pages/b75375/index.html",redirect:"/pages/b75375/"},{path:"/01.文档/02.指南和概念/04.Network Mode.html",redirect:"/pages/b75375/"},{name:"v-492159b4",path:"/pages/4dbca6/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-492159b4").then(n)}},{path:"/pages/4dbca6/index.html",redirect:"/pages/4dbca6/"},{path:"/01.文档/02.指南和概念/03.Query Function.html",redirect:"/pages/4dbca6/"},{name:"v-7e8e8920",path:"/pages/540635/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-7e8e8920").then(n)}},{path:"/pages/540635/index.html",redirect:"/pages/540635/"},{path:"/01.文档/02.指南和概念/05.并行查询.html",redirect:"/pages/540635/"},{name:"v-79d04a1a",path:"/pages/28a0b1/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-79d04a1a").then(n)}},{path:"/pages/28a0b1/index.html",redirect:"/pages/28a0b1/"},{path:"/01.文档/02.指南和概念/08.窗口焦点.html",redirect:"/pages/28a0b1/"},{name:"v-7b4c733a",path:"/pages/743bc6/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-7b4c733a").then(n)}},{path:"/pages/743bc6/index.html",redirect:"/pages/743bc6/"},{path:"/01.文档/02.指南和概念/06.依赖查询.html",redirect:"/pages/743bc6/"},{name:"v-12bd433c",path:"/pages/e5c1c3/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-12bd433c").then(n)}},{path:"/pages/e5c1c3/index.html",redirect:"/pages/e5c1c3/"},{path:"/01.文档/02.指南和概念/09.禁用&暂停.html",redirect:"/pages/e5c1c3/"},{name:"v-51fcd5b6",path:"/pages/77c0e9/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-51fcd5b6").then(n)}},{path:"/pages/77c0e9/index.html",redirect:"/pages/77c0e9/"},{path:"/01.文档/02.指南和概念/12.无限查询.html",redirect:"/pages/77c0e9/"},{name:"v-21394984",path:"/pages/cf1427/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-21394984").then(n)}},{path:"/pages/cf1427/index.html",redirect:"/pages/cf1427/"},{path:"/01.文档/02.指南和概念/10.重试.html",redirect:"/pages/cf1427/"},{name:"v-3e105a2f",path:"/pages/6c8d60/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-3e105a2f").then(n)}},{path:"/pages/6c8d60/index.html",redirect:"/pages/6c8d60/"},{path:"/01.文档/02.指南和概念/07.后台查询状态.html",redirect:"/pages/6c8d60/"},{name:"v-46f9d175",path:"/pages/2179dd/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-46f9d175").then(n)}},{path:"/pages/2179dd/index.html",redirect:"/pages/2179dd/"},{path:"/01.文档/02.指南和概念/11.分页查询.html",redirect:"/pages/2179dd/"},{name:"v-54ddb50d",path:"/pages/a17f72/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-54ddb50d").then(n)}},{path:"/pages/a17f72/index.html",redirect:"/pages/a17f72/"},{path:"/01.文档/02.指南和概念/13.初始化查询数据.html",redirect:"/pages/a17f72/"},{name:"v-2245dff0",path:"/pages/14ba95/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-2245dff0").then(n)}},{path:"/pages/14ba95/index.html",redirect:"/pages/14ba95/"},{path:"/01.文档/03.API参考/02.useQueries.html",redirect:"/pages/14ba95/"},{name:"v-2d9dc22e",path:"/pages/579fc0/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-2d9dc22e").then(n)}},{path:"/pages/579fc0/index.html",redirect:"/pages/579fc0/"},{path:"/01.文档/03.API参考/03.useInfiniteQuery.html",redirect:"/pages/579fc0/"},{name:"v-7f12c942",path:"/pages/c9540b/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-7f12c942").then(n)}},{path:"/pages/c9540b/index.html",redirect:"/pages/c9540b/"},{path:"/01.文档/03.API参考/01.useQuery.html",redirect:"/pages/c9540b/"},{name:"v-5776902a",path:"/pages/1c32fa/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-5776902a").then(n)}},{path:"/pages/1c32fa/index.html",redirect:"/pages/1c32fa/"},{path:"/01.文档/03.API参考/04.useMutation.html",redirect:"/pages/1c32fa/"},{name:"v-5cf913ea",path:"/pages/a75465/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-5cf913ea").then(n)}},{path:"/pages/a75465/index.html",redirect:"/pages/a75465/"},{path:"/01.文档/03.API参考/05.useIsFetching.html",redirect:"/pages/a75465/"},{name:"v-1868812c",path:"/pages/a861fb/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-1868812c").then(n)}},{path:"/pages/a861fb/index.html",redirect:"/pages/a861fb/"},{path:"/01.文档/03.API参考/07.QueryClient.html",redirect:"/pages/a861fb/"},{name:"v-77162b2a",path:"/pages/3ff973/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-77162b2a").then(n)}},{path:"/pages/3ff973/index.html",redirect:"/pages/3ff973/"},{path:"/01.文档/03.API参考/08.QueryClientProvider.html",redirect:"/pages/3ff973/"},{name:"v-5a22e16a",path:"/pages/3d7176/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-5a22e16a").then(n)}},{path:"/pages/3d7176/index.html",redirect:"/pages/3d7176/"},{path:"/01.文档/03.API参考/06.useIsMutating.html",redirect:"/pages/3d7176/"},{name:"v-833e7788",path:"/pages/ab0f39/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-833e7788").then(n)}},{path:"/pages/ab0f39/index.html",redirect:"/pages/ab0f39/"},{path:"/01.文档/03.API参考/09.useQueryClient.html",redirect:"/pages/ab0f39/"},{name:"v-4191778a",path:"/pages/0dc10f/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-4191778a").then(n)}},{path:"/pages/0dc10f/index.html",redirect:"/pages/0dc10f/"},{path:"/01.文档/03.API参考/12.QueryObserver.html",redirect:"/pages/0dc10f/"},{name:"v-0819964c",path:"/pages/652a78/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-0819964c").then(n)}},{path:"/pages/652a78/index.html",redirect:"/pages/652a78/"},{path:"/01.文档/03.API参考/10.QueryCache.html",redirect:"/pages/652a78/"},{name:"v-a9b3546c",path:"/pages/742846/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-a9b3546c").then(n)}},{path:"/pages/742846/index.html",redirect:"/pages/742846/"},{path:"/01.文档/03.API参考/11.MutationCache.html",redirect:"/pages/742846/"},{name:"v-3848fcaa",path:"/pages/630f72/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-3848fcaa").then(n)}},{path:"/pages/630f72/index.html",redirect:"/pages/630f72/"},{path:"/01.文档/03.API参考/13.infiniteQueryObserver.html",redirect:"/pages/630f72/"},{name:"v-054ae28a",path:"/pages/3b8175/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-054ae28a").then(n)}},{path:"/pages/3b8175/index.html",redirect:"/pages/3b8175/"},{path:"/01.文档/03.API参考/15.QueryErrorResetBoundary.html",redirect:"/pages/3b8175/"},{name:"v-4ba8376c",path:"/pages/f40633/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-4ba8376c").then(n)}},{path:"/pages/f40633/index.html",redirect:"/pages/f40633/"},{path:"/01.文档/03.API参考/14.QueriesObserver.html",redirect:"/pages/f40633/"},{name:"v-5f04cf24",path:"/pages/e801b7/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-5f04cf24").then(n)}},{path:"/pages/e801b7/index.html",redirect:"/pages/e801b7/"},{path:"/01.文档/03.API参考/17.FocusManager.html",redirect:"/pages/e801b7/"},{name:"v-22d42028",path:"/pages/b25a66/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-22d42028").then(n)}},{path:"/pages/b25a66/index.html",redirect:"/pages/b25a66/"},{path:"/01.文档/03.API参考/16.useQueryErrorResetBoundary.html",redirect:"/pages/b25a66/"},{name:"v-cb7d9a7c",path:"/blog/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-cb7d9a7c").then(n)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-1e079aca",path:"/pages/42488c/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-1e079aca").then(n)}},{path:"/pages/42488c/index.html",redirect:"/pages/42488c/"},{path:"/01.文档/03.API参考/18.OnlineManager.html",redirect:"/pages/42488c/"},{name:"v-f3679c2c",path:"/pages/52e8bd/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-f3679c2c").then(n)}},{path:"/pages/52e8bd/index.html",redirect:"/pages/52e8bd/"},{path:"/01.文档/03.API参考/19.hydration.html",redirect:"/pages/52e8bd/"},{name:"v-251cb4a4",path:"/",component:vu,beforeEnter:(e,t,n)=>{ls("Layout","v-251cb4a4").then(n)}},{path:"/index.html",redirect:"/"},{path:"*",component:vu}],qu={title:"React Query中文文档",description:"为TS/JS、React、Solid、Vue和Svelte提供强大的异步状态管理。",base:"/react-query-doc/",headTags:[["link",{rel:"icon",href:"/react-query-doc/img/favicons.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"安装",frontmatter:{title:"安装",date:"2023-03-25T22:59:03.000Z",permalink:"/pages/1ab0d6/"},regularPath:"/01.%E6%96%87%E6%A1%A3/01.%E5%85%A5%E9%97%A8/02.%E5%AE%89%E8%A3%85.html",relativePath:"01.文档/01.入门/02.安装.md",key:"v-a8c6d0c2",path:"/pages/1ab0d6/",headers:[{level:3,title:"NPM",slug:"npm",normalizedTitle:"npm",charIndex:12},{level:3,title:"内容分发网络",slug:"内容分发网络",normalizedTitle:"内容分发网络",charIndex:null},{level:3,title:"要求",slug:"要求",normalizedTitle:"要求",charIndex:null}],headersStr:"NPM 内容分发网络 要求",content:"# 安装\n\n你可以通过 NPM 安装 React Query，或者通过 unpkg.com 安装一个好的 ol'",normalizedContent:"# 安装\n\n你可以通过 npm 安装 react query，或者通过 unpkg.com 安装一个好的 ol'",charsets:{cjk:!0},lastUpdated:"2023/03/25, 23:44:17",lastUpdatedTimestamp:1679759057e3},{title:"Querys",frontmatter:{title:"Querys",date:"2023-03-27T22:40:41.000Z",permalink:"/pages/3e9b56/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/01.Querys.html",relativePath:"01.文档/02.指南和概念/01.Querys.md",key:"v-5c841446",path:"/pages/3e9b56/",headers:[{level:2,title:"查询基础",slug:"查询基础",normalizedTitle:"查询基础",charIndex:14},{level:3,title:"获取状态",slug:"获取状态",normalizedTitle:"获取状态",charIndex:1829},{level:3,title:"为什么是两个不同的州？",slug:"为什么是两个不同的州",normalizedTitle:"为什么是两个不同的州？",charIndex:2029},{level:2,title:"进一步阅读",slug:"进一步阅读",normalizedTitle:"进一步阅读",charIndex:2323}],headersStr:"查询基础 获取状态 为什么是两个不同的州？ 进一步阅读",content:"# Queries\n\n\n# 查询基础\n\n查询是对绑定到唯一键的异步数据源的声明性依赖。查询可以与任何基于 Promise 的方法（包括 GET 和 POST 方法）一起使用以从服务器获取数据。如果您的方法修改了服务器上的数据，我们建议改用 Mutations。\n\n要在您的组件或自定义挂钩中订阅查询，请至少调用 useQuery 挂钩：\n\n * 查询的唯一键\n * 返回承诺的函数：\n   * 解决数据，或\n   * 抛出错误\n\nimport { useQuery } from '@tanstack/react-query'\nfunction App() {  const info = useQuery({ queryKey: ['todos'], queryFn: fetchTodoList })}\n\n\n您提供的唯一密钥在内部用于在整个应用程序中重新获取、缓存和共享您的查询。\n\nuseQuery 返回的查询结果包含有关模板化和任何其他数据用法所需的查询的所有信息：\n\nconst result = useQuery({ queryKey: ['todos'], queryFn: fetchTodoList })\n\n\n结果对象包含一些非常重要的状态，您需要了解这些状态才能提高工作效率。查询在任何给定时刻只能处于以下状态之一：\n\n * isLoading or status === 'loading' - 查询还没有数据\n * isError or status === 'error' - 查询遇到错误\n * isSuccess or status === 'success' - 查询成功，数据可用\n\n除了这些主要状态之外，还可以根据查询的状态获得更多信息：\n\n * error - 如果查询处于 isError 状态，则错误可通过 error 属性获得。\n * data - 如果查询处于 isSuccess 状态，则数据可通过 data 属性获得。\n\n对于大多数查询，检查 isLoading 状态通常就足够了，然后是 isError 状态，最后假设数据可用并呈现成功状态：\n\nfunction Todos() {  const { isLoading, isError, data, error } = useQuery({    queryKey: ['todos'],    queryFn: fetchTodoList,  })\n  if (isLoading) {    return <span>Loading...</span>  }\n  if (isError) {    return <span>Error: {error.message}</span>  }\n  // We can assume by this point that `isSuccess === true`  return (    <ul>      {data.map((todo) => (        <li key={todo.id}>{todo.title}</li>      ))}    </ul>  )}\n\n\n如果布尔值不是你的菜，你也可以随时使用状态状态：\n\nfunction Todos() {  const { status, data, error } = useQuery({    queryKey: ['todos'],    queryFn: fetchTodoList,  })\n  if (status === 'loading') {    return <span>Loading...</span>  }\n  if (status === 'error') {    return <span>Error: {error.message}</span>  }\n  // also status === 'success', but \"else\" logic works, too  return (    <ul>      {data.map((todo) => (        <li key={todo.id}>{todo.title}</li>      ))}    </ul>  )}\n\n\n如果您在访问数据之前检查了加载和错误，TypeScript 也会正确地缩小数据类型。\n\n\n# 获取状态\n\n除了状态字段，结果对象，您还将获得一个额外的 fetchStatus 属性，具有以下选项：\n\n * fetchStatus === 'fetching' - 查询当前正在获取。\n * fetchStatus === 'paused' - 查询想要获取，但已暂停。在网络模式指南中阅读更多相关信息。\n * fetchStatus === 'idle' - 查询目前没有做任何事情。\n\n\n# 为什么是两个不同的州？\n\n后台重新获取和 stale-while-revalidate 逻辑使 status 和 fetchStatus 的所有组合成为可能。例如：\n\n * 成功状态的查询通常处于空闲 fetchStatus，但如果发生后台重新获取，它也可能处于获取状态。\n * 挂载但没有数据的查询通常处于加载状态和获取 fetchStatus，但如果没有网络连接，它也可能会暂停。\n\n因此请记住，查询可以处于加载状态而无需实际获取数据。根据经验：\n\n * 状态提供有关数据的信息：我们有没有？\n * fetchStatus 提供有关 queryFn 的信息：它是否正在运行？\n\n\n# 进一步阅读\n\n有关执行状态检查的替代方法，请查看社区资源。\n\n在 GitHub 上编辑",normalizedContent:"# queries\n\n\n# 查询基础\n\n查询是对绑定到唯一键的异步数据源的声明性依赖。查询可以与任何基于 promise 的方法（包括 get 和 post 方法）一起使用以从服务器获取数据。如果您的方法修改了服务器上的数据，我们建议改用 mutations。\n\n要在您的组件或自定义挂钩中订阅查询，请至少调用 usequery 挂钩：\n\n * 查询的唯一键\n * 返回承诺的函数：\n   * 解决数据，或\n   * 抛出错误\n\nimport { usequery } from '@tanstack/react-query'\nfunction app() {  const info = usequery({ querykey: ['todos'], queryfn: fetchtodolist })}\n\n\n您提供的唯一密钥在内部用于在整个应用程序中重新获取、缓存和共享您的查询。\n\nusequery 返回的查询结果包含有关模板化和任何其他数据用法所需的查询的所有信息：\n\nconst result = usequery({ querykey: ['todos'], queryfn: fetchtodolist })\n\n\n结果对象包含一些非常重要的状态，您需要了解这些状态才能提高工作效率。查询在任何给定时刻只能处于以下状态之一：\n\n * isloading or status === 'loading' - 查询还没有数据\n * iserror or status === 'error' - 查询遇到错误\n * issuccess or status === 'success' - 查询成功，数据可用\n\n除了这些主要状态之外，还可以根据查询的状态获得更多信息：\n\n * error - 如果查询处于 iserror 状态，则错误可通过 error 属性获得。\n * data - 如果查询处于 issuccess 状态，则数据可通过 data 属性获得。\n\n对于大多数查询，检查 isloading 状态通常就足够了，然后是 iserror 状态，最后假设数据可用并呈现成功状态：\n\nfunction todos() {  const { isloading, iserror, data, error } = usequery({    querykey: ['todos'],    queryfn: fetchtodolist,  })\n  if (isloading) {    return <span>loading...</span>  }\n  if (iserror) {    return <span>error: {error.message}</span>  }\n  // we can assume by this point that `issuccess === true`  return (    <ul>      {data.map((todo) => (        <li key={todo.id}>{todo.title}</li>      ))}    </ul>  )}\n\n\n如果布尔值不是你的菜，你也可以随时使用状态状态：\n\nfunction todos() {  const { status, data, error } = usequery({    querykey: ['todos'],    queryfn: fetchtodolist,  })\n  if (status === 'loading') {    return <span>loading...</span>  }\n  if (status === 'error') {    return <span>error: {error.message}</span>  }\n  // also status === 'success', but \"else\" logic works, too  return (    <ul>      {data.map((todo) => (        <li key={todo.id}>{todo.title}</li>      ))}    </ul>  )}\n\n\n如果您在访问数据之前检查了加载和错误，typescript 也会正确地缩小数据类型。\n\n\n# 获取状态\n\n除了状态字段，结果对象，您还将获得一个额外的 fetchstatus 属性，具有以下选项：\n\n * fetchstatus === 'fetching' - 查询当前正在获取。\n * fetchstatus === 'paused' - 查询想要获取，但已暂停。在网络模式指南中阅读更多相关信息。\n * fetchstatus === 'idle' - 查询目前没有做任何事情。\n\n\n# 为什么是两个不同的州？\n\n后台重新获取和 stale-while-revalidate 逻辑使 status 和 fetchstatus 的所有组合成为可能。例如：\n\n * 成功状态的查询通常处于空闲 fetchstatus，但如果发生后台重新获取，它也可能处于获取状态。\n * 挂载但没有数据的查询通常处于加载状态和获取 fetchstatus，但如果没有网络连接，它也可能会暂停。\n\n因此请记住，查询可以处于加载状态而无需实际获取数据。根据经验：\n\n * 状态提供有关数据的信息：我们有没有？\n * fetchstatus 提供有关 queryfn 的信息：它是否正在运行？\n\n\n# 进一步阅读\n\n有关执行状态检查的替代方法，请查看社区资源。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"Query Keys",frontmatter:{title:"Query Keys",date:"2023-03-27T22:43:49.000Z",permalink:"/pages/0b320a/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/02.Query%20Keys.html",relativePath:"01.文档/02.指南和概念/02.Query Keys.md",key:"v-08eaa20c",path:"/pages/0b320a/",headers:[{level:2,title:"简单查询键",slug:"简单查询键",normalizedTitle:"简单查询键",charIndex:143},{level:2,title:"带变量的数组键",slug:"带变量的数组键",normalizedTitle:"带变量的数组键",charIndex:431},{level:2,title:"查询键是确定性散列的！",slug:"查询键是确定性散列的",normalizedTitle:"查询键是确定性散列的！",charIndex:926},{level:2,title:"如果您的查询函数依赖于一个变量，请将其包含在您的查询键中",slug:"如果您的查询函数依赖于一个变量-请将其包含在您的查询键中",normalizedTitle:"如果您的查询函数依赖于一个变量，请将其包含在您的查询键中",charIndex:1462},{level:2,title:"延伸阅读",slug:"延伸阅读",normalizedTitle:"延伸阅读",charIndex:1829}],headersStr:"简单查询键 带变量的数组键 查询键是确定性散列的！ 如果您的查询函数依赖于一个变量，请将其包含在您的查询键中 延伸阅读",content:"# Query Keys\n\nTanStack Query 的核心是基于查询键为您管理查询缓存。查询键必须是顶层的数组，并且可以像具有单个字符串的数组一样简单，也可以像包含许多字符串和嵌套对象的数组一样复杂。只要查询键是可序列化的，并且对于查询数据是唯一的，就可以使用它！\n\n[\n\n\n# 简单查询键\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#simple-query-keys)\n\n键的最简单形式是具有常量值的数组。此格式适用于：\n\n * 通用列表/索引资源\n * 非分层资源\n\n// A list of todosuseQuery({ queryKey: ['todos'], ... })\n// Something else, whatever!useQuery({ queryKey: ['something', 'special'], ... })\n\n\n[\n\n\n# 带变量的数组键\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#array-keys-with-variables)\n\n当查询需要更多信息来唯一地描述其数据时，您可以使用带有字符串和任意数量的可序列化对象的数组来描述它。这对于：\n\n * 分层或嵌套资源\n   * 传递 ID、索引或其他原语来唯一标识项目是很常见的\n * 带有附加参数的查询\n   * 传递附加选项的对象很常见\n\n// An individual todouseQuery({ queryKey: ['todo', 5], ... })\n// An individual todo in a \"preview\" formatuseQuery({ queryKey: ['todo', 5, { preview: true }], ...})\n// A list of todos that are \"done\"useQuery({ queryKey: ['todos', { type: 'done' }], ... })\n\n\n[\n\n\n# 查询键是确定性散列的！\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#query-keys-are-hashed-deterministically)\n\n这意味着无论对象中键的顺序如何，以下所有查询都被视为相等：\n\nuseQuery({ queryKey: ['todos', { status, page }], ... })useQuery({ queryKey: ['todos', { page, status }], ...})useQuery({ queryKey: ['todos', { page, status, other: undefined }], ... })\n\n\n但是，以下查询键不相等。数组项顺序很重要！\n\nuseQuery({ queryKey: ['todos', status, page], ... })useQuery({ queryKey: ['todos', page, status], ...})useQuery({ queryKey: ['todos', undefined, page, status], ...})\n\n\n[\n\n\n# 如果您的查询函数依赖于一个变量，请将其包含在您的查询键中\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#if-your-query-function-depends-on-a-variable-include-it-in-your-query-key)\n\n由于查询键唯一地描述了它们正在获取的数据，因此它们应该包括您在查询函数中使用的任何发生变化的变量。例如：\n\nfunction Todos({ todoId }) {  const result = useQuery({    queryKey: ['todos', todoId],    queryFn: () => fetchTodoById(todoId),  })}\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#further-reading)\n\n有关在大型应用程序中组织查询键的技巧，请查看 Effective React Query Keys 并检查社区资源中的查询键工厂包。\n\n在 GitHub 上编辑",normalizedContent:"# query keys\n\ntanstack query 的核心是基于查询键为您管理查询缓存。查询键必须是顶层的数组，并且可以像具有单个字符串的数组一样简单，也可以像包含许多字符串和嵌套对象的数组一样复杂。只要查询键是可序列化的，并且对于查询数据是唯一的，就可以使用它！\n\n[\n\n\n# 简单查询键\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#simple-query-keys)\n\n键的最简单形式是具有常量值的数组。此格式适用于：\n\n * 通用列表/索引资源\n * 非分层资源\n\n// a list of todosusequery({ querykey: ['todos'], ... })\n// something else, whatever!usequery({ querykey: ['something', 'special'], ... })\n\n\n[\n\n\n# 带变量的数组键\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#array-keys-with-variables)\n\n当查询需要更多信息来唯一地描述其数据时，您可以使用带有字符串和任意数量的可序列化对象的数组来描述它。这对于：\n\n * 分层或嵌套资源\n   * 传递 id、索引或其他原语来唯一标识项目是很常见的\n * 带有附加参数的查询\n   * 传递附加选项的对象很常见\n\n// an individual todousequery({ querykey: ['todo', 5], ... })\n// an individual todo in a \"preview\" formatusequery({ querykey: ['todo', 5, { preview: true }], ...})\n// a list of todos that are \"done\"usequery({ querykey: ['todos', { type: 'done' }], ... })\n\n\n[\n\n\n# 查询键是确定性散列的！\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#query-keys-are-hashed-deterministically)\n\n这意味着无论对象中键的顺序如何，以下所有查询都被视为相等：\n\nusequery({ querykey: ['todos', { status, page }], ... })usequery({ querykey: ['todos', { page, status }], ...})usequery({ querykey: ['todos', { page, status, other: undefined }], ... })\n\n\n但是，以下查询键不相等。数组项顺序很重要！\n\nusequery({ querykey: ['todos', status, page], ... })usequery({ querykey: ['todos', page, status], ...})usequery({ querykey: ['todos', undefined, page, status], ...})\n\n\n[\n\n\n# 如果您的查询函数依赖于一个变量，请将其包含在您的查询键中\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#if-your-query-function-depends-on-a-variable-include-it-in-your-query-key)\n\n由于查询键唯一地描述了它们正在获取的数据，因此它们应该包括您在查询函数中使用的任何发生变化的变量。例如：\n\nfunction todos({ todoid }) {  const result = usequery({    querykey: ['todos', todoid],    queryfn: () => fetchtodobyid(todoid),  })}\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/guides/query-keys#further-reading)\n\n有关在大型应用程序中组织查询键的技巧，请查看 effective react query keys 并检查社区资源中的查询键工厂包。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"快速开始",frontmatter:{title:"快速开始",date:"2023-03-25T22:59:15.000Z",permalink:"/pages/c31375/"},regularPath:"/01.%E6%96%87%E6%A1%A3/01.%E5%85%A5%E9%97%A8/03.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html",relativePath:"01.文档/01.入门/03.快速开始.md",key:"v-0c84a61a",path:"/pages/c31375/",headersStr:null,content:"# 快速开始\n\n此代码片段非常简要地说明了 React Query 的 3 个核心概念：\n\n * Queries\n * Mutations\n * Query Invalidation\n\n如果您正在寻找功能齐全的示例，请查看我们的简单 codesandbox 示例\n\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  QueryClient,\n  QueryClientProvider,\n} from '@tanstack/react-query'\nimport { getTodos, postTodo } from '../my-api'\n\n// Create a client\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    // Provide the client to your App\n    <QueryClientProvider client={queryClient}>\n      <Todos />\n    </QueryClientProvider>\n  )\n}\n\nfunction Todos() {\n  // Access the client\n  const queryClient = useQueryClient()\n\n  // Queries\n  const query = useQuery({ queryKey: ['todos'], queryFn: getTodos })\n\n  // Mutations\n  const mutation = useMutation({\n    mutationFn: postTodo,\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    },\n  })\n\n  return (\n    <div>\n      <ul>\n        {query.data?.map((todo) => (\n          <li key={todo.id}>{todo.title}</li>\n        ))}\n      </ul>\n\n      <button\n        onClick={() => {\n          mutation.mutate({\n            id: Date.now(),\n            title: 'Do Laundry',\n          })\n        }}\n      >\n        Add Todo\n      </button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById('root'))\n\n\n这三个概念构成了 React Query 的大部分核心功能。文档的下一部分将详细介绍这些核心概念中的每一个。\n\n在 GitHub 上编辑",normalizedContent:"# 快速开始\n\n此代码片段非常简要地说明了 react query 的 3 个核心概念：\n\n * queries\n * mutations\n * query invalidation\n\n如果您正在寻找功能齐全的示例，请查看我们的简单 codesandbox 示例\n\nimport {\n  usequery,\n  usemutation,\n  usequeryclient,\n  queryclient,\n  queryclientprovider,\n} from '@tanstack/react-query'\nimport { gettodos, posttodo } from '../my-api'\n\n// create a client\nconst queryclient = new queryclient()\n\nfunction app() {\n  return (\n    // provide the client to your app\n    <queryclientprovider client={queryclient}>\n      <todos />\n    </queryclientprovider>\n  )\n}\n\nfunction todos() {\n  // access the client\n  const queryclient = usequeryclient()\n\n  // queries\n  const query = usequery({ querykey: ['todos'], queryfn: gettodos })\n\n  // mutations\n  const mutation = usemutation({\n    mutationfn: posttodo,\n    onsuccess: () => {\n      // invalidate and refetch\n      queryclient.invalidatequeries({ querykey: ['todos'] })\n    },\n  })\n\n  return (\n    <div>\n      <ul>\n        {query.data?.map((todo) => (\n          <li key={todo.id}>{todo.title}</li>\n        ))}\n      </ul>\n\n      <button\n        onclick={() => {\n          mutation.mutate({\n            id: date.now(),\n            title: 'do laundry',\n          })\n        }}\n      >\n        add todo\n      </button>\n    </div>\n  )\n}\n\nrender(<app />, document.getelementbyid('root'))\n\n\n这三个概念构成了 react query 的大部分核心功能。文档的下一部分将详细介绍这些核心概念中的每一个。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"概述",frontmatter:{title:"概述",date:"2023-03-25T22:58:13.000Z",permalink:"/pages/70bdff/"},regularPath:"/01.%E6%96%87%E6%A1%A3/01.%E5%85%A5%E9%97%A8/01.%E6%A6%82%E8%BF%B0.html",relativePath:"01.文档/01.入门/01.概述.md",key:"v-0690f45b",path:"/pages/70bdff/",headers:[{level:2,title:"动因",slug:"动因",normalizedTitle:"动因",charIndex:103},{level:2,title:"说得够多了，给我看一些代码吧",slug:"说得够多了-给我看一些代码吧",normalizedTitle:"说得够多了，给我看一些代码吧",charIndex:1036},{level:2,title:"你说服了我，那么现在怎么办？",slug:"你说服了我-那么现在怎么办",normalizedTitle:"你说服了我，那么现在怎么办？",charIndex:1985}],headersStr:"动因 说得够多了，给我看一些代码吧 你说服了我，那么现在怎么办？",content:"TanStack Query（FKA React Query）经常被描述为网络应用程序中缺少的数据获取库，但在更多的技术术语中，它使你的网络应用程序中获取、缓存、同步和更新服务器状态变得轻而易举。\n\n\n# 动因\n\n大多数核心的Web框架都没有以整体的方式来获取或更新数据的意见。正因为如此，开发者最终要么建立元框架来封装关于数据获取的严格意见，要么发明他们自己的获取数据的方式。这通常意味着将基于组件的状态和副作用拼凑在一起，或者使用更通用的状态管理库来存储和提供整个应用程序的异步数据。\n\n虽然大多数传统的状态管理库非常适合处理客户端状态，但它们在处理异步或服务器状态时并不那么出色。这是因为服务器状态是完全不同的。首先，服务器状态：\n\n * 被远程保存在一个你不控制或不拥有的地方\n * 需要异步的API来获取和更新\n * 意味着共享所有权，可以在你不知情的情况下被其他人改变\n * 如果你不小心，有可能在你的应用程序中成为 \"过时的\"。\n\n一旦你掌握了应用程序中服务器状态的本质，甚至更多的挑战将随着你的发展而出现，例如：\n\n * 缓存......（可能是编程中最难做到的事情）\n * 将对同一数据的多个请求分解为一个请求\n * 在后台更新 \"过时的 \"数据\n * 知道数据何时 \"过期\"。\n * 尽可能快地反映数据的更新\n * 性能优化，如分页和懒惰加载数据\n * 管理内存和服务器状态的垃圾收集\n * 用结构共享来记忆查询结果\n\n如果你没有被这个列表所淹没，那么这一定意味着你可能已经解决了所有的服务器状态问题，并且应该得到一个奖项。然而，如果你像绝大多数人一样，你要么还没有解决所有这些挑战，要么还没有解决大部分挑战，而我们只是触及到了表面而已\n\nReact Query是管理服务器状态的最佳库之一。它开箱即用，零配置，效果惊人，而且可以随着你的应用程序的增长而根据你的喜好定制。\n\nReact查询允许你击败并克服服务器状态的棘手挑战和障碍，在你的应用数据开始控制你之前控制它。\n\n在更多的技术方面，React Query可能会：\n\n * 帮助你从你的应用程序中删除许多复杂的和被误解的代码，只用少数几行React Query逻辑来代替。\n * 使你的应用程序更易维护，更容易建立新的功能，而不必担心新的服务器状态数据源的接线问题\n * 通过使你的应用程序感觉比以前更快、更灵敏，对你的终端用户产生直接影响。\n * 潜在地帮助你节省带宽和提高内存性能\n\n\n# 说得够多了，给我看一些代码吧\n\n在下面的例子中，你可以看到React Query以其最基本和最简单的形式被用来获取React Query GitHub项目本身的GitHub统计信息：\n\n在CodeSandbox中打开\n\ntsx\n\nimport {  QueryClient,  QueryClientProvider,  useQuery,} from '@tanstack/react-query'\nconst queryClient = new QueryClient()\nexport default function App() {  return (    <QueryClientProvider client={queryClient}>      <Example />    </QueryClientProvider>  )}\nfunction Example() {  const { isLoading, error, data } = useQuery({    queryKey: ['repoData'],    queryFn: () =>      fetch('https://api.github.com/repos/tannerlinsley/react-query').then(        (res) => res.json(),      ),  })\n  if (isLoading) return 'Loading...'\n  if (error) return 'An error has occurred: ' + error.message\n  return (    <div>      <h1>{data.name}</h1>      <p>{data.description}</p>      <strong>👀 {data.subscribers_count}</strong>{' '}      <strong>✨ {data.stargazers_count}</strong>{' '}      <strong>🍴 {data.forks_count}</strong>    </div>  )}\n\n\n\n# 你说服了我，那么现在怎么办？\n\n * 考虑参加官方的React Query课程（或者为你的整个团队购买它！）。\n * 以你自己的节奏来学习React Query，我们有非常详尽的演练指南和API参考。",normalizedContent:"tanstack query（fka react query）经常被描述为网络应用程序中缺少的数据获取库，但在更多的技术术语中，它使你的网络应用程序中获取、缓存、同步和更新服务器状态变得轻而易举。\n\n\n# 动因\n\n大多数核心的web框架都没有以整体的方式来获取或更新数据的意见。正因为如此，开发者最终要么建立元框架来封装关于数据获取的严格意见，要么发明他们自己的获取数据的方式。这通常意味着将基于组件的状态和副作用拼凑在一起，或者使用更通用的状态管理库来存储和提供整个应用程序的异步数据。\n\n虽然大多数传统的状态管理库非常适合处理客户端状态，但它们在处理异步或服务器状态时并不那么出色。这是因为服务器状态是完全不同的。首先，服务器状态：\n\n * 被远程保存在一个你不控制或不拥有的地方\n * 需要异步的api来获取和更新\n * 意味着共享所有权，可以在你不知情的情况下被其他人改变\n * 如果你不小心，有可能在你的应用程序中成为 \"过时的\"。\n\n一旦你掌握了应用程序中服务器状态的本质，甚至更多的挑战将随着你的发展而出现，例如：\n\n * 缓存......（可能是编程中最难做到的事情）\n * 将对同一数据的多个请求分解为一个请求\n * 在后台更新 \"过时的 \"数据\n * 知道数据何时 \"过期\"。\n * 尽可能快地反映数据的更新\n * 性能优化，如分页和懒惰加载数据\n * 管理内存和服务器状态的垃圾收集\n * 用结构共享来记忆查询结果\n\n如果你没有被这个列表所淹没，那么这一定意味着你可能已经解决了所有的服务器状态问题，并且应该得到一个奖项。然而，如果你像绝大多数人一样，你要么还没有解决所有这些挑战，要么还没有解决大部分挑战，而我们只是触及到了表面而已\n\nreact query是管理服务器状态的最佳库之一。它开箱即用，零配置，效果惊人，而且可以随着你的应用程序的增长而根据你的喜好定制。\n\nreact查询允许你击败并克服服务器状态的棘手挑战和障碍，在你的应用数据开始控制你之前控制它。\n\n在更多的技术方面，react query可能会：\n\n * 帮助你从你的应用程序中删除许多复杂的和被误解的代码，只用少数几行react query逻辑来代替。\n * 使你的应用程序更易维护，更容易建立新的功能，而不必担心新的服务器状态数据源的接线问题\n * 通过使你的应用程序感觉比以前更快、更灵敏，对你的终端用户产生直接影响。\n * 潜在地帮助你节省带宽和提高内存性能\n\n\n# 说得够多了，给我看一些代码吧\n\n在下面的例子中，你可以看到react query以其最基本和最简单的形式被用来获取react query github项目本身的github统计信息：\n\n在codesandbox中打开\n\ntsx\n\nimport {  queryclient,  queryclientprovider,  usequery,} from '@tanstack/react-query'\nconst queryclient = new queryclient()\nexport default function app() {  return (    <queryclientprovider client={queryclient}>      <example />    </queryclientprovider>  )}\nfunction example() {  const { isloading, error, data } = usequery({    querykey: ['repodata'],    queryfn: () =>      fetch('https://api.github.com/repos/tannerlinsley/react-query').then(        (res) => res.json(),      ),  })\n  if (isloading) return 'loading...'\n  if (error) return 'an error has occurred: ' + error.message\n  return (    <div>      <h1>{data.name}</h1>      <p>{data.description}</p>      <strong>👀 {data.subscribers_count}</strong>{' '}      <strong>✨ {data.stargazers_count}</strong>{' '}      <strong>🍴 {data.forks_count}</strong>    </div>  )}\n\n\n\n# 你说服了我，那么现在怎么办？\n\n * 考虑参加官方的react query课程（或者为你的整个团队购买它！）。\n * 以你自己的节奏来学习react query，我们有非常详尽的演练指南和api参考。",charsets:{cjk:!0},lastUpdated:"2023/03/25, 23:44:17",lastUpdatedTimestamp:1679759057e3},{title:"Network Mode",frontmatter:{title:"Network Mode",date:"2023-03-27T22:46:27.000Z",permalink:"/pages/b75375/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/04.Network%20Mode.html",relativePath:"01.文档/02.指南和概念/04.Network Mode.md",key:"v-73464cac",path:"/pages/b75375/",headers:[{level:2,title:"网络方式：在线",slug:"网络方式-在线",normalizedTitle:"网络方式：在线",charIndex:176},{level:2,title:"网络模式：始终",slug:"网络模式-始终",normalizedTitle:"网络模式：始终",charIndex:759},{level:2,title:"网络模式：offlineFirst",slug:"网络模式-offlinefirst",normalizedTitle:"网络模式：offlinefirst",charIndex:1155},{level:2,title:"开发者工具",slug:"开发者工具",normalizedTitle:"开发者工具",charIndex:1507},{level:2,title:"签名",slug:"签名",normalizedTitle:"签名",charIndex:1737}],headersStr:"网络方式：在线 网络模式：始终 网络模式：offlineFirst 开发者工具 签名",content:"# Network Mode\n\nTanStack Query 提供了三种不同的网络模式来区分在没有网络连接的情况下 Queries 和 Mutations 的行为方式。可以为每个查询/突变单独设置此模式，或通过查询/突变默认值全局设置。\n\n由于 TanStack Query 最常用于结合数据获取库进行数据获取，因此默认网络模式为在线。\n\n[\n\n\n# 网络方式：在线\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-online)\n\n在这种模式下，除非您有网络连接，否则不会触发查询和变更。这是默认模式。如果为查询启动了提取，它将始终保持在由于没有网络连接而无法进行提取时所处的状态（加载、错误、成功）。但是，还会额外公开 fetchStatus。这可以是：\n\n * 获取：queryFn 确实在执行 - 请求正在进行中。\n * 暂停：查询未执行 - 暂停，直到您再次建立连接\n * 空闲：查询未获取且未暂停\n\n标志 isFetching 和 isPaused 派生自此状态并为方便起见而公开。\n\n> 请记住，检查加载状态可能不足以显示加载微调器。查询可以处于 state: 'loading'，但 fetchStatus: 'paused' 如果它们是第一次安装，并且您没有网络连接。\n\n如果一个查询因为你在线而运行，但是你在获取仍在进行时离线，TanStack Query 也会暂停重试机制。一旦您重新获得网络连接，暂停的查询将继续运行。这独立于 refetchOnReconnect（在此模式下也默认为 true），因为它不是重新获取，而是继续。如果查询在此期间被取消，则不会继续。\n\n[\n\n\n# 网络模式：始终\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-always)\n\n在这种模式下，TanStack Query 将始终获取并忽略在线/离线状态。如果您在不需要活动网络连接来使查询工作的环境中使用 TanStack 查询，这可能是您想要选择的模式 - 例如如果您只是从 AsyncStorage 读取数据，或者您只是想从 queryFn 返回 Promise.resolve(5)。\n\n * 查询永远不会因为您没有网络连接而暂停。\n * 重试也不会暂停 - 如果失败，您的查询将进入错误状态。\n * refetchOnReconnect 在此模式下默认为 false，因为重新连接到网络不再是应重新获取陈旧查询的良好指标。如果需要，您仍然可以打开它。\n\n[\n\n\n# 网络模式：offlineFirst\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-offlinefirst)\n\n此模式是前两个选项之间的中间地带，其中 TanStack Query 将运行 queryFn 一次，但随后暂停重试。如果您有一个 serviceWorker 可以像在离线优先 PWA 中那样拦截缓存 请求，或者如果您通过 Cache-Control 标头使用 HTTP 缓存，这将非常方便。\n\n在这些情况下，第一次提取可能会成功，因为它来自离线存储/缓存。但是，如果存在缓存未命中，网络请求将发出并失败，在这种情况下，此模式的行为类似于在线查询 - 暂停重试。\n\n[\n\n\n# 开发者工具\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#devtools)\n\nTanStack Query Devtools 将在暂停状态下显示查询，如果它们正在获取，但没有网络连接。还有一个用于模拟离线行为的切换按钮。请注意，此按钮实际上不会干扰您的网络连接（您可以在浏览器开发者工具中这样做），但它会将 OnlineManager 设置为离线状态。\n\n[\n\n\n# 签名\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#signature)\n\n * 网络模式：'在线' | '总是' | '离线优先'\n   * 选修的\n   * 默认为“在线”\n\n在 GitHub 上编辑",normalizedContent:"# network mode\n\ntanstack query 提供了三种不同的网络模式来区分在没有网络连接的情况下 queries 和 mutations 的行为方式。可以为每个查询/突变单独设置此模式，或通过查询/突变默认值全局设置。\n\n由于 tanstack query 最常用于结合数据获取库进行数据获取，因此默认网络模式为在线。\n\n[\n\n\n# 网络方式：在线\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-online)\n\n在这种模式下，除非您有网络连接，否则不会触发查询和变更。这是默认模式。如果为查询启动了提取，它将始终保持在由于没有网络连接而无法进行提取时所处的状态（加载、错误、成功）。但是，还会额外公开 fetchstatus。这可以是：\n\n * 获取：queryfn 确实在执行 - 请求正在进行中。\n * 暂停：查询未执行 - 暂停，直到您再次建立连接\n * 空闲：查询未获取且未暂停\n\n标志 isfetching 和 ispaused 派生自此状态并为方便起见而公开。\n\n> 请记住，检查加载状态可能不足以显示加载微调器。查询可以处于 state: 'loading'，但 fetchstatus: 'paused' 如果它们是第一次安装，并且您没有网络连接。\n\n如果一个查询因为你在线而运行，但是你在获取仍在进行时离线，tanstack query 也会暂停重试机制。一旦您重新获得网络连接，暂停的查询将继续运行。这独立于 refetchonreconnect（在此模式下也默认为 true），因为它不是重新获取，而是继续。如果查询在此期间被取消，则不会继续。\n\n[\n\n\n# 网络模式：始终\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-always)\n\n在这种模式下，tanstack query 将始终获取并忽略在线/离线状态。如果您在不需要活动网络连接来使查询工作的环境中使用 tanstack 查询，这可能是您想要选择的模式 - 例如如果您只是从 asyncstorage 读取数据，或者您只是想从 queryfn 返回 promise.resolve(5)。\n\n * 查询永远不会因为您没有网络连接而暂停。\n * 重试也不会暂停 - 如果失败，您的查询将进入错误状态。\n * refetchonreconnect 在此模式下默认为 false，因为重新连接到网络不再是应重新获取陈旧查询的良好指标。如果需要，您仍然可以打开它。\n\n[\n\n\n# 网络模式：offlinefirst\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#network-mode-offlinefirst)\n\n此模式是前两个选项之间的中间地带，其中 tanstack query 将运行 queryfn 一次，但随后暂停重试。如果您有一个 serviceworker 可以像在离线优先 pwa 中那样拦截缓存 请求，或者如果您通过 cache-control 标头使用 http 缓存，这将非常方便。\n\n在这些情况下，第一次提取可能会成功，因为它来自离线存储/缓存。但是，如果存在缓存未命中，网络请求将发出并失败，在这种情况下，此模式的行为类似于在线查询 - 暂停重试。\n\n[\n\n\n# 开发者工具\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#devtools)\n\ntanstack query devtools 将在暂停状态下显示查询，如果它们正在获取，但没有网络连接。还有一个用于模拟离线行为的切换按钮。请注意，此按钮实际上不会干扰您的网络连接（您可以在浏览器开发者工具中这样做），但它会将 onlinemanager 设置为离线状态。\n\n[\n\n\n# 签名\n\n](https://tanstack.com/query/latest/docs/react/guides/network-mode#signature)\n\n * 网络模式：'在线' | '总是' | '离线优先'\n   * 选修的\n   * 默认为“在线”\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"Query Function",frontmatter:{title:"Query Function",date:"2023-03-27T22:44:21.000Z",permalink:"/pages/4dbca6/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/03.Query%20Function.html",relativePath:"01.文档/02.指南和概念/03.Query Function.md",key:"v-492159b4",path:"/pages/4dbca6/",headers:[{level:2,title:"处理和抛出错误",slug:"处理和抛出错误",normalizedTitle:"处理和抛出错误",charIndex:448},{level:2,title:"与 fetch 和其他默认不抛出的客户端一起使用",slug:"与-fetch-和其他默认不抛出的客户端一起使用",normalizedTitle:"与 fetch 和其他默认不抛出的客户端一起使用",charIndex:902},{level:2,title:"查询函数变量",slug:"查询函数变量",normalizedTitle:"查询函数变量",charIndex:1435},{level:3,title:"查询函数上下文",slug:"查询函数上下文",normalizedTitle:"查询函数上下文",charIndex:1953}],headersStr:"处理和抛出错误 与 fetch 和其他默认不抛出的客户端一起使用 查询函数变量 查询函数上下文",content:"# Query Functions\n\n查询函数实际上可以是任何返回承诺的函数。返回的承诺应该解析数据或抛出错误。\n\n以下所有都是有效的查询函数配置：\n\nuseQuery({ queryKey: ['todos'], queryFn: fetchAllTodos })useQuery({ queryKey: ['todos', todoId], queryFn: () => fetchTodoById(todoId) })useQuery({  queryKey: ['todos', todoId],  queryFn: async () => {    const data = await fetchTodoById(todoId)    return data  },})useQuery({  queryKey: ['todos', todoId],  queryFn: ({ queryKey }) => fetchTodoById(queryKey[1]),})\n\n\n[\n\n\n# 处理和抛出错误\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#handling-and-throwing-errors)\n\n为了让 TanStack Query 确定查询出错，查询函数必须抛出或返回一个被拒绝的 Promise。查询函数中抛出的任何错误都将保留在查询的错误状态上。\n\nconst { error } = useQuery({  queryKey: ['todos', todoId],  queryFn: async () => {    if (somethingGoesWrong) {      throw new Error('Oh no!')    }    if (somethingElseGoesWrong) {      return Promise.reject(new Error('Oh no!'))    }\n    return data  },})\n\n\n[\n\n\n# 与 fetch 和其他默认不抛出的客户端一起使用\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#usage-with-fetch-and-other-clients-that-do-not-throw-by-default)\n\n虽然大多数实用程序（如 axios 或 graphql-request）会自动为不成功的 HTTP 调用抛出错误，但某些实用程序（如 fetch）默认情况下不会抛出错误。如果是这样的话，你需要自己扔掉它们。这是使用流行的 fetch API 执行此操作的简单方法：\n\nuseQuery({  queryKey: ['todos', todoId],  queryFn: async () => {    const response = await fetch('/todos/' + todoId)    if (!response.ok) {      throw new Error('Network response was not ok')    }    return response.json()  },})\n\n\n[\n\n\n# 查询函数变量\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#query-function-variables)\n\n查询键不仅用于唯一标识您正在获取的数据，还可以作为 QueryFunctionContext 的一部分方便地传递到您的查询函数中。虽然并不总是必要的，但这使得在需要时提取查询函数成为可能：\n\nfunction Todos({ status, page }) {  const result = useQuery({    queryKey: ['todos', { status, page }],    queryFn: fetchTodoList,  })}\n// Access the key, status and page variables in your query function!function fetchTodoList({ queryKey }) {  const [_key, { status, page }] = queryKey  return new Promise()}\n\n\n[\n\n\n# 查询函数上下文\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#queryfunctioncontext)\n\nQueryFunctionContext 是传递给每个查询函数的对象。它包括：\n\n * queryKey: QueryKey: 查询键\n * pageParam?: 未知\n   * 仅适用于无限查询\n   * 用于获取当前页面的页面参数\n * 信号？：中止信号\n   * TanStack Query 提供的 AbortSignal 实例\n   * 可用于取消查询\n * 元：记录<字符串，未知> |不明确的\n   * 可选字段，您可以填写有关查询的其他信息\n\n在 GitHub 上编辑",normalizedContent:"# query functions\n\n查询函数实际上可以是任何返回承诺的函数。返回的承诺应该解析数据或抛出错误。\n\n以下所有都是有效的查询函数配置：\n\nusequery({ querykey: ['todos'], queryfn: fetchalltodos })usequery({ querykey: ['todos', todoid], queryfn: () => fetchtodobyid(todoid) })usequery({  querykey: ['todos', todoid],  queryfn: async () => {    const data = await fetchtodobyid(todoid)    return data  },})usequery({  querykey: ['todos', todoid],  queryfn: ({ querykey }) => fetchtodobyid(querykey[1]),})\n\n\n[\n\n\n# 处理和抛出错误\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#handling-and-throwing-errors)\n\n为了让 tanstack query 确定查询出错，查询函数必须抛出或返回一个被拒绝的 promise。查询函数中抛出的任何错误都将保留在查询的错误状态上。\n\nconst { error } = usequery({  querykey: ['todos', todoid],  queryfn: async () => {    if (somethinggoeswrong) {      throw new error('oh no!')    }    if (somethingelsegoeswrong) {      return promise.reject(new error('oh no!'))    }\n    return data  },})\n\n\n[\n\n\n# 与 fetch 和其他默认不抛出的客户端一起使用\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#usage-with-fetch-and-other-clients-that-do-not-throw-by-default)\n\n虽然大多数实用程序（如 axios 或 graphql-request）会自动为不成功的 http 调用抛出错误，但某些实用程序（如 fetch）默认情况下不会抛出错误。如果是这样的话，你需要自己扔掉它们。这是使用流行的 fetch api 执行此操作的简单方法：\n\nusequery({  querykey: ['todos', todoid],  queryfn: async () => {    const response = await fetch('/todos/' + todoid)    if (!response.ok) {      throw new error('network response was not ok')    }    return response.json()  },})\n\n\n[\n\n\n# 查询函数变量\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#query-function-variables)\n\n查询键不仅用于唯一标识您正在获取的数据，还可以作为 queryfunctioncontext 的一部分方便地传递到您的查询函数中。虽然并不总是必要的，但这使得在需要时提取查询函数成为可能：\n\nfunction todos({ status, page }) {  const result = usequery({    querykey: ['todos', { status, page }],    queryfn: fetchtodolist,  })}\n// access the key, status and page variables in your query function!function fetchtodolist({ querykey }) {  const [_key, { status, page }] = querykey  return new promise()}\n\n\n[\n\n\n# 查询函数上下文\n\n](https://tanstack.com/query/latest/docs/react/guides/query-functions#queryfunctioncontext)\n\nqueryfunctioncontext 是传递给每个查询函数的对象。它包括：\n\n * querykey: querykey: 查询键\n * pageparam?: 未知\n   * 仅适用于无限查询\n   * 用于获取当前页面的页面参数\n * 信号？：中止信号\n   * tanstack query 提供的 abortsignal 实例\n   * 可用于取消查询\n * 元：记录<字符串，未知> |不明确的\n   * 可选字段，您可以填写有关查询的其他信息\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"并行查询",frontmatter:{title:"并行查询",date:"2023-03-27T22:47:10.000Z",permalink:"/pages/540635/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/05.%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2.html",relativePath:"01.文档/02.指南和概念/05.并行查询.md",key:"v-7e8e8920",path:"/pages/540635/",headers:[{level:2,title:"手动并行查询",slug:"手动并行查询",normalizedTitle:"手动并行查询",charIndex:62},{level:2,title:"使用 useQueries 的动态并行查询",slug:"使用-usequeries-的动态并行查询",normalizedTitle:"使用 usequeries 的动态并行查询",charIndex:730}],headersStr:"手动并行查询 使用 useQueries 的动态并行查询",content:"# Parallel Queries\n\n“并行”查询是并行执行或同时执行的查询，以最大限度地提高获取并发性。\n\n[\n\n\n# 手动并行查询\n\n](https://tanstack.com/query/latest/docs/react/guides/parallel-queries#manual-parallel-queries)\n\n当并行查询的数量不变时，使用并行查询就没有额外的努力。只需同时使用任意数量的 TanStack Query 的 useQuery 和 useInfiniteQuery 挂钩！\n\nfunction App () {  // The following queries will execute in parallel  const usersQuery = useQuery({ queryKey: ['users'], queryFn: fetchUsers })  const teamsQuery = useQuery({ queryKey: ['teams'], queryFn: fetchTeams })  const projectsQuery = useQuery({ queryKey: ['projects'], queryFn: fetchProjects })  ...}\n\n\n> 在挂起模式下使用 React Query 时，这种并行模式不起作用，因为第一个查询会在内部抛出一个 promise 并会在其他查询运行之前挂起组件。要解决这个问题，您要么需要使用 useQueries 挂钩（建议这样做），要么为每个 useQuery 实例使用单独的组件来编排您自己的并行性（这是蹩脚的）。\n\n[\n\n\n# 使用 useQueries 的动态并行查询\n\n](https://tanstack.com/query/latest/docs/react/guides/parallel-queries#dynamic-parallel-queries-with-usequeries)\n\n如果您需要执行的查询数量在不同的渲染之间发生变化，则您不能使用手动查询，因为这会违反挂钩规则。相反，TanStack Query 提供了一个 useQueries 挂钩，您可以使用它来动态地并行执行任意数量的查询。\n\nuseQueries 接受带有查询键的选项对象，其值为查询对象数组。它返回一个查询结果数组：\n\nfunction App({ users }) {  const userQueries = useQueries({    queries: users.map((user) => {      return {        queryKey: ['user', user.id],        queryFn: () => fetchUserById(user.id),      }    }),  })}\n\n\n在 GitHub 上编辑",normalizedContent:"# parallel queries\n\n“并行”查询是并行执行或同时执行的查询，以最大限度地提高获取并发性。\n\n[\n\n\n# 手动并行查询\n\n](https://tanstack.com/query/latest/docs/react/guides/parallel-queries#manual-parallel-queries)\n\n当并行查询的数量不变时，使用并行查询就没有额外的努力。只需同时使用任意数量的 tanstack query 的 usequery 和 useinfinitequery 挂钩！\n\nfunction app () {  // the following queries will execute in parallel  const usersquery = usequery({ querykey: ['users'], queryfn: fetchusers })  const teamsquery = usequery({ querykey: ['teams'], queryfn: fetchteams })  const projectsquery = usequery({ querykey: ['projects'], queryfn: fetchprojects })  ...}\n\n\n> 在挂起模式下使用 react query 时，这种并行模式不起作用，因为第一个查询会在内部抛出一个 promise 并会在其他查询运行之前挂起组件。要解决这个问题，您要么需要使用 usequeries 挂钩（建议这样做），要么为每个 usequery 实例使用单独的组件来编排您自己的并行性（这是蹩脚的）。\n\n[\n\n\n# 使用 usequeries 的动态并行查询\n\n](https://tanstack.com/query/latest/docs/react/guides/parallel-queries#dynamic-parallel-queries-with-usequeries)\n\n如果您需要执行的查询数量在不同的渲染之间发生变化，则您不能使用手动查询，因为这会违反挂钩规则。相反，tanstack query 提供了一个 usequeries 挂钩，您可以使用它来动态地并行执行任意数量的查询。\n\nusequeries 接受带有查询键的选项对象，其值为查询对象数组。它返回一个查询结果数组：\n\nfunction app({ users }) {  const userqueries = usequeries({    queries: users.map((user) => {      return {        querykey: ['user', user.id],        queryfn: () => fetchuserbyid(user.id),      }    }),  })}\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"窗口焦点",frontmatter:{title:"窗口焦点",date:"2023-03-27T22:49:00.000Z",permalink:"/pages/28a0b1/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/08.%E7%AA%97%E5%8F%A3%E7%84%A6%E7%82%B9.html",relativePath:"01.文档/02.指南和概念/08.窗口焦点.md",key:"v-79d04a1a",path:"/pages/28a0b1/",headers:[{level:4,title:"全局禁用",slug:"全局禁用",normalizedTitle:"全局禁用",charIndex:129},{level:4,title:"禁用每个查询",slug:"禁用每个查询",normalizedTitle:"禁用每个查询",charIndex:471},{level:2,title:"自定义窗口焦点事件",slug:"自定义窗口焦点事件",normalizedTitle:"自定义窗口焦点事件",charIndex:674},{level:2,title:"忽略 iframe 焦点事件",slug:"忽略-iframe-焦点事件",normalizedTitle:"忽略 iframe 焦点事件",charIndex:1499},{level:2,title:"在 React Native 中管理焦点",slug:"在-react-native-中管理焦点",normalizedTitle:"在 react native 中管理焦点",charIndex:1935},{level:2,title:"管理焦点状态",slug:"管理焦点状态",normalizedTitle:"管理焦点状态",charIndex:2529},{level:2,title:"陷阱和注意事项",slug:"陷阱和注意事项",normalizedTitle:"陷阱和注意事项",charIndex:2837}],headersStr:"全局禁用 禁用每个查询 自定义窗口焦点事件 忽略 iframe 焦点事件 在 React Native 中管理焦点 管理焦点状态 陷阱和注意事项",content:"# Window Focus Refetching\n\n如果用户离开您的应用程序并返回并且查询数据已过时，TanStack Query 会自动在后台为您请求新数据。您可以使用 refetchOnWindowFocus 选项全局或按查询禁用此功能：\n\n[\n\n# 全局禁用\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#disabling-globally)\n\n//const queryClient = new QueryClient({  defaultOptions: {    queries: {      refetchOnWindowFocus: false, // default: true    },  },})\nfunction App() {  return <QueryClientProvider client={queryClient}>...</QueryClientProvider>}\n\n\n[\n\n# 禁用每个查询\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#disabling-per-query)\n\nuseQuery({  queryKey: ['todos'],  queryFn: fetchTodos,  refetchOnWindowFocus: false,})\n\n\n[\n\n\n# 自定义窗口焦点事件\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#custom-window-focus-event)\n\n在极少数情况下，您可能希望管理自己的窗口焦点事件，这些事件会触发 TanStack 查询重新生效。为此，TanStack Query 提供了一个 focusManager.setEventListener 函数，该函数为您提供在窗口聚焦时应触发的回调，并允许您设置自己的事件。当调用 focusManager.setEventListener 时，先前设置的处理程序将被删除（在大多数情况下将是默认处理程序）并使用您的新处理程序。例如，这是默认处理程序：\n\nfocusManager.setEventListener((handleFocus) => {  // Listen to visibilitychange and focus  if (typeof window !== 'undefined' && window.addEventListener) {    window.addEventListener('visibilitychange', handleFocus, false)    window.addEventListener('focus', handleFocus, false)  }\n  return () => {    // Be sure to unsubscribe if a new handler is set    window.removeEventListener('visibilitychange', handleFocus)    window.removeEventListener('focus', handleFocus)  }})\n\n\n[\n\n\n# 忽略 iframe 焦点事件\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#ignoring-iframe-focus-events)\n\n替换焦点处理程序的一个很好的用例是 iframe 事件。 iframe 在应用程序中聚焦或使用 iframe 时，通过双重触发事件和误报事件来检测窗口焦点时会出现问题。如果遇到这种情况，您应该使用尽可能忽略这些事件的事件处理程序。我推荐这个！它可以通过以下方式设置：\n\nimport { focusManager } from '@tanstack/react-query'import onWindowFocus from './onWindowFocus' // The gist above\nfocusManager.setEventListener(onWindowFocus) // Boom!\n\n\n[\n\n\n# 在 React Native 中管理焦点\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#managing-focus-in-react-native)\n\nReact Native 不是窗口上的事件监听器，而是通过 AppState 模块提供焦点信息。当应用程序状态变为“活动”时，您可以使用 AppState“更改”事件触发更新：\n\nimport { AppState } from 'react-native'import { focusManager } from '@tanstack/react-query'\nfunction onAppStateChange(status: AppStateStatus) {  if (Platform.OS !== 'web') {    focusManager.setFocused(status === 'active')  }}\nuseEffect(() => {  const subscription = AppState.addEventListener('change', onAppStateChange)\n  return () => subscription.remove()}, [])\n\n\n[\n\n\n# 管理焦点状态\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#managing-focus-state)\n\nimport { focusManager } from '@tanstack/react-query'\n// Override the default focus statefocusManager.setFocused(true)\n// Fallback to the default focus checkfocusManager.setFocused(undefined)\n\n\n[\n\n\n# 陷阱和注意事项\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#pitfalls--caveats)\n\n一些浏览器内部对话窗口，例如由 alert() 生成的或文件上传对话（由 创建）也可能在关闭后触发焦点重新获取。这可能会导致不需要的副作用，因为重新获取可能会在执行文件上传处理程序之前触发组件卸载或重新安装。有关背景和可能的解决方法，请参阅 GitHub 上的此问题。\n\n在 GitHub 上编辑",normalizedContent:"# window focus refetching\n\n如果用户离开您的应用程序并返回并且查询数据已过时，tanstack query 会自动在后台为您请求新数据。您可以使用 refetchonwindowfocus 选项全局或按查询禁用此功能：\n\n[\n\n# 全局禁用\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#disabling-globally)\n\n//const queryclient = new queryclient({  defaultoptions: {    queries: {      refetchonwindowfocus: false, // default: true    },  },})\nfunction app() {  return <queryclientprovider client={queryclient}>...</queryclientprovider>}\n\n\n[\n\n# 禁用每个查询\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#disabling-per-query)\n\nusequery({  querykey: ['todos'],  queryfn: fetchtodos,  refetchonwindowfocus: false,})\n\n\n[\n\n\n# 自定义窗口焦点事件\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#custom-window-focus-event)\n\n在极少数情况下，您可能希望管理自己的窗口焦点事件，这些事件会触发 tanstack 查询重新生效。为此，tanstack query 提供了一个 focusmanager.seteventlistener 函数，该函数为您提供在窗口聚焦时应触发的回调，并允许您设置自己的事件。当调用 focusmanager.seteventlistener 时，先前设置的处理程序将被删除（在大多数情况下将是默认处理程序）并使用您的新处理程序。例如，这是默认处理程序：\n\nfocusmanager.seteventlistener((handlefocus) => {  // listen to visibilitychange and focus  if (typeof window !== 'undefined' && window.addeventlistener) {    window.addeventlistener('visibilitychange', handlefocus, false)    window.addeventlistener('focus', handlefocus, false)  }\n  return () => {    // be sure to unsubscribe if a new handler is set    window.removeeventlistener('visibilitychange', handlefocus)    window.removeeventlistener('focus', handlefocus)  }})\n\n\n[\n\n\n# 忽略 iframe 焦点事件\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#ignoring-iframe-focus-events)\n\n替换焦点处理程序的一个很好的用例是 iframe 事件。 iframe 在应用程序中聚焦或使用 iframe 时，通过双重触发事件和误报事件来检测窗口焦点时会出现问题。如果遇到这种情况，您应该使用尽可能忽略这些事件的事件处理程序。我推荐这个！它可以通过以下方式设置：\n\nimport { focusmanager } from '@tanstack/react-query'import onwindowfocus from './onwindowfocus' // the gist above\nfocusmanager.seteventlistener(onwindowfocus) // boom!\n\n\n[\n\n\n# 在 react native 中管理焦点\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#managing-focus-in-react-native)\n\nreact native 不是窗口上的事件监听器，而是通过 appstate 模块提供焦点信息。当应用程序状态变为“活动”时，您可以使用 appstate“更改”事件触发更新：\n\nimport { appstate } from 'react-native'import { focusmanager } from '@tanstack/react-query'\nfunction onappstatechange(status: appstatestatus) {  if (platform.os !== 'web') {    focusmanager.setfocused(status === 'active')  }}\nuseeffect(() => {  const subscription = appstate.addeventlistener('change', onappstatechange)\n  return () => subscription.remove()}, [])\n\n\n[\n\n\n# 管理焦点状态\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#managing-focus-state)\n\nimport { focusmanager } from '@tanstack/react-query'\n// override the default focus statefocusmanager.setfocused(true)\n// fallback to the default focus checkfocusmanager.setfocused(undefined)\n\n\n[\n\n\n# 陷阱和注意事项\n\n](https://tanstack.com/query/latest/docs/react/guides/window-focus-refetching#pitfalls--caveats)\n\n一些浏览器内部对话窗口，例如由 alert() 生成的或文件上传对话（由 创建）也可能在关闭后触发焦点重新获取。这可能会导致不需要的副作用，因为重新获取可能会在执行文件上传处理程序之前触发组件卸载或重新安装。有关背景和可能的解决方法，请参阅 github 上的此问题。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"依赖查询",frontmatter:{title:"依赖查询",date:"2023-03-27T22:47:35.000Z",permalink:"/pages/743bc6/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/06.%E4%BE%9D%E8%B5%96%E6%9F%A5%E8%AF%A2.html",relativePath:"01.文档/02.指南和概念/06.依赖查询.md",key:"v-7b4c733a",path:"/pages/743bc6/",headersStr:null,content:"# Dependent Queries\n\n依赖（或串行）查询依赖于之前的查询才能执行。要实现这一点，就像使用 enabled 选项告诉查询何时准备好运行一样简单：\n\n// Get the userconst { data: user } = useQuery({  queryKey: ['user', email],  queryFn: getUserByEmail,})\nconst userId = user?.id\n// Then get the user's projectsconst {  status,  fetchStatus,  data: projects,} = useQuery({  queryKey: ['projects', userId],  queryFn: getProjectsByUser,  // The query will not execute until the userId exists  enabled: !!userId,})\n\n\n项目查询将从以下时间开始：\n\nstatus: 'loading'fetchStatus: 'idle'\n\n\n一旦用户可用，项目查询将被启用，然后将转换为：\n\nstatus: 'loading'fetchStatus: 'fetching'\n\n\n一旦我们有了项目，它将去：\n\nstatus: 'success'fetchStatus: 'idle'\n\n\n在 GitHub 上编辑",normalizedContent:"# dependent queries\n\n依赖（或串行）查询依赖于之前的查询才能执行。要实现这一点，就像使用 enabled 选项告诉查询何时准备好运行一样简单：\n\n// get the userconst { data: user } = usequery({  querykey: ['user', email],  queryfn: getuserbyemail,})\nconst userid = user?.id\n// then get the user's projectsconst {  status,  fetchstatus,  data: projects,} = usequery({  querykey: ['projects', userid],  queryfn: getprojectsbyuser,  // the query will not execute until the userid exists  enabled: !!userid,})\n\n\n项目查询将从以下时间开始：\n\nstatus: 'loading'fetchstatus: 'idle'\n\n\n一旦用户可用，项目查询将被启用，然后将转换为：\n\nstatus: 'loading'fetchstatus: 'fetching'\n\n\n一旦我们有了项目，它将去：\n\nstatus: 'success'fetchstatus: 'idle'\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"禁用&暂停",frontmatter:{title:"禁用&暂停",date:"2023-03-27T22:49:30.000Z",permalink:"/pages/e5c1c3/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/09.%E7%A6%81%E7%94%A8&%E6%9A%82%E5%81%9C.html",relativePath:"01.文档/02.指南和概念/09.禁用&暂停.md",key:"v-12bd433c",path:"/pages/e5c1c3/",headers:[{level:2,title:"惰性查询",slug:"惰性查询",normalizedTitle:"惰性查询",charIndex:1182},{level:3,title:"isInitialLoading",slug:"isinitialloading",normalizedTitle:"isinitialloading",charIndex:394}],headersStr:"惰性查询 isInitialLoading",content:"# Disabling/Pausing Queries\n\n如果你想禁止查询自动运行，你可以使用 enabled = false 选项。\n\n当 enabled 为 false 时：\n\n * 如果查询有缓存数据，那么查询将在 status === 'success' 或 isSuccess 状态下初始化。\n * 如果查询没有缓存数据，那么查询将在 status === 'loading' 和 fetchStatus === 'idle' 状态开始。\n * 查询不会在挂载时自动获取。\n * 查询不会在后台自动重新获取。\n * 查询将忽略通常会导致查询重新获取的查询客户端 invalidateQueries 和 refetchQueries 调用。\n * 从 useQuery 返回的 refetch 可用于手动触发查询以获取。\n\nfunction Todos() {  const { isInitialLoading, isError, data, error, refetch, isFetching } =    useQuery({      queryKey: ['todos'],      queryFn: fetchTodoList,      enabled: false,    })\n  return (    <div>      <button onClick={() => refetch()}>Fetch Todos</button>\n      {data ? (        <>          <ul>            {data.map((todo) => (              <li key={todo.id}>{todo.title}</li>            ))}          </ul>        </>      ) : isError ? (        <span>Error: {error.message}</span>      ) : isInitialLoading ? (        <span>Loading...</span>      ) : (        <span>Not ready ...</span>      )}\n      <div>{isFetching ? 'Fetching...' : null}</div>    </div>  )}\n\n\n永久禁用查询会选择退出 TanStack Query 必须提供的许多强大功能（如后台重新获取），而且这也不是惯用的方式。它将您从声明式方法（在您的查询应该运行时定义依赖项）转变为命令式模式（每当我单击此处时获取）。也不可能将参数传递给重新获取。通常，您想要的只是延迟初始提取的惰性查询：\n\n[\n\n\n# 惰性查询\n\n](https://tanstack.com/query/latest/docs/react/guides/disabling-queries#lazy-queries)\n\nenabled 选项不仅可以用于永久禁用查询，还可以在以后启用/禁用它。一个很好的例子是过滤器表单，您只想在用户输入过滤器值后触发第一个请求：\n\nfunction Todos() {  const [filter, setFilter] = React.useState('')\n  const { data } = useQuery({      queryKey: ['todos', filter],      queryFn: () => fetchTodos(filter),      // ⬇️ disabled as long as the filter is empty      enabled: !!filter  })\n  return (      <div>        // 🚀 applying the filter will enable and execute the query        <FiltersForm onApply={setFilter} />        {data && <TodosTable data={data}} />      </div>  )}\n\n\n[\n\n\n# isInitialLoading\n\n](https://tanstack.com/query/latest/docs/react/guides/disabling-queries#isinitialloading)\n\n惰性查询将从一开始就处于 status: 'loading' 状态，因为加载意味着还没有数据。然而，这在技术上是正确的，因为我们当前没有获取任何数据（因为查询未启用），这也意味着您可能无法使用此标志来显示加载微调器。\n\n如果您使用的是禁用查询或惰性查询，则可以改用 isInitialLoading 标志。它是一个派生标志，计算自：\n\n正在加载 && 正在获取\n\n所以只有当查询当前是第一次获取时才会为真。\n\n在 GitHub 上编辑",normalizedContent:"# disabling/pausing queries\n\n如果你想禁止查询自动运行，你可以使用 enabled = false 选项。\n\n当 enabled 为 false 时：\n\n * 如果查询有缓存数据，那么查询将在 status === 'success' 或 issuccess 状态下初始化。\n * 如果查询没有缓存数据，那么查询将在 status === 'loading' 和 fetchstatus === 'idle' 状态开始。\n * 查询不会在挂载时自动获取。\n * 查询不会在后台自动重新获取。\n * 查询将忽略通常会导致查询重新获取的查询客户端 invalidatequeries 和 refetchqueries 调用。\n * 从 usequery 返回的 refetch 可用于手动触发查询以获取。\n\nfunction todos() {  const { isinitialloading, iserror, data, error, refetch, isfetching } =    usequery({      querykey: ['todos'],      queryfn: fetchtodolist,      enabled: false,    })\n  return (    <div>      <button onclick={() => refetch()}>fetch todos</button>\n      {data ? (        <>          <ul>            {data.map((todo) => (              <li key={todo.id}>{todo.title}</li>            ))}          </ul>        </>      ) : iserror ? (        <span>error: {error.message}</span>      ) : isinitialloading ? (        <span>loading...</span>      ) : (        <span>not ready ...</span>      )}\n      <div>{isfetching ? 'fetching...' : null}</div>    </div>  )}\n\n\n永久禁用查询会选择退出 tanstack query 必须提供的许多强大功能（如后台重新获取），而且这也不是惯用的方式。它将您从声明式方法（在您的查询应该运行时定义依赖项）转变为命令式模式（每当我单击此处时获取）。也不可能将参数传递给重新获取。通常，您想要的只是延迟初始提取的惰性查询：\n\n[\n\n\n# 惰性查询\n\n](https://tanstack.com/query/latest/docs/react/guides/disabling-queries#lazy-queries)\n\nenabled 选项不仅可以用于永久禁用查询，还可以在以后启用/禁用它。一个很好的例子是过滤器表单，您只想在用户输入过滤器值后触发第一个请求：\n\nfunction todos() {  const [filter, setfilter] = react.usestate('')\n  const { data } = usequery({      querykey: ['todos', filter],      queryfn: () => fetchtodos(filter),      // ⬇️ disabled as long as the filter is empty      enabled: !!filter  })\n  return (      <div>        // 🚀 applying the filter will enable and execute the query        <filtersform onapply={setfilter} />        {data && <todostable data={data}} />      </div>  )}\n\n\n[\n\n\n# isinitialloading\n\n](https://tanstack.com/query/latest/docs/react/guides/disabling-queries#isinitialloading)\n\n惰性查询将从一开始就处于 status: 'loading' 状态，因为加载意味着还没有数据。然而，这在技术上是正确的，因为我们当前没有获取任何数据（因为查询未启用），这也意味着您可能无法使用此标志来显示加载微调器。\n\n如果您使用的是禁用查询或惰性查询，则可以改用 isinitialloading 标志。它是一个派生标志，计算自：\n\n正在加载 && 正在获取\n\n所以只有当查询当前是第一次获取时才会为真。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"无限查询",frontmatter:{title:"无限查询",date:"2023-03-27T22:54:31.000Z",permalink:"/pages/77c0e9/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/12.%E6%97%A0%E9%99%90%E6%9F%A5%E8%AF%A2.html",relativePath:"01.文档/02.指南和概念/12.无限查询.md",key:"v-51fcd5b6",path:"/pages/77c0e9/",headers:[{level:2,title:"例子",slug:"例子",normalizedTitle:"例子",charIndex:739},{level:2,title:"当需要重新获取无限查询时会发生什么？",slug:"当需要重新获取无限查询时会发生什么",normalizedTitle:"当需要重新获取无限查询时会发生什么？",charIndex:2581},{level:3,title:"刷新页面",slug:"刷新页面",normalizedTitle:"刷新页面",charIndex:2862},{level:2,title:"如果我需要将自定义信息传递给我的查询函数怎么办？",slug:"如果我需要将自定义信息传递给我的查询函数怎么办",normalizedTitle:"如果我需要将自定义信息传递给我的查询函数怎么办？",charIndex:3509},{level:2,title:"如果我想实现一个双向无限列表怎么办？",slug:"如果我想实现一个双向无限列表怎么办",normalizedTitle:"如果我想实现一个双向无限列表怎么办？",charIndex:4236},{level:2,title:"如果我想以相反的顺序显示页面怎么办？",slug:"如果我想以相反的顺序显示页面怎么办",normalizedTitle:"如果我想以相反的顺序显示页面怎么办？",charIndex:4695},{level:2,title:"如果我想手动更新无限查询怎么办？",slug:"如果我想手动更新无限查询怎么办",normalizedTitle:"如果我想手动更新无限查询怎么办？",charIndex:5067}],headersStr:"例子 当需要重新获取无限查询时会发生什么？ 刷新页面 如果我需要将自定义信息传递给我的查询函数怎么办？ 如果我想实现一个双向无限列表怎么办？ 如果我想以相反的顺序显示页面怎么办？ 如果我想手动更新无限查询怎么办？",content:"# Infinite Queries\n\n渲染列表可以将更多数据“加载”到现有数据集或“无限滚动”，这也是一种非常常见的 UI 模式。 TanStack Query 支持一个有用的 useQuery 版本，称为 useInfiniteQuery，用于查询这些类型的列表。\n\n使用 useInfiniteQuery 时，您会注意到一些不同之处：\n\n * 数据现在是一个包含无限查询数据的对象：\n * 包含获取页面的 data.pages 数组\n * data.pageParams 包含用于获取页面的页面参数的数组\n * fetchNextPage 和 fetchPreviousPage 函数现在可用\n * getNextPageParam 和 getPreviousPageParam 选项可用于确定是否有更多数据要加载以及要获取它的信息。此信息作为查询函数中的附加参数提供（在调用 fetchNextPage 或 fetchPreviousPage 函数时可选择覆盖）\n * hasNextPage 布尔值现在可用，如果 getNextPageParam 返回未定义以外的值则为真\n * hasPreviousPage 布尔值现在可用，如果 getPreviousPageParam 返回的值不是未定义的，则为真\n * isFetchingNextPage 和 isFetchingPreviousPage 布尔值现在可用于区分背景刷新状态和加载更多状态\n\n> 注意：在查询中使用 initialData 或 select 等选项时，请确保在重组数据时它仍然包含 data.pages 和 data.pageParams 属性，否则您的更改将被返回的查询覆盖！\n\n[\n\n\n# 例子\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#example)\n\n假设我们有一个 API，它基于游标索引一次返回项目 3 的页面以及可用于获取下一组项目的游标：\n\nfetch('/api/projects?cursor=0')// { data: [...], nextCursor: 3}fetch('/api/projects?cursor=3')// { data: [...], nextCursor: 6}fetch('/api/projects?cursor=6')// { data: [...], nextCursor: 9}fetch('/api/projects?cursor=9')// { data: [...] }\n\n\n有了这些信息，我们可以通过以下方式创建“加载更多”用户界面：\n\n * 默认等待useInfiniteQuery请求第一组数据\n * 在 getNextPageParam 中返回下一个查询的信息\n * 调用 fetchNextPage 函数\n\n> 注意：不要调用带参数的 fetchNextPage 非常重要，除非您希望它们覆盖从 getNextPageParam 函数返回的 pageParam 数据。例如不要这样做： 因为这会将 onClick 事件发送到 fetchNextPage 函数。\n\nimport { useInfiniteQuery } from '@tanstack/react-query'\nfunction Projects() {  const fetchProjects = async ({ pageParam = 0 }) => {    const res = await fetch('/api/projects?cursor=' + pageParam)    return res.json()  }\n  const {    data,    error,    fetchNextPage,    hasNextPage,    isFetching,    isFetchingNextPage,    status,  } = useInfiniteQuery({    queryKey: ['projects'],    queryFn: fetchProjects,    getNextPageParam: (lastPage, pages) => lastPage.nextCursor,  })\n  return status === 'loading' ? (    <p>Loading...</p>  ) : status === 'error' ? (    <p>Error: {error.message}</p>  ) : (    <>      {data.pages.map((group, i) => (        <React.Fragment key={i}>          {group.projects.map((project) => (            <p key={project.id}>{project.name}</p>          ))}        </React.Fragment>      ))}      <div>        <button          onClick={() => fetchNextPage()}          disabled={!hasNextPage || isFetchingNextPage}        >          {isFetchingNextPage            ? 'Loading more...'            : hasNextPage            ? 'Load More'            : 'Nothing more to load'}        </button>      </div>      <div>{isFetching && !isFetchingNextPage ? 'Fetching...' : null}</div>    </>  )}\n\n\n[\n\n\n# 当需要重新获取无限查询时会发生什么？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-happens-when-an-infinite-query-needs-to-be-refetched)\n\n当无限查询变得陈旧并需要重新获取时，每个组都会从第一个开始按顺序获取。这确保即使基础数据发生变化，我们也不会使用陈旧的游标并可能获得重复或跳过记录。如果从 queryCache 中删除了无限查询的结果，则分页将在初始状态重新启动，仅请求初始组。\n\n[\n\n\n# 刷新页面\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#refetchpage)\n\n如果您只想主动重新获取所有页面的一个子集，您可以将 refetchPage 函数传递给从 useInfiniteQuery 返回的重新获取。\n\nconst { refetch } = useInfiniteQuery({  queryKey: ['projects'],  queryFn: fetchProjects,  getNextPageParam: (lastPage, pages) => lastPage.nextCursor,})\n// only refetch the first pagerefetch({ refetchPage: (page, index) => index === 0 })\n\n\n您还可以将此函数作为第二个参数 (queryFilters) 的一部分传递给 queryClient.refetchQueries、queryClient.invalidateQueries 或 queryClient.resetQueries。\n\n签名\n\n * refetchPage: (page: TData, index: number, allPages: TData[]) => 布尔值\n\n该函数针对每个页面执行，只有该函数返回 true 的页面才会被重新获取。\n\n[\n\n\n# 如果我需要将自定义信息传递给我的查询函数怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-need-to-pass-custom-information-to-my-query-function)\n\n默认情况下，从 getNextPageParam 返回的变量将提供给查询函数，但在某些情况下，您可能希望覆盖它。您可以将自定义变量传递给 fetchNextPage 函数，它将覆盖默认变量，如下所示：\n\nfunction Projects() {  const fetchProjects = ({ pageParam = 0 }) =>    fetch('/api/projects?cursor=' + pageParam)\n  const {    status,    data,    isFetching,    isFetchingNextPage,    fetchNextPage,    hasNextPage,  } = useInfiniteQuery({    queryKey: ['projects'],    queryFn: fetchProjects,    getNextPageParam: (lastPage, pages) => lastPage.nextCursor,  })\n  // Pass your own page param  const skipToCursor50 = () => fetchNextPage({ pageParam: 50 })}\n\n\n[\n\n\n# 如果我想实现一个双向无限列表怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-implement-a-bi-directional-infinite-list)\n\n可以使用 getPreviousPageParam、fetchPreviousPage、hasPreviousPage 和 isFetchingPreviousPage 属性和函数来实现双向列表。\n\nuseInfiniteQuery({  queryKey: ['projects'],  queryFn: fetchProjects,  getNextPageParam: (lastPage, pages) => lastPage.nextCursor,  getPreviousPageParam: (firstPage, pages) => firstPage.prevCursor,})\n\n\n[\n\n\n# 如果我想以相反的顺序显示页面怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-show-the-pages-in-reversed-order)\n\n有时您可能希望以相反的顺序显示页面。如果是这种情况，您可以使用选择选项：\n\nuseInfiniteQuery({  queryKey: ['projects'],  queryFn: fetchProjects,  select: (data) => ({    pages: [...data.pages].reverse(),    pageParams: [...data.pageParams].reverse(),  }),})\n\n\n[\n\n\n# 如果我想手动更新无限查询怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-manually-update-the-infinite-query)\n\n手动删除第一页：\n\nqueryClient.setQueryData(['projects'], (data) => ({  pages: data.pages.slice(1),  pageParams: data.pageParams.slice(1),}))\n\n\n从单个页面手动删除单个值：\n\nconst newPagesArray =  oldPagesArray?.pages.map((page) =>    page.filter((val) => val.id !== updatedId),  ) ?? []\nqueryClient.setQueryData(['projects'], (data) => ({  pages: newPagesArray,  pageParams: data.pageParams,}))\n\n\n确保页面和 pageParams 的数据结构保持一致！\n\n在 GitHub 上编辑",normalizedContent:"# infinite queries\n\n渲染列表可以将更多数据“加载”到现有数据集或“无限滚动”，这也是一种非常常见的 ui 模式。 tanstack query 支持一个有用的 usequery 版本，称为 useinfinitequery，用于查询这些类型的列表。\n\n使用 useinfinitequery 时，您会注意到一些不同之处：\n\n * 数据现在是一个包含无限查询数据的对象：\n * 包含获取页面的 data.pages 数组\n * data.pageparams 包含用于获取页面的页面参数的数组\n * fetchnextpage 和 fetchpreviouspage 函数现在可用\n * getnextpageparam 和 getpreviouspageparam 选项可用于确定是否有更多数据要加载以及要获取它的信息。此信息作为查询函数中的附加参数提供（在调用 fetchnextpage 或 fetchpreviouspage 函数时可选择覆盖）\n * hasnextpage 布尔值现在可用，如果 getnextpageparam 返回未定义以外的值则为真\n * haspreviouspage 布尔值现在可用，如果 getpreviouspageparam 返回的值不是未定义的，则为真\n * isfetchingnextpage 和 isfetchingpreviouspage 布尔值现在可用于区分背景刷新状态和加载更多状态\n\n> 注意：在查询中使用 initialdata 或 select 等选项时，请确保在重组数据时它仍然包含 data.pages 和 data.pageparams 属性，否则您的更改将被返回的查询覆盖！\n\n[\n\n\n# 例子\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#example)\n\n假设我们有一个 api，它基于游标索引一次返回项目 3 的页面以及可用于获取下一组项目的游标：\n\nfetch('/api/projects?cursor=0')// { data: [...], nextcursor: 3}fetch('/api/projects?cursor=3')// { data: [...], nextcursor: 6}fetch('/api/projects?cursor=6')// { data: [...], nextcursor: 9}fetch('/api/projects?cursor=9')// { data: [...] }\n\n\n有了这些信息，我们可以通过以下方式创建“加载更多”用户界面：\n\n * 默认等待useinfinitequery请求第一组数据\n * 在 getnextpageparam 中返回下一个查询的信息\n * 调用 fetchnextpage 函数\n\n> 注意：不要调用带参数的 fetchnextpage 非常重要，除非您希望它们覆盖从 getnextpageparam 函数返回的 pageparam 数据。例如不要这样做： 因为这会将 onclick 事件发送到 fetchnextpage 函数。\n\nimport { useinfinitequery } from '@tanstack/react-query'\nfunction projects() {  const fetchprojects = async ({ pageparam = 0 }) => {    const res = await fetch('/api/projects?cursor=' + pageparam)    return res.json()  }\n  const {    data,    error,    fetchnextpage,    hasnextpage,    isfetching,    isfetchingnextpage,    status,  } = useinfinitequery({    querykey: ['projects'],    queryfn: fetchprojects,    getnextpageparam: (lastpage, pages) => lastpage.nextcursor,  })\n  return status === 'loading' ? (    <p>loading...</p>  ) : status === 'error' ? (    <p>error: {error.message}</p>  ) : (    <>      {data.pages.map((group, i) => (        <react.fragment key={i}>          {group.projects.map((project) => (            <p key={project.id}>{project.name}</p>          ))}        </react.fragment>      ))}      <div>        <button          onclick={() => fetchnextpage()}          disabled={!hasnextpage || isfetchingnextpage}        >          {isfetchingnextpage            ? 'loading more...'            : hasnextpage            ? 'load more'            : 'nothing more to load'}        </button>      </div>      <div>{isfetching && !isfetchingnextpage ? 'fetching...' : null}</div>    </>  )}\n\n\n[\n\n\n# 当需要重新获取无限查询时会发生什么？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-happens-when-an-infinite-query-needs-to-be-refetched)\n\n当无限查询变得陈旧并需要重新获取时，每个组都会从第一个开始按顺序获取。这确保即使基础数据发生变化，我们也不会使用陈旧的游标并可能获得重复或跳过记录。如果从 querycache 中删除了无限查询的结果，则分页将在初始状态重新启动，仅请求初始组。\n\n[\n\n\n# 刷新页面\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#refetchpage)\n\n如果您只想主动重新获取所有页面的一个子集，您可以将 refetchpage 函数传递给从 useinfinitequery 返回的重新获取。\n\nconst { refetch } = useinfinitequery({  querykey: ['projects'],  queryfn: fetchprojects,  getnextpageparam: (lastpage, pages) => lastpage.nextcursor,})\n// only refetch the first pagerefetch({ refetchpage: (page, index) => index === 0 })\n\n\n您还可以将此函数作为第二个参数 (queryfilters) 的一部分传递给 queryclient.refetchqueries、queryclient.invalidatequeries 或 queryclient.resetqueries。\n\n签名\n\n * refetchpage: (page: tdata, index: number, allpages: tdata[]) => 布尔值\n\n该函数针对每个页面执行，只有该函数返回 true 的页面才会被重新获取。\n\n[\n\n\n# 如果我需要将自定义信息传递给我的查询函数怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-need-to-pass-custom-information-to-my-query-function)\n\n默认情况下，从 getnextpageparam 返回的变量将提供给查询函数，但在某些情况下，您可能希望覆盖它。您可以将自定义变量传递给 fetchnextpage 函数，它将覆盖默认变量，如下所示：\n\nfunction projects() {  const fetchprojects = ({ pageparam = 0 }) =>    fetch('/api/projects?cursor=' + pageparam)\n  const {    status,    data,    isfetching,    isfetchingnextpage,    fetchnextpage,    hasnextpage,  } = useinfinitequery({    querykey: ['projects'],    queryfn: fetchprojects,    getnextpageparam: (lastpage, pages) => lastpage.nextcursor,  })\n  // pass your own page param  const skiptocursor50 = () => fetchnextpage({ pageparam: 50 })}\n\n\n[\n\n\n# 如果我想实现一个双向无限列表怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-implement-a-bi-directional-infinite-list)\n\n可以使用 getpreviouspageparam、fetchpreviouspage、haspreviouspage 和 isfetchingpreviouspage 属性和函数来实现双向列表。\n\nuseinfinitequery({  querykey: ['projects'],  queryfn: fetchprojects,  getnextpageparam: (lastpage, pages) => lastpage.nextcursor,  getpreviouspageparam: (firstpage, pages) => firstpage.prevcursor,})\n\n\n[\n\n\n# 如果我想以相反的顺序显示页面怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-show-the-pages-in-reversed-order)\n\n有时您可能希望以相反的顺序显示页面。如果是这种情况，您可以使用选择选项：\n\nuseinfinitequery({  querykey: ['projects'],  queryfn: fetchprojects,  select: (data) => ({    pages: [...data.pages].reverse(),    pageparams: [...data.pageparams].reverse(),  }),})\n\n\n[\n\n\n# 如果我想手动更新无限查询怎么办？\n\n](https://tanstack.com/query/latest/docs/react/guides/infinite-queries#what-if-i-want-to-manually-update-the-infinite-query)\n\n手动删除第一页：\n\nqueryclient.setquerydata(['projects'], (data) => ({  pages: data.pages.slice(1),  pageparams: data.pageparams.slice(1),}))\n\n\n从单个页面手动删除单个值：\n\nconst newpagesarray =  oldpagesarray?.pages.map((page) =>    page.filter((val) => val.id !== updatedid),  ) ?? []\nqueryclient.setquerydata(['projects'], (data) => ({  pages: newpagesarray,  pageparams: data.pageparams,}))\n\n\n确保页面和 pageparams 的数据结构保持一致！\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"重试",frontmatter:{title:"重试",date:"2023-03-27T22:50:05.000Z",permalink:"/pages/cf1427/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/10.%E9%87%8D%E8%AF%95.html",relativePath:"01.文档/02.指南和概念/10.重试.md",key:"v-21394984",path:"/pages/cf1427/",headers:[{level:2,title:"重试延迟",slug:"重试延迟",normalizedTitle:"重试延迟",charIndex:572}],headersStr:"重试延迟",content:"# Query Retries\n\n当 useQuery 查询失败（查询函数抛出错误）时，如果该查询的请求未达到最大连续重试次数（默认为 3）或提供了一个函数来确定是否重试，TanStack Query 将自动重试查询允许。\n\n您可以在全局级别和单个查询级别配置重试。\n\n * 设置 retry = false 将禁用重试。\n * 设置 retry = 6 将在显示函数抛出的最终错误之前重试失败的请求 6 次。\n * 设置 retry = true 将无限重试失败的请求。\n * 设置 retry = (failureCount, error) => ... 允许基于请求失败原因的自定义逻辑。\n\nimport { useQuery } from '@tanstack/react-query'\n// Make a specific query retry a certain number of timesconst result = useQuery({  queryKey: ['todos', 1],  queryFn: fetchTodoListPage,  retry: 10, // Will retry failed requests 10 times before displaying an error})\n\n\n[\n\n\n# 重试延迟\n\n](https://tanstack.com/query/latest/docs/react/guides/query-retries#retry-delay)\n\n默认情况下，TanStack Query 中的重试不会在请求失败后立即发生。按照标准，每次重试都会逐渐应用回退延迟。\n\n每次尝试的默认 retryDelay 设置为双倍（从 1000 毫秒开始），但不超过 30 秒：\n\n// Configure for all queriesimport {  QueryCache,  QueryClient,  QueryClientProvider,} from '@tanstack/react-query'\nconst queryClient = new QueryClient({  defaultOptions: {    queries: {      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),    },  },})\nfunction App() {  return <QueryClientProvider client={queryClient}>...</QueryClientProvider>}\n\n\n虽然不推荐，但您显然可以在提供者和个人查询选项中覆盖 retryDelay 函数/整数。如果设置为整数而不是函数，延迟将始终是相同的时间量：\n\nconst result = useQuery({  queryKey: ['todos'],  queryFn: fetchTodoList,  retryDelay: 1000, // Will always wait 1000ms to retry, regardless of how many retries})\n\n\n在 GitHub 上编辑\n\n反",normalizedContent:"# query retries\n\n当 usequery 查询失败（查询函数抛出错误）时，如果该查询的请求未达到最大连续重试次数（默认为 3）或提供了一个函数来确定是否重试，tanstack query 将自动重试查询允许。\n\n您可以在全局级别和单个查询级别配置重试。\n\n * 设置 retry = false 将禁用重试。\n * 设置 retry = 6 将在显示函数抛出的最终错误之前重试失败的请求 6 次。\n * 设置 retry = true 将无限重试失败的请求。\n * 设置 retry = (failurecount, error) => ... 允许基于请求失败原因的自定义逻辑。\n\nimport { usequery } from '@tanstack/react-query'\n// make a specific query retry a certain number of timesconst result = usequery({  querykey: ['todos', 1],  queryfn: fetchtodolistpage,  retry: 10, // will retry failed requests 10 times before displaying an error})\n\n\n[\n\n\n# 重试延迟\n\n](https://tanstack.com/query/latest/docs/react/guides/query-retries#retry-delay)\n\n默认情况下，tanstack query 中的重试不会在请求失败后立即发生。按照标准，每次重试都会逐渐应用回退延迟。\n\n每次尝试的默认 retrydelay 设置为双倍（从 1000 毫秒开始），但不超过 30 秒：\n\n// configure for all queriesimport {  querycache,  queryclient,  queryclientprovider,} from '@tanstack/react-query'\nconst queryclient = new queryclient({  defaultoptions: {    queries: {      retrydelay: (attemptindex) => math.min(1000 * 2 ** attemptindex, 30000),    },  },})\nfunction app() {  return <queryclientprovider client={queryclient}>...</queryclientprovider>}\n\n\n虽然不推荐，但您显然可以在提供者和个人查询选项中覆盖 retrydelay 函数/整数。如果设置为整数而不是函数，延迟将始终是相同的时间量：\n\nconst result = usequery({  querykey: ['todos'],  queryfn: fetchtodolist,  retrydelay: 1000, // will always wait 1000ms to retry, regardless of how many retries})\n\n\n在 github 上编辑\n\n反",charsets:{cjk:!0}},{title:"后台查询状态",frontmatter:{title:"后台查询状态",date:"2023-03-27T22:48:23.000Z",permalink:"/pages/6c8d60/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/07.%E5%90%8E%E5%8F%B0%E6%9F%A5%E8%AF%A2%E7%8A%B6%E6%80%81.html",relativePath:"01.文档/02.指南和概念/07.后台查询状态.md",key:"v-3e105a2f",path:"/pages/6c8d60/",headers:[{level:2,title:"显示全局后台获取加载状态",slug:"显示全局后台获取加载状态",normalizedTitle:"显示全局后台获取加载状态",charIndex:618}],headersStr:"显示全局后台获取加载状态",content:"# Background Fetching Indicators\n\n查询的状态 === 'loading' 状态足以显示查询的初始硬加载状态，但有时您可能希望显示一个额外的指示器，表明查询正在后台重新获取。为此，查询还为您提供一个 isFetching 布尔值，您可以使用它来表明它处于提取状态，而不管状态变量的状态如何：\n\nfunction Todos() {  const {    status,    data: todos,    error,    isFetching,  } = useQuery({    queryKey: ['todos'],    queryFn: fetchTodos,  })\n  return status === 'loading' ? (    <span>Loading...</span>  ) : status === 'error' ? (    <span>Error: {error.message}</span>  ) : (    <>      {isFetching ? <div>Refreshing...</div> : null}\n      <div>        {todos.map((todo) => (          <Todo todo={todo} />        ))}      </div>    </>  )}\n\n\n[\n\n\n# 显示全局后台获取加载状态\n\n](https://tanstack.com/query/latest/docs/react/guides/background-fetching-indicators#displaying-global-background-fetching-loading-state)\n\n除了单个查询加载状态之外，如果您想在任何查询正在获取时（包括在后台）显示全局加载指示器，您可以使用 useIsFetching 挂钩：\n\nimport { useIsFetching } from '@tanstack/react-query'\nfunction GlobalLoadingIndicator() {  const isFetching = useIsFetching()\n  return isFetching ? (    <div>Queries are fetching in the background...</div>  ) : null}\n\n\n在 GitHub 上编辑",normalizedContent:"# background fetching indicators\n\n查询的状态 === 'loading' 状态足以显示查询的初始硬加载状态，但有时您可能希望显示一个额外的指示器，表明查询正在后台重新获取。为此，查询还为您提供一个 isfetching 布尔值，您可以使用它来表明它处于提取状态，而不管状态变量的状态如何：\n\nfunction todos() {  const {    status,    data: todos,    error,    isfetching,  } = usequery({    querykey: ['todos'],    queryfn: fetchtodos,  })\n  return status === 'loading' ? (    <span>loading...</span>  ) : status === 'error' ? (    <span>error: {error.message}</span>  ) : (    <>      {isfetching ? <div>refreshing...</div> : null}\n      <div>        {todos.map((todo) => (          <todo todo={todo} />        ))}      </div>    </>  )}\n\n\n[\n\n\n# 显示全局后台获取加载状态\n\n](https://tanstack.com/query/latest/docs/react/guides/background-fetching-indicators#displaying-global-background-fetching-loading-state)\n\n除了单个查询加载状态之外，如果您想在任何查询正在获取时（包括在后台）显示全局加载指示器，您可以使用 useisfetching 挂钩：\n\nimport { useisfetching } from '@tanstack/react-query'\nfunction globalloadingindicator() {  const isfetching = useisfetching()\n  return isfetching ? (    <div>queries are fetching in the background...</div>  ) : null}\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"分页查询",frontmatter:{title:"分页查询",date:"2023-03-27T22:51:47.000Z",permalink:"/pages/2179dd/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/11.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.html",relativePath:"01.文档/02.指南和概念/11.分页查询.md",key:"v-46f9d175",path:"/pages/2179dd/",headers:[{level:2,title:"使用 keepPreviousData 更好的分页查询",slug:"使用-keeppreviousdata-更好的分页查询",normalizedTitle:"使用 keeppreviousdata 更好的分页查询",charIndex:372},{level:2,title:"使用 keepPreviousData 滞后无限查询结果",slug:"使用-keeppreviousdata-滞后无限查询结果",normalizedTitle:"使用 keeppreviousdata 滞后无限查询结果",charIndex:2003}],headersStr:"使用 keepPreviousData 更好的分页查询 使用 keepPreviousData 滞后无限查询结果",content:"# Paginated / Lagged Queries\n\n呈现分页数据是一种非常常见的 UI 模式，在 TanStack Query 中，它通过在查询键中包含页面信息来“正常工作”：\n\nconst result = useQuery({  queryKey: ['projects', page],  queryFn: fetchProjects})\n\n\n但是，如果您运行这个简单的示例，您可能会注意到一些奇怪的事情：\n\nUI 会跳入和跳出成功和加载状态，因为每个新页面都被视为一个全新的查询。\n\n这种体验并不是最佳的，不幸的是，今天有多少工具坚持工作。但不是 TanStack 查询！正如您可能已经猜到的那样，TanStack Query 带有一个很棒的功能，称为 keepPreviousData，它允许我们绕过这个问题。\n\n[\n\n\n# 使用 keepPreviousData 更好的分页查询\n\n](https://tanstack.com/query/latest/docs/react/guides/paginated-queries#better-paginated-queries-with-keeppreviousdata)\n\n考虑以下示例，在理想情况下，我们希望为查询增加 pageIndex（或游标）。如果我们使用 useQuery，它在技术上仍然可以正常工作，但是 UI 会随着为每个页面或光标创建和销毁不同的查询而跳进和跳出成功和加载状态。通过将 keepPreviousData 设置为 true，我们得到了一些新东西：\n\n * 请求新数据时上次成功提取的数据可用，即使查询键已更改。\n * 当新数据到达时，先前的数据会无缝交换以显示新数据。\n * isPreviousData 可用于了解查询当前为您提供的数据\n\nfunction Todos() {  const [page, setPage] = React.useState(0)\n  const fetchProjects = (page = 0) => fetch('/api/projects?page=' + page).then((res) => res.json())\n  const {    isLoading,    isError,    error,    data,    isFetching,    isPreviousData,  } = useQuery({    queryKey: ['projects', page],    queryFn: () => fetchProjects(page),    keepPreviousData : true  })\n  return (    <div>      {isLoading ? (        <div>Loading...</div>      ) : isError ? (        <div>Error: {error.message}</div>      ) : (        <div>          {data.projects.map(project => (            <p key={project.id}>{project.name}</p>          ))}        </div>      )}      <span>Current Page: {page + 1}</span>      <button        onClick={() => setPage(old => Math.max(old - 1, 0))}        disabled={page === 0}      >        Previous Page      </button>{' '}      <button        onClick={() => {          if (!isPreviousData && data.hasMore) {            setPage(old => old + 1)          }        }}        // Disable the Next Page button until we know a next page is available        disabled={isPreviousData || !data?.hasMore}      >        Next Page      </button>      {isFetching ? <span> Loading...</span> : null}{' '}    </div>  )}\n\n\n[\n\n\n# 使用 keepPreviousData 滞后无限查询结果\n\n](https://tanstack.com/query/latest/docs/react/guides/paginated-queries#lagging-infinite-query-results-with-keeppreviousdata)\n\n虽然不那么常见，但 keepPreviousData 选项也可以与 useInfiniteQuery 挂钩完美配合，因此您可以无缝地让您的用户继续查看缓存数据，同时无限查询键随时间变化。\n\n在 GitHub 上编辑",normalizedContent:"# paginated / lagged queries\n\n呈现分页数据是一种非常常见的 ui 模式，在 tanstack query 中，它通过在查询键中包含页面信息来“正常工作”：\n\nconst result = usequery({  querykey: ['projects', page],  queryfn: fetchprojects})\n\n\n但是，如果您运行这个简单的示例，您可能会注意到一些奇怪的事情：\n\nui 会跳入和跳出成功和加载状态，因为每个新页面都被视为一个全新的查询。\n\n这种体验并不是最佳的，不幸的是，今天有多少工具坚持工作。但不是 tanstack 查询！正如您可能已经猜到的那样，tanstack query 带有一个很棒的功能，称为 keeppreviousdata，它允许我们绕过这个问题。\n\n[\n\n\n# 使用 keeppreviousdata 更好的分页查询\n\n](https://tanstack.com/query/latest/docs/react/guides/paginated-queries#better-paginated-queries-with-keeppreviousdata)\n\n考虑以下示例，在理想情况下，我们希望为查询增加 pageindex（或游标）。如果我们使用 usequery，它在技术上仍然可以正常工作，但是 ui 会随着为每个页面或光标创建和销毁不同的查询而跳进和跳出成功和加载状态。通过将 keeppreviousdata 设置为 true，我们得到了一些新东西：\n\n * 请求新数据时上次成功提取的数据可用，即使查询键已更改。\n * 当新数据到达时，先前的数据会无缝交换以显示新数据。\n * ispreviousdata 可用于了解查询当前为您提供的数据\n\nfunction todos() {  const [page, setpage] = react.usestate(0)\n  const fetchprojects = (page = 0) => fetch('/api/projects?page=' + page).then((res) => res.json())\n  const {    isloading,    iserror,    error,    data,    isfetching,    ispreviousdata,  } = usequery({    querykey: ['projects', page],    queryfn: () => fetchprojects(page),    keeppreviousdata : true  })\n  return (    <div>      {isloading ? (        <div>loading...</div>      ) : iserror ? (        <div>error: {error.message}</div>      ) : (        <div>          {data.projects.map(project => (            <p key={project.id}>{project.name}</p>          ))}        </div>      )}      <span>current page: {page + 1}</span>      <button        onclick={() => setpage(old => math.max(old - 1, 0))}        disabled={page === 0}      >        previous page      </button>{' '}      <button        onclick={() => {          if (!ispreviousdata && data.hasmore) {            setpage(old => old + 1)          }        }}        // disable the next page button until we know a next page is available        disabled={ispreviousdata || !data?.hasmore}      >        next page      </button>      {isfetching ? <span> loading...</span> : null}{' '}    </div>  )}\n\n\n[\n\n\n# 使用 keeppreviousdata 滞后无限查询结果\n\n](https://tanstack.com/query/latest/docs/react/guides/paginated-queries#lagging-infinite-query-results-with-keeppreviousdata)\n\n虽然不那么常见，但 keeppreviousdata 选项也可以与 useinfinitequery 挂钩完美配合，因此您可以无缝地让您的用户继续查看缓存数据，同时无限查询键随时间变化。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"初始化查询数据",frontmatter:{title:"初始化查询数据",date:"2023-03-27T22:55:15.000Z",permalink:"/pages/a17f72/"},regularPath:"/01.%E6%96%87%E6%A1%A3/02.%E6%8C%87%E5%8D%97%E5%92%8C%E6%A6%82%E5%BF%B5/13.%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE.html",relativePath:"01.文档/02.指南和概念/13.初始化查询数据.md",key:"v-54ddb50d",path:"/pages/a17f72/",headers:[{level:2,title:"使用 initialData 预填充查询",slug:"使用-initialdata-预填充查询",normalizedTitle:"使用 initialdata 预填充查询",charIndex:190},{level:3,title:"staleTime 和 initialDataUpdatedAt",slug:"staletime-和-initialdataupdatedat",normalizedTitle:"staletime 和 initialdataupdatedat",charIndex:617},{level:3,title:"初始数据函数",slug:"初始数据函数",normalizedTitle:"初始数据函数",charIndex:2335},{level:3,title:"来自缓存的初始数据",slug:"来自缓存的初始数据",normalizedTitle:"来自缓存的初始数据",charIndex:2672},{level:3,title:"带有 initialDataUpdatedAt 的缓存中的初始数据",slug:"带有-initialdataupdatedat-的缓存中的初始数据",normalizedTitle:"带有 initialdataupdatedat 的缓存中的初始数据",charIndex:3150},{level:3,title:"来自缓存的条件初始数据",slug:"来自缓存的条件初始数据",normalizedTitle:"来自缓存的条件初始数据",charIndex:3773},{level:2,title:"延伸阅读",slug:"延伸阅读",normalizedTitle:"延伸阅读",charIndex:4579}],headersStr:"使用 initialData 预填充查询 staleTime 和 initialDataUpdatedAt 初始数据函数 来自缓存的初始数据 带有 initialDataUpdatedAt 的缓存中的初始数据 来自缓存的条件初始数据 延伸阅读",content:"# Initial Query Data\n\n有许多方法可以在您需要之前为缓存提供查询的初始数据：\n\n * 声明地：\n   * 向查询提供 initialData 以在空时预填充其缓存\n * 势在必行：\n   * 使用 queryClient.prefetchQuery 预取数据\n   * 使用 queryClient.setQueryData 手动将数据放入缓存\n\n[\n\n\n# 使用 initialData 预填充查询\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#using-initialdata-to-prepopulate-a-query)\n\n有时，您的应用程序中可能已经拥有查询的初始数据，并且可以直接将其提供给您的查询。如果是这种情况，您可以使用 config.initialData 选项设置查询的初始数据并跳过初始加载状态！\n\n> 重要提示：initialData 持久保存到缓存中，因此不建议为此选项提供占位符、部分或不完整数据，而是使用 placeholderData\n\nconst result = useQuery({  queryKey: ['todos'],  queryFn: () => fetch('/todos'),  initialData: initialTodos,})\n\n\n[\n\n\n# staleTime 和 initialDataUpdatedAt\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#staletime-and-initialdataupdatedat)\n\n默认情况下，initialData 被视为完全新鲜的，就像刚刚获取的一样。这也意味着它将影响 staleTime 选项如何解释它。\n\n * 如果您使用 initialData 配置查询观察器，并且没有 staleTime（默认的 staleTime：0），则查询将在挂载时立即重新获取：\n   \n   // Will show initialTodos immediately, but also immediately refetch todos after mountconst result = useQuery({  queryKey: ['todos'],  queryFn: () => fetch('/todos'),  initialData: initialTodos,})\n   \n\n * 如果您使用 initialData 和 1000 毫秒的 staleTime 配置您的查询观察器，那么在相同的时间内数据将被视为新鲜的，就好像它刚刚从您的查询函数中获取一样。\n   \n   // Show initialTodos immediately, but won't refetch until another interaction event is encountered after 1000 msconst result = useQuery({  queryKey: ['todos'],  queryFn: () => fetch('/todos'),  initialData: initialTodos,  staleTime: 1000,})\n   \n\n * 那么，如果您的 initialData 不是完全新鲜的怎么办？这给我们留下了实际上最准确的最后一个配置，并使用了一个名为 initialDataUpdatedAt 的选项。此选项允许您传递一个数字 JS 时间戳，以毫秒为单位，即 initialData 本身最后一次更新的时间，例如Date.now() 提供了什么。请注意，如果您有 unix 时间戳，则需要将其乘以 1000 将其转换为 JS 时间戳。\n   \n   // Show initialTodos immediately, but won't refetch until another interaction event is encountered after 1000 msconst result = useQuery({  queryKey: ['todos'],  queryFn: () => fetch('/todos'),  initialData: initialTodos,  staleTime: 60 * 1000, // 1 minute  // This could be 10 seconds ago or 10 minutes ago  initialDataUpdatedAt: initialTodosUpdatedTimestamp, // eg. 1608412420052})\n   \n   \n   此选项允许将 staleTime 用于其原始目的，确定数据需要的新鲜度，同时如果 initialData 比 staleTime 旧，则还允许在挂载时重新获取数据。在上面的示例中，我们的数据需要在 1 分钟内刷新，我们可以提示查询上次更新 initialData 的时间，以便查询可以自行决定是否需要再次重新获取数据。\n   \n   > 如果您更愿意将数据视为预取数据，我们建议您使用 prefetchQuery 或 fetchQuery API 预先填充缓存，从而让您独立于 initialData 配置 staleTime\n\n[\n\n\n# 初始数据函数\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-function)\n\n如果访问查询的初始数据的过程很密集，或者您不想在每次渲染时都执行某些操作，则可以传递一个函数作为 initialData 值。这个函数只会在查询初始化时执行一次，为您节省宝贵的内存和/或 CPU：\n\nconst result = useQuery({  queryKey: ['todos'],  queryFn: () => fetch('/todos'),  initialData: () => getExpensiveTodos(),})\n\n\n[\n\n\n# 来自缓存的初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-from-cache)\n\n在某些情况下，您可以从另一个查询的缓存结果中为查询提供初始数据。一个很好的例子是从待办事项列表查询中搜索缓存数据以查找单个待办事项，然后将其用作个人待办事项查询的初始数据：\n\nconst result = useQuery({  queryKey: ['todo', todoId],  queryFn: () => fetch('/todos'),  initialData: () => {    // Use a todo from the 'todos' query as the initial data for this todo query    return queryClient.getQueryData(['todos'])?.find((d) => d.id === todoId)  },})\n\n\n[\n\n\n# 带有 initialDataUpdatedAt 的缓存中的初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-from-the-cache-with-initialdataupdatedat)\n\n从缓存中获取初始数据意味着您用来查找初始数据的源查询可能很旧，但是 initialData。建议您将源查询的 dataUpdatedAt 传递给 initialDataUpdatedAt，而不是使用人为的 staleTime 来防止您的查询立即重新获取。这为查询实例提供了确定是否以及何时需要重新获取查询所需的所有信息，而不管提供的初始数据如何。\n\nconst result = useQuery({  queryKey: ['todos', todoId],  queryFn: () => fetch(`/todos/${todoId}`),  initialData: () =>    queryClient.getQueryData(['todos'])?.find((d) => d.id === todoId),  initialDataUpdatedAt: () =>    queryClient.getQueryState(['todos'])?.dataUpdatedAt,})\n\n\n[\n\n\n# 来自缓存的条件初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#conditional-initial-data-from-cache)\n\n如果您用来查找初始数据的源查询是旧的，您可能根本不想使用缓存数据而只是从服务器获取。为了使这个决定更容易，您可以使用 queryClient.getQueryState 方法来获取有关源查询的更多信息，包括 state.dataUpdatedAt 时间戳，您可以使用它来确定查询是否“新鲜”足以满足您的需求：\n\nconst result = useQuery({  queryKey: ['todo', todoId],  queryFn: () => fetch(`/todos/${todoId}`),  initialData: () => {    // Get the query state    const state = queryClient.getQueryState(['todos'])\n    // If the query exists and has data that is no older than 10 seconds...    if (state && Date.now() - state.dataUpdatedAt <= 10 * 1000) {      // return the individual todo      return state.data.find((d) => d.id === todoId)    }\n    // Otherwise, return undefined and let it fetch from a hard loading state!  },})\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#further-reading)\n\n要比较初始数据和占位符数据，请查看社区资源。\n\n在 GitHub 上编辑",normalizedContent:"# initial query data\n\n有许多方法可以在您需要之前为缓存提供查询的初始数据：\n\n * 声明地：\n   * 向查询提供 initialdata 以在空时预填充其缓存\n * 势在必行：\n   * 使用 queryclient.prefetchquery 预取数据\n   * 使用 queryclient.setquerydata 手动将数据放入缓存\n\n[\n\n\n# 使用 initialdata 预填充查询\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#using-initialdata-to-prepopulate-a-query)\n\n有时，您的应用程序中可能已经拥有查询的初始数据，并且可以直接将其提供给您的查询。如果是这种情况，您可以使用 config.initialdata 选项设置查询的初始数据并跳过初始加载状态！\n\n> 重要提示：initialdata 持久保存到缓存中，因此不建议为此选项提供占位符、部分或不完整数据，而是使用 placeholderdata\n\nconst result = usequery({  querykey: ['todos'],  queryfn: () => fetch('/todos'),  initialdata: initialtodos,})\n\n\n[\n\n\n# staletime 和 initialdataupdatedat\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#staletime-and-initialdataupdatedat)\n\n默认情况下，initialdata 被视为完全新鲜的，就像刚刚获取的一样。这也意味着它将影响 staletime 选项如何解释它。\n\n * 如果您使用 initialdata 配置查询观察器，并且没有 staletime（默认的 staletime：0），则查询将在挂载时立即重新获取：\n   \n   // will show initialtodos immediately, but also immediately refetch todos after mountconst result = usequery({  querykey: ['todos'],  queryfn: () => fetch('/todos'),  initialdata: initialtodos,})\n   \n\n * 如果您使用 initialdata 和 1000 毫秒的 staletime 配置您的查询观察器，那么在相同的时间内数据将被视为新鲜的，就好像它刚刚从您的查询函数中获取一样。\n   \n   // show initialtodos immediately, but won't refetch until another interaction event is encountered after 1000 msconst result = usequery({  querykey: ['todos'],  queryfn: () => fetch('/todos'),  initialdata: initialtodos,  staletime: 1000,})\n   \n\n * 那么，如果您的 initialdata 不是完全新鲜的怎么办？这给我们留下了实际上最准确的最后一个配置，并使用了一个名为 initialdataupdatedat 的选项。此选项允许您传递一个数字 js 时间戳，以毫秒为单位，即 initialdata 本身最后一次更新的时间，例如date.now() 提供了什么。请注意，如果您有 unix 时间戳，则需要将其乘以 1000 将其转换为 js 时间戳。\n   \n   // show initialtodos immediately, but won't refetch until another interaction event is encountered after 1000 msconst result = usequery({  querykey: ['todos'],  queryfn: () => fetch('/todos'),  initialdata: initialtodos,  staletime: 60 * 1000, // 1 minute  // this could be 10 seconds ago or 10 minutes ago  initialdataupdatedat: initialtodosupdatedtimestamp, // eg. 1608412420052})\n   \n   \n   此选项允许将 staletime 用于其原始目的，确定数据需要的新鲜度，同时如果 initialdata 比 staletime 旧，则还允许在挂载时重新获取数据。在上面的示例中，我们的数据需要在 1 分钟内刷新，我们可以提示查询上次更新 initialdata 的时间，以便查询可以自行决定是否需要再次重新获取数据。\n   \n   > 如果您更愿意将数据视为预取数据，我们建议您使用 prefetchquery 或 fetchquery api 预先填充缓存，从而让您独立于 initialdata 配置 staletime\n\n[\n\n\n# 初始数据函数\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-function)\n\n如果访问查询的初始数据的过程很密集，或者您不想在每次渲染时都执行某些操作，则可以传递一个函数作为 initialdata 值。这个函数只会在查询初始化时执行一次，为您节省宝贵的内存和/或 cpu：\n\nconst result = usequery({  querykey: ['todos'],  queryfn: () => fetch('/todos'),  initialdata: () => getexpensivetodos(),})\n\n\n[\n\n\n# 来自缓存的初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-from-cache)\n\n在某些情况下，您可以从另一个查询的缓存结果中为查询提供初始数据。一个很好的例子是从待办事项列表查询中搜索缓存数据以查找单个待办事项，然后将其用作个人待办事项查询的初始数据：\n\nconst result = usequery({  querykey: ['todo', todoid],  queryfn: () => fetch('/todos'),  initialdata: () => {    // use a todo from the 'todos' query as the initial data for this todo query    return queryclient.getquerydata(['todos'])?.find((d) => d.id === todoid)  },})\n\n\n[\n\n\n# 带有 initialdataupdatedat 的缓存中的初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#initial-data-from-the-cache-with-initialdataupdatedat)\n\n从缓存中获取初始数据意味着您用来查找初始数据的源查询可能很旧，但是 initialdata。建议您将源查询的 dataupdatedat 传递给 initialdataupdatedat，而不是使用人为的 staletime 来防止您的查询立即重新获取。这为查询实例提供了确定是否以及何时需要重新获取查询所需的所有信息，而不管提供的初始数据如何。\n\nconst result = usequery({  querykey: ['todos', todoid],  queryfn: () => fetch(`/todos/${todoid}`),  initialdata: () =>    queryclient.getquerydata(['todos'])?.find((d) => d.id === todoid),  initialdataupdatedat: () =>    queryclient.getquerystate(['todos'])?.dataupdatedat,})\n\n\n[\n\n\n# 来自缓存的条件初始数据\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#conditional-initial-data-from-cache)\n\n如果您用来查找初始数据的源查询是旧的，您可能根本不想使用缓存数据而只是从服务器获取。为了使这个决定更容易，您可以使用 queryclient.getquerystate 方法来获取有关源查询的更多信息，包括 state.dataupdatedat 时间戳，您可以使用它来确定查询是否“新鲜”足以满足您的需求：\n\nconst result = usequery({  querykey: ['todo', todoid],  queryfn: () => fetch(`/todos/${todoid}`),  initialdata: () => {    // get the query state    const state = queryclient.getquerystate(['todos'])\n    // if the query exists and has data that is no older than 10 seconds...    if (state && date.now() - state.dataupdatedat <= 10 * 1000) {      // return the individual todo      return state.data.find((d) => d.id === todoid)    }\n    // otherwise, return undefined and let it fetch from a hard loading state!  },})\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/guides/initial-query-data#further-reading)\n\n要比较初始数据和占位符数据，请查看社区资源。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useQueries",frontmatter:{title:"useQueries",date:"2023-03-27T22:56:58.000Z",permalink:"/pages/14ba95/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/02.useQueries.html",relativePath:"01.文档/03.API参考/02.useQueries.md",key:"v-2245dff0",path:"/pages/14ba95/",headersStr:null,content:"# useQueries\n\nuseQueries 挂钩可用于获取可变数量的查询：\n\nconst results = useQueries({  queries: [    { queryKey: ['post', 1], queryFn: fetchPost, staleTime: Infinity},    { queryKey: ['post', 2], queryFn: fetchPost, staleTime: Infinity}  ]})\n\n\n选项\n\nuseQueries 挂钩接受带有查询键的选项对象，其值是一个数组，其中包含与 useQuery 挂钩相同的查询选项对象（不包括上下文选项）。\n\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n> 在查询对象数组中多次使用相同的查询键可能会导致某些数据在查询之间共享，例如使用 placeholderData 和选择时。为避免这种情况，请考虑对查询进行去重并将结果映射回所需的结构。\n\nReturns\n\nuseQueries 钩子返回一个包含所有查询结果的数组。\n\n在 GitHub 上编辑",normalizedContent:"# usequeries\n\nusequeries 挂钩可用于获取可变数量的查询：\n\nconst results = usequeries({  queries: [    { querykey: ['post', 1], queryfn: fetchpost, staletime: infinity},    { querykey: ['post', 2], queryfn: fetchpost, staletime: infinity}  ]})\n\n\n选项\n\nusequeries 挂钩接受带有查询键的选项对象，其值是一个数组，其中包含与 usequery 挂钩相同的查询选项对象（不包括上下文选项）。\n\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n> 在查询对象数组中多次使用相同的查询键可能会导致某些数据在查询之间共享，例如使用 placeholderdata 和选择时。为避免这种情况，请考虑对查询进行去重并将结果映射回所需的结构。\n\nreturns\n\nusequeries 钩子返回一个包含所有查询结果的数组。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useInfiniteQuery",frontmatter:{title:"useInfiniteQuery",date:"2023-03-27T22:57:50.000Z",permalink:"/pages/579fc0/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/03.useInfiniteQuery.html",relativePath:"01.文档/03.API参考/03.useInfiniteQuery.md",key:"v-2d9dc22e",path:"/pages/579fc0/",headersStr:null,content:"# useInfiniteQuery\n\nconst {  fetchNextPage,  fetchPreviousPage,  hasNextPage,  hasPreviousPage,  isFetchingNextPage,  isFetchingPreviousPage,  ...result} = useInfiniteQuery({  queryKey,  queryFn: ({ pageParam = 1 }) => fetchPage(pageParam),  ...options,  getNextPageParam: (lastPage, allPages) => lastPage.nextCursor,  getPreviousPageParam: (firstPage, allPages) => firstPage.prevCursor,})\n\n\n选项\n\nuseInfiniteQuery 的选项与 useQuery 挂钩相同，但增加了以下内容：\n\n * queryFn: (context: QueryFunctionContext) => Promise<TData>\n   * 必需，但前提是没有定义默认查询函数 defaultQueryFn\n   * 查询将用于请求数据的函数。\n   * 接收 QueryFunctionContext\n   * 必须返回一个将解析数据或抛出错误的承诺。\n   * 如果需要在下面的道具中使用，请确保返回数据和 pageParam。\n * getNextPageParam: (lastPage, allPages) => 未知 |不明确的\n   * 当为这个查询接收到新数据时，这个函数接收无限数据列表的最后一页和所有页面的完整数组。\n   * 它应该返回一个变量，该变量将作为最后一个可选参数传递给您的查询函数。\n   * 返回 undefined 表示没有下一页可用。\n * getPreviousPageParam: (firstPage, allPages) => 未知 |不明确的\n   * 当为这个查询接收到新数据时，这个函数接收无限数据列表的第一页和所有页面的完整数组。\n   * 它应该返回一个变量，该变量将作为最后一个可选参数传递给您的查询函数。\n   * 返回 undefined 表示没有前一页可用。\n\nReturns\n\nuseInfiniteQuery 的返回属性与 useQuery 挂钩相同，除了以下内容和 isRefetching 中的细微差别：\n\n * 数据页：TData[]\n   * 包含所有页面的数组。\n * data.pageParams：未知[]\n   * 包含所有页面参数的数组。\n * isFetchingNextPage: 布尔值\n   * 使用 fetchNextPage 获取下一页时将为真。\n * isFetchingPreviousPage: 布尔值\n   * 使用 fetchPreviousPage 获取上一页时将为真。\n * fetchNextPage: (选项?: FetchNextPageOptions) => Promise<UseInfiniteQueryResult>\n   * 此函数允许您获取结果的下“页面”。\n   * options.pageParam: unknown 允许您手动指定页面参数，而不是使用 getNextPageParam。\n   * options.cancelRefetch：boolean 如果设置为 true，重复调用 fetchNextPage 每次都会调用 fetchPage，无论之前的调用是否已经解决。此外，先前调用的结果将被忽略。如果设置为 false，重复调用 fetchNextPage 将不会有任何效果，直到第一次调用已解决。默认为真。\n * fetchPreviousPage: (选项?: FetchPreviousPageOptions) => Promise<UseInfiniteQueryResult>\n   * 此函数允许您获取前“页面”的结果。\n   * options.pageParam: unknown 允许您手动指定页面参数，而不是使用 getPreviousPageParam。\n   * options.cancelRefetch：与 fetchNextPage 相同的布尔值。\n * hasNextPage: 布尔值\n   * 如果有下一页要获取（通过 getNextPageParam 选项知道），这将为真。\n * hasPreviousPage: 布尔值\n   * 如果有上一页要获取（通过 getPreviousPageParam 选项知道），这将为真。\n * isRefetching：布尔值\n   * 每当后台重新获取正在进行时为真，这不包括初始加载或获取下一页或上一页\n   * 与 isFetching && !isLoading && !isFetchingNextPage && !isFetchingPreviousPage 相同\n\n在 GitHub 上编辑",normalizedContent:"# useinfinitequery\n\nconst {  fetchnextpage,  fetchpreviouspage,  hasnextpage,  haspreviouspage,  isfetchingnextpage,  isfetchingpreviouspage,  ...result} = useinfinitequery({  querykey,  queryfn: ({ pageparam = 1 }) => fetchpage(pageparam),  ...options,  getnextpageparam: (lastpage, allpages) => lastpage.nextcursor,  getpreviouspageparam: (firstpage, allpages) => firstpage.prevcursor,})\n\n\n选项\n\nuseinfinitequery 的选项与 usequery 挂钩相同，但增加了以下内容：\n\n * queryfn: (context: queryfunctioncontext) => promise<tdata>\n   * 必需，但前提是没有定义默认查询函数 defaultqueryfn\n   * 查询将用于请求数据的函数。\n   * 接收 queryfunctioncontext\n   * 必须返回一个将解析数据或抛出错误的承诺。\n   * 如果需要在下面的道具中使用，请确保返回数据和 pageparam。\n * getnextpageparam: (lastpage, allpages) => 未知 |不明确的\n   * 当为这个查询接收到新数据时，这个函数接收无限数据列表的最后一页和所有页面的完整数组。\n   * 它应该返回一个变量，该变量将作为最后一个可选参数传递给您的查询函数。\n   * 返回 undefined 表示没有下一页可用。\n * getpreviouspageparam: (firstpage, allpages) => 未知 |不明确的\n   * 当为这个查询接收到新数据时，这个函数接收无限数据列表的第一页和所有页面的完整数组。\n   * 它应该返回一个变量，该变量将作为最后一个可选参数传递给您的查询函数。\n   * 返回 undefined 表示没有前一页可用。\n\nreturns\n\nuseinfinitequery 的返回属性与 usequery 挂钩相同，除了以下内容和 isrefetching 中的细微差别：\n\n * 数据页：tdata[]\n   * 包含所有页面的数组。\n * data.pageparams：未知[]\n   * 包含所有页面参数的数组。\n * isfetchingnextpage: 布尔值\n   * 使用 fetchnextpage 获取下一页时将为真。\n * isfetchingpreviouspage: 布尔值\n   * 使用 fetchpreviouspage 获取上一页时将为真。\n * fetchnextpage: (选项?: fetchnextpageoptions) => promise<useinfinitequeryresult>\n   * 此函数允许您获取结果的下“页面”。\n   * options.pageparam: unknown 允许您手动指定页面参数，而不是使用 getnextpageparam。\n   * options.cancelrefetch：boolean 如果设置为 true，重复调用 fetchnextpage 每次都会调用 fetchpage，无论之前的调用是否已经解决。此外，先前调用的结果将被忽略。如果设置为 false，重复调用 fetchnextpage 将不会有任何效果，直到第一次调用已解决。默认为真。\n * fetchpreviouspage: (选项?: fetchpreviouspageoptions) => promise<useinfinitequeryresult>\n   * 此函数允许您获取前“页面”的结果。\n   * options.pageparam: unknown 允许您手动指定页面参数，而不是使用 getpreviouspageparam。\n   * options.cancelrefetch：与 fetchnextpage 相同的布尔值。\n * hasnextpage: 布尔值\n   * 如果有下一页要获取（通过 getnextpageparam 选项知道），这将为真。\n * haspreviouspage: 布尔值\n   * 如果有上一页要获取（通过 getpreviouspageparam 选项知道），这将为真。\n * isrefetching：布尔值\n   * 每当后台重新获取正在进行时为真，这不包括初始加载或获取下一页或上一页\n   * 与 isfetching && !isloading && !isfetchingnextpage && !isfetchingpreviouspage 相同\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useQuery",frontmatter:{title:"useQuery",date:"2023-03-27T22:56:16.000Z",permalink:"/pages/c9540b/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/01.useQuery.html",relativePath:"01.文档/03.API参考/01.useQuery.md",key:"v-7f12c942",path:"/pages/c9540b/",headersStr:null,content:"# useQuery\n\nconst {\n  data,\n  dataUpdatedAt,\n  error,\n  errorUpdatedAt,\n  failureCount,\n  failureReason,\n  isError,\n  isFetched,\n  isFetchedAfterMount,\n  isFetching,\n  isPaused,\n  isLoading,\n  isLoadingError,\n  isPlaceholderData,\n  isPreviousData,\n  isRefetchError,\n  isRefetching,\n  isInitialLoading,\n  isStale,\n  isSuccess,\n  refetch,\n  remove,\n  status,\n  fetchStatus,\n} = useQuery({\n  queryKey,\n  queryFn,\n  cacheTime,\n  enabled,\n  networkMode,\n  initialData,\n  initialDataUpdatedAt,\n  keepPreviousData,\n  meta,\n  notifyOnChangeProps,\n  onError,\n  onSettled,\n  onSuccess,\n  placeholderData,\n  queryKeyHashFn,\n  refetchInterval,\n  refetchIntervalInBackground,\n  refetchOnMount,\n  refetchOnReconnect,\n  refetchOnWindowFocus,\n  retry,\n  retryOnMount,\n  retryDelay,\n  select,\n  staleTime,\n  structuralSharing,\n  suspense,\n  useErrorBoundary,\n});\n\n\n选项\n\n * queryKey: unknown[]\n   * 必需\n   * 用于此查询的查询键。\n   * 查询键将被散列成一个稳定的散列。有关详细信息，请参阅查询键。\n   * 当此键更改时，查询将自动更新（只要 enabled 未设置为 false）。\n * queryFn: (context: QueryFunctionContext) => Promise<TData>\n   * 必需，但前提是未定义默认查询函数。有关详细信息，请参阅默认查询函数。\n   * 查询将用于请求数据的函数。\n   * 接收 QueryFunctionContext\n   * 必须返回一个将解析数据或抛出错误的承诺。数据不能未定义。\n * enabled:boolean\n   * 将此设置为 false 以禁止此查询自动运行。\n   * 可用于相关查询。\n * networkMode: 'online' | 'always' | 'offlineFirst\n   * 可选\n   * 默认为“在线”\n   * 有关详细信息，请参阅网络模式。\n * retry: boolean | number | (failureCount: number, error: TError) => boolean\n   * 如果为 false，失败的查询默认不会重试。\n   * 如果为真，失败的查询将无限重试。\n   * 如果设置为数字，例如3、失败的查询会重试，直到失败的查询计数满足那个数。\n * retryOnMount:boolean\n   * 如果设置为 false，如果查询包含错误，则不会在挂载时重试。默认为真。\n * retryDelay:number | (retryAttempt: number, error: TError) => number\n   * 此函数接收一个 retryAttempt 整数和实际错误，并返回在下一次尝试之前应用的延迟（以毫秒为单位）。\n   * 像 attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) 这样的函数应用指数退避。\n   * 像 attempt => attempt * 1000 这样的函数应用线性退避。\n * staleTime: number |Infinity\n   * 可选\n   * 默认为 0\n   * 数据被认为过时后的时间（以毫秒为单位）。该值仅适用于定义它的挂钩。\n   * 如果设置为 Infinity，数据将永远不会被认为是陈旧的\n * cacheTime:number |Infinity\n   * 在 SSR 期间默认为 5 * 60 * 1000（5 分钟）或无限\n   * 未使用/非活动缓存数据保留在内存中的时间（以毫秒为单位）。当查询的缓存变为未使用或不活动时，该缓存数据将在这段时间后被垃圾收集。当指定不同的缓存时间时，将使用最长的一个。\n   * 如果设置为 Infinity，将禁用垃圾收集\n * queryKeyHashFn: (queryKey: QueryKey) => string\n   * 可选\n   * 如果指定，此函数用于将 queryKey 散列为字符串。\n * refetchInterval: number |false | ((data:TData | undefined，query: Query)=> number | false)\n   * 可选\n   * 如果设置为一个数字，所有查询将以毫秒为单位以该频率连续重新获取\n   * 如果设置为一个函数，该函数将使用最新的数据执行并查询以计算频率\n * refetchIntervalInBackground:boolean\n   * 可选\n   * 如果设置为 true，则设置为使用 refetchInterval 连续重新获取的查询将在其选项卡/窗口处于后台时继续重新获取\n * refetchOnMount:boolean | 'always' | ((query: Query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据过时，查询将在挂载时重新获取。\n   * 如果设置为 false，查询将不会在挂载时重新获取。\n   * 如果设置为“始终”，查询将始终在挂载时重新获取。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * refetchOnWindowFocus:boolean | 'always' | ((query: Query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据陈旧，查询将重新获取窗口焦点。\n   * 如果设置为 false，查询将不会重新获取窗口焦点。\n   * 如果设置为“始终”，查询将始终重新获取窗口焦点。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * refetchOnReconnect:boolean | 'always | ((query: Query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据过时，查询将在重新连接时重新获取。\n   * 如果设置为 false，查询将不会在重新连接时重新获取。\n   * 如果设置为“始终”，查询将始终在重新连接时重新获取。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * notifyOnChangeProps: string[] | 'all'\n   * 可选\n   * 如果设置，组件将仅在任何列出的属性更改时重新渲染。\n   * 例如，如果设置为 ['data', 'error']，组件将仅在数据或错误属性更改时重新呈现。\n   * 如果设置为“全部”，组件将选择退出智能跟踪并在更新查询时重新呈现。\n   * 默认情况下，将跟踪对属性的访问，并且仅当跟踪的属性之一发生更改时，组件才会重新呈现。\n * onSuccess: (数据: TData) => void\n   * 可选\n   * 只要查询成功获取新数据，此函数就会触发。\n * onError: (error: TError) => void\n   * 可选\n   * 如果查询遇到错误并将传递错误，则此函数将触发。\n * onSettled: (data?: TData, error?: TError) => void\n   * 可选\n   * 每当成功获取查询或出错并传递数据或错误时，此函数都会触发。\n * select:（数据:TData）=>未知\n   * 可选\n   * 此选项可用于转换或选择查询函数返回的部分数据。它会影响返回的数据值，但不会影响存储在查询缓存中的内容。\n * suspense:boolean\n   * 可选\n   * 将此设置为 true 以启用暂停模式。\n   * 当 true 时，useQuery 将在 status === 'loading' 时暂停\n   * 当 true 时，useQuery 将在 status === 'error' 时抛出运行时错误\n * initialData:TData | () => TData\n   * 可选\n   * 如果设置，此值将用作查询缓存的初始数据（只要尚未创建或缓存查询）\n   * 如果设置为一个函数，该函数将在共享/根查询初始化期间被调用一次，并期望同步返回 initialData\n   * 默认情况下，初始数据被认为是陈旧的，除非设置了 staleTime。\n   * initialData 被持久化到缓存\n * initialDataUpdatedAt: number | (() => number | undefined)\n   * 可选\n   * 如果设置，该值将用作上次更新 initialData 本身的时间（以毫秒为单位）。\n * placeholderData:TData | () => TData\n   * 可选\n   * 如果设置，当查询仍在加载数据中且未提供 initialData 时，此值将用作此特定查询观察器的占位符数据。\n   * placeholderData 不会持久化到缓存\n * keepPreviousData:boolean\n   * 可选\n   * 默认为假false\n   * 如果设置，则在获取新数据时将保留任何以前的数据，因为查询键已更改。\n * isDataEqual: (oldData: TData | undefined, newData: TData) => boolean\n   * 已弃用。您可以通过将函数传递给 structuralSharing 来实现相同的功能:\n     * structuralSharing: (oldData, newData) => isDataEqual(oldData, newData) ?旧数据:replaceEqualDeep（旧数据，新数据）\n   * 可选\n   * 此函数应返回布尔值，指示是使用以前的数据 (true) 还是使用新数据 (false) 作为查询的已解析数据。\n * structuralSharing: 布尔 | ((oldData: TData | undefined, newData: TData) => TData)\n   * 可选\n   * 默认为真\n   * 如果设置为 false，将禁用查询结果之间的结构共享。\n   * 如果设置为一个函数，旧数据值和新数据值将通过该函数传递，该函数应将它们组合成解析数据以供查询。这样，您可以保留旧数据的引用以提高性能，即使该数据包含不可序列化的值也是如此。\n * useErrorBoundary:undefined | boolean | (error:TError, query:Query=> boolean\n   * 默认为全局查询配置的 useErrorBoundary 值\n   * 如果您希望在渲染阶段抛出错误并传播到最近的错误边界，请将此设置为 true\n   * 将此设置为 false 以禁用 suspense 将错误抛出到错误边界的默认行为。\n   * 如果设置为函数，它将传递错误和查询，它应该返回一个布尔值，指示是在错误边界中显示错误 (true) 还是将错误作为状态返回 (false)\n * meta:Record<string, unknown>\n   * 可选\n   * 如果设置，则存储有关查询缓存条目的附加信息，可根据需要使用。只要查询可用，它就可以访问，它也是提供给 queryFn 的 QueryFunctionContext 的一部分。\n * context?:React.Context<QueryClient |undefined>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\nReturns\n\n * status:String\n   * 将:\n     * 如果没有缓存数据且查询尝试尚未完成，则加载。\n     * 如果查询尝试导致错误，则为错误。相应的错误属性具有从尝试获取中收到的错误\n     * 如果查询收到没有错误的响应并准备好显示其数据，则成功。查询上相应的数据属性是从成功获取中接收到的数据，或者如果查询的启用属性设置为 false 并且尚未获取数据，则数据是初始化时提供给查询的第一个 initialData。\n * isLoading:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * isSuccess:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * isError:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * isLoadingError:boolean\n   * 如果第一次获取时查询失败，则为真。\n * isRefetchError:boolean\n   * 如果查询在重新获取时失败，则为真。\n * data:TData\n   * 默认为未定义。\n   * 查询的最后一次成功解析的数据。\n * dataUpdatedAt:number\n   * 查询最近返回“成功”状态的时间戳。\n * error:null | TError\n   * 默认为空\n   * 查询的错误对象（如果抛出错误）。\n * errorUpdatedAt:number\n   * 查询最近一次将状态返回为“错误”的时间戳。\n * isStale:boolean\n   * 如果缓存中的数据无效或数据早于给定的 staleTime，则为真。\n * isPlaceholderData:boolean\n   * 如果显示的数据是占位符数据，则为真。\n * isPreviousData:boolean\n   * 当设置 keepPreviousData 并返回上一个查询的数据时将为真。\n * isFetched:boolean\n   * 如果已获取查询，则为真。\n * isFetchedAfterMount:boolean\n   * 如果在安装组件后获取了查询，则为真。\n   * 此属性可用于不显示任何以前缓存的数据。\n * fetchStatus:获取状态\n   * fetching:每当执行 queryFn 时为真，包括初始加载和后台重新获取。\n   * 暂停:查询想要获取，但已暂停。\n   * 空闲:查询未获取。\n   * 有关详细信息，请参阅网络模式。\n * isFetching:boolean\n   * 为方便起见，从上面的 fetchStatus 变量派生的布尔值。\n * isPaused:boolean\n   * 为方便起见，从上面的 fetchStatus 变量派生的布尔值。\n * isRefetching:boolean\n   * 每当后台重新获取正在进行时为真，这不包括初始加载\n   * 与 isFetching && !isLoading 相同\n * isInitialLoading:boolean\n   * 每当查询的第一次提取正在进行中时为真\n   * 与 isFetching && isLoading 相同\n * failureCount:number\n   * 查询的失败计数。\n   * 每次查询失败时递增。\n   * 查询成功时重置为 0。\n * failureReason:null | TError\n   * 查询重试的失败原因。\n   * 查询成功时重置为空。\n * errorUpdateCount: number\n   * 所有错误的总和。\n * refetch:(options:{throwOnError:boolean，cancelRefetch:boolean}) => Promise <UseQueryResult>\n   * 手动重新获取查询的函数。\n   * 如果查询出错，则只会记录错误。如果要抛出错误，请传递 throwOnError: true 选项\n   * cancelRefetch?: boolean\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n * remove:（）=>void\n   * 从缓存中删除查询的函数。\n\n在 GitHub 上编辑",normalizedContent:"# usequery\n\nconst {\n  data,\n  dataupdatedat,\n  error,\n  errorupdatedat,\n  failurecount,\n  failurereason,\n  iserror,\n  isfetched,\n  isfetchedaftermount,\n  isfetching,\n  ispaused,\n  isloading,\n  isloadingerror,\n  isplaceholderdata,\n  ispreviousdata,\n  isrefetcherror,\n  isrefetching,\n  isinitialloading,\n  isstale,\n  issuccess,\n  refetch,\n  remove,\n  status,\n  fetchstatus,\n} = usequery({\n  querykey,\n  queryfn,\n  cachetime,\n  enabled,\n  networkmode,\n  initialdata,\n  initialdataupdatedat,\n  keeppreviousdata,\n  meta,\n  notifyonchangeprops,\n  onerror,\n  onsettled,\n  onsuccess,\n  placeholderdata,\n  querykeyhashfn,\n  refetchinterval,\n  refetchintervalinbackground,\n  refetchonmount,\n  refetchonreconnect,\n  refetchonwindowfocus,\n  retry,\n  retryonmount,\n  retrydelay,\n  select,\n  staletime,\n  structuralsharing,\n  suspense,\n  useerrorboundary,\n});\n\n\n选项\n\n * querykey: unknown[]\n   * 必需\n   * 用于此查询的查询键。\n   * 查询键将被散列成一个稳定的散列。有关详细信息，请参阅查询键。\n   * 当此键更改时，查询将自动更新（只要 enabled 未设置为 false）。\n * queryfn: (context: queryfunctioncontext) => promise<tdata>\n   * 必需，但前提是未定义默认查询函数。有关详细信息，请参阅默认查询函数。\n   * 查询将用于请求数据的函数。\n   * 接收 queryfunctioncontext\n   * 必须返回一个将解析数据或抛出错误的承诺。数据不能未定义。\n * enabled:boolean\n   * 将此设置为 false 以禁止此查询自动运行。\n   * 可用于相关查询。\n * networkmode: 'online' | 'always' | 'offlinefirst\n   * 可选\n   * 默认为“在线”\n   * 有关详细信息，请参阅网络模式。\n * retry: boolean | number | (failurecount: number, error: terror) => boolean\n   * 如果为 false，失败的查询默认不会重试。\n   * 如果为真，失败的查询将无限重试。\n   * 如果设置为数字，例如3、失败的查询会重试，直到失败的查询计数满足那个数。\n * retryonmount:boolean\n   * 如果设置为 false，如果查询包含错误，则不会在挂载时重试。默认为真。\n * retrydelay:number | (retryattempt: number, error: terror) => number\n   * 此函数接收一个 retryattempt 整数和实际错误，并返回在下一次尝试之前应用的延迟（以毫秒为单位）。\n   * 像 attempt => math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) 这样的函数应用指数退避。\n   * 像 attempt => attempt * 1000 这样的函数应用线性退避。\n * staletime: number |infinity\n   * 可选\n   * 默认为 0\n   * 数据被认为过时后的时间（以毫秒为单位）。该值仅适用于定义它的挂钩。\n   * 如果设置为 infinity，数据将永远不会被认为是陈旧的\n * cachetime:number |infinity\n   * 在 ssr 期间默认为 5 * 60 * 1000（5 分钟）或无限\n   * 未使用/非活动缓存数据保留在内存中的时间（以毫秒为单位）。当查询的缓存变为未使用或不活动时，该缓存数据将在这段时间后被垃圾收集。当指定不同的缓存时间时，将使用最长的一个。\n   * 如果设置为 infinity，将禁用垃圾收集\n * querykeyhashfn: (querykey: querykey) => string\n   * 可选\n   * 如果指定，此函数用于将 querykey 散列为字符串。\n * refetchinterval: number |false | ((data:tdata | undefined，query: query)=> number | false)\n   * 可选\n   * 如果设置为一个数字，所有查询将以毫秒为单位以该频率连续重新获取\n   * 如果设置为一个函数，该函数将使用最新的数据执行并查询以计算频率\n * refetchintervalinbackground:boolean\n   * 可选\n   * 如果设置为 true，则设置为使用 refetchinterval 连续重新获取的查询将在其选项卡/窗口处于后台时继续重新获取\n * refetchonmount:boolean | 'always' | ((query: query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据过时，查询将在挂载时重新获取。\n   * 如果设置为 false，查询将不会在挂载时重新获取。\n   * 如果设置为“始终”，查询将始终在挂载时重新获取。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * refetchonwindowfocus:boolean | 'always' | ((query: query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据陈旧，查询将重新获取窗口焦点。\n   * 如果设置为 false，查询将不会重新获取窗口焦点。\n   * 如果设置为“始终”，查询将始终重新获取窗口焦点。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * refetchonreconnect:boolean | 'always | ((query: query) => boolean | \"always\")\n   * 可选\n   * 默认为真\n   * 如果设置为 true，如果数据过时，查询将在重新连接时重新获取。\n   * 如果设置为 false，查询将不会在重新连接时重新获取。\n   * 如果设置为“始终”，查询将始终在重新连接时重新获取。\n   * 如果设置为一个函数，该函数将与查询一起执行以计算值\n * notifyonchangeprops: string[] | 'all'\n   * 可选\n   * 如果设置，组件将仅在任何列出的属性更改时重新渲染。\n   * 例如，如果设置为 ['data', 'error']，组件将仅在数据或错误属性更改时重新呈现。\n   * 如果设置为“全部”，组件将选择退出智能跟踪并在更新查询时重新呈现。\n   * 默认情况下，将跟踪对属性的访问，并且仅当跟踪的属性之一发生更改时，组件才会重新呈现。\n * onsuccess: (数据: tdata) => void\n   * 可选\n   * 只要查询成功获取新数据，此函数就会触发。\n * onerror: (error: terror) => void\n   * 可选\n   * 如果查询遇到错误并将传递错误，则此函数将触发。\n * onsettled: (data?: tdata, error?: terror) => void\n   * 可选\n   * 每当成功获取查询或出错并传递数据或错误时，此函数都会触发。\n * select:（数据:tdata）=>未知\n   * 可选\n   * 此选项可用于转换或选择查询函数返回的部分数据。它会影响返回的数据值，但不会影响存储在查询缓存中的内容。\n * suspense:boolean\n   * 可选\n   * 将此设置为 true 以启用暂停模式。\n   * 当 true 时，usequery 将在 status === 'loading' 时暂停\n   * 当 true 时，usequery 将在 status === 'error' 时抛出运行时错误\n * initialdata:tdata | () => tdata\n   * 可选\n   * 如果设置，此值将用作查询缓存的初始数据（只要尚未创建或缓存查询）\n   * 如果设置为一个函数，该函数将在共享/根查询初始化期间被调用一次，并期望同步返回 initialdata\n   * 默认情况下，初始数据被认为是陈旧的，除非设置了 staletime。\n   * initialdata 被持久化到缓存\n * initialdataupdatedat: number | (() => number | undefined)\n   * 可选\n   * 如果设置，该值将用作上次更新 initialdata 本身的时间（以毫秒为单位）。\n * placeholderdata:tdata | () => tdata\n   * 可选\n   * 如果设置，当查询仍在加载数据中且未提供 initialdata 时，此值将用作此特定查询观察器的占位符数据。\n   * placeholderdata 不会持久化到缓存\n * keeppreviousdata:boolean\n   * 可选\n   * 默认为假false\n   * 如果设置，则在获取新数据时将保留任何以前的数据，因为查询键已更改。\n * isdataequal: (olddata: tdata | undefined, newdata: tdata) => boolean\n   * 已弃用。您可以通过将函数传递给 structuralsharing 来实现相同的功能:\n     * structuralsharing: (olddata, newdata) => isdataequal(olddata, newdata) ?旧数据:replaceequaldeep（旧数据，新数据）\n   * 可选\n   * 此函数应返回布尔值，指示是使用以前的数据 (true) 还是使用新数据 (false) 作为查询的已解析数据。\n * structuralsharing: 布尔 | ((olddata: tdata | undefined, newdata: tdata) => tdata)\n   * 可选\n   * 默认为真\n   * 如果设置为 false，将禁用查询结果之间的结构共享。\n   * 如果设置为一个函数，旧数据值和新数据值将通过该函数传递，该函数应将它们组合成解析数据以供查询。这样，您可以保留旧数据的引用以提高性能，即使该数据包含不可序列化的值也是如此。\n * useerrorboundary:undefined | boolean | (error:terror, query:query=> boolean\n   * 默认为全局查询配置的 useerrorboundary 值\n   * 如果您希望在渲染阶段抛出错误并传播到最近的错误边界，请将此设置为 true\n   * 将此设置为 false 以禁用 suspense 将错误抛出到错误边界的默认行为。\n   * 如果设置为函数，它将传递错误和查询，它应该返回一个布尔值，指示是在错误边界中显示错误 (true) 还是将错误作为状态返回 (false)\n * meta:record<string, unknown>\n   * 可选\n   * 如果设置，则存储有关查询缓存条目的附加信息，可根据需要使用。只要查询可用，它就可以访问，它也是提供给 queryfn 的 queryfunctioncontext 的一部分。\n * context?:react.context<queryclient |undefined>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\nreturns\n\n * status:string\n   * 将:\n     * 如果没有缓存数据且查询尝试尚未完成，则加载。\n     * 如果查询尝试导致错误，则为错误。相应的错误属性具有从尝试获取中收到的错误\n     * 如果查询收到没有错误的响应并准备好显示其数据，则成功。查询上相应的数据属性是从成功获取中接收到的数据，或者如果查询的启用属性设置为 false 并且尚未获取数据，则数据是初始化时提供给查询的第一个 initialdata。\n * isloading:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * issuccess:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * iserror:boolean\n   * 为方便起见，从上面的状态变量派生的布尔值。\n * isloadingerror:boolean\n   * 如果第一次获取时查询失败，则为真。\n * isrefetcherror:boolean\n   * 如果查询在重新获取时失败，则为真。\n * data:tdata\n   * 默认为未定义。\n   * 查询的最后一次成功解析的数据。\n * dataupdatedat:number\n   * 查询最近返回“成功”状态的时间戳。\n * error:null | terror\n   * 默认为空\n   * 查询的错误对象（如果抛出错误）。\n * errorupdatedat:number\n   * 查询最近一次将状态返回为“错误”的时间戳。\n * isstale:boolean\n   * 如果缓存中的数据无效或数据早于给定的 staletime，则为真。\n * isplaceholderdata:boolean\n   * 如果显示的数据是占位符数据，则为真。\n * ispreviousdata:boolean\n   * 当设置 keeppreviousdata 并返回上一个查询的数据时将为真。\n * isfetched:boolean\n   * 如果已获取查询，则为真。\n * isfetchedaftermount:boolean\n   * 如果在安装组件后获取了查询，则为真。\n   * 此属性可用于不显示任何以前缓存的数据。\n * fetchstatus:获取状态\n   * fetching:每当执行 queryfn 时为真，包括初始加载和后台重新获取。\n   * 暂停:查询想要获取，但已暂停。\n   * 空闲:查询未获取。\n   * 有关详细信息，请参阅网络模式。\n * isfetching:boolean\n   * 为方便起见，从上面的 fetchstatus 变量派生的布尔值。\n * ispaused:boolean\n   * 为方便起见，从上面的 fetchstatus 变量派生的布尔值。\n * isrefetching:boolean\n   * 每当后台重新获取正在进行时为真，这不包括初始加载\n   * 与 isfetching && !isloading 相同\n * isinitialloading:boolean\n   * 每当查询的第一次提取正在进行中时为真\n   * 与 isfetching && isloading 相同\n * failurecount:number\n   * 查询的失败计数。\n   * 每次查询失败时递增。\n   * 查询成功时重置为 0。\n * failurereason:null | terror\n   * 查询重试的失败原因。\n   * 查询成功时重置为空。\n * errorupdatecount: number\n   * 所有错误的总和。\n * refetch:(options:{throwonerror:boolean，cancelrefetch:boolean}) => promise <usequeryresult>\n   * 手动重新获取查询的函数。\n   * 如果查询出错，则只会记录错误。如果要抛出错误，请传递 throwonerror: true 选项\n   * cancelrefetch?: boolean\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n * remove:（）=>void\n   * 从缓存中删除查询的函数。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useMutation",frontmatter:{title:"useMutation",date:"2023-03-27T22:58:39.000Z",permalink:"/pages/1c32fa/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/04.useMutation.html",relativePath:"01.文档/03.API参考/04.useMutation.md",key:"v-5776902a",path:"/pages/1c32fa/",headersStr:null,content:"# useMutation\n\nconst {  data,  error,  isError,  isIdle,  isLoading,  isPaused,  isSuccess,  failureCount,  failureReason,  mutate,  mutateAsync,  reset,  status,} = useMutation({  mutationFn,  cacheTime,  mutationKey,  networkMode,  onError,  onMutate,  onSettled,  onSuccess,  retry,  retryDelay,  useErrorBoundary,  meta})\nmutate(variables, {  onError,  onSettled,  onSuccess,})\n\n\n选项\n\n * mutationFn: (变量: TVariables) => Promise<TData>\n   * 必需，但前提是未定义默认突变函数\n   * 执行异步任务并返回承诺的函数。\n   * variables 是 mutate 将传递给您的 mutationFn 的对象\n * 缓存时间：数字 |无穷\n   * 未使用/非活动缓存数据保留在内存中的时间（以毫秒为单位）。当突变的缓存变为未使用或不活动时，该缓存数据将在这段时间后被垃圾收集。当指定不同的缓存时间时，将使用最长的一个。\n   * 如果设置为 Infinity，将禁用垃圾收集\n * 突变键：字符串\n   * 选修的\n   * 可以将突变键设置为继承使用 queryClient.setMutationDefaults 设置的默认值或在开发工具中识别突变。\n * 网络模式：'在线' | '总是' | '离线优先\n   * 选修的\n   * 默认为“在线”\n   * 有关详细信息，请参阅网络模式。\n * onMutate: (变量: TVariables) => Promise<TContext |无效> |上下文 |空白\n   * 选修的\n   * 此函数将在触发变异函数之前触发，并传递变异函数将接收的相同变量\n   * 用于对资源执行乐观更新以希望突变成功\n   * 如果发生突变失败，此函数返回的值将传递给 onError 和 onSettled 函数，并且可用于回滚乐观更新。\n * onSuccess：（数据：TData，变量：TVariables，上下文？：TContext）=> Promise<unknown> |未知\n   * 选修的\n   * 该函数将在突变成功时触发，并将传递突变的结果。\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * onError: (err: TError, variables: TVariables, context?: TContext) => Promise<未知> |未知\n   * 选修的\n   * 如果突变遇到错误并将传递错误，则此函数将触发。\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * onSettled: (data: TData, error: TError, variables: TVariables, context?: TContext) => Promise<未知> |未知\n   * 选修的\n   * 当成功获取突变或遇到错误并传递数据或错误时，此函数将触发\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * 重试：布尔值 |编号 | (failureCount: number, error: TError) => 布尔值\n   * 默认为 0。\n   * 如果为假，失败的突变将不会重试。\n   * 如果为真，失败的突变将无限重试。\n   * 如果设置为数字，例如3，失败的突变会重试，直到失败的突变计数满足该数量。\n * 重试延迟：数字 | (retryAttempt: number, error: TError) => number\n   * 此函数接收一个 retryAttempt 整数和实际错误，并返回在下一次尝试之前应用的延迟（以毫秒为单位）。\n   * 像 attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) 这样的函数应用指数退避。\n   * 像 attempt => attempt * 1000 这样的函数应用线性退避。\n * 使用错误边界：未定义 |布尔 | （错误：TError）=> 布尔值\n   * 默认为全局查询配置的 useErrorBoundary 值，未定义\n   * 如果您希望在渲染阶段抛出变异错误并传播到最近的错误边界，请将此设置为 true\n   * 将此设置为 false 以禁用将错误抛出到错误边界的行为。\n   * 如果设置为函数，它将传递错误并返回一个布尔值，指示是在错误边界中显示错误 (true) 还是将错误作为状态返回 (false)\n * 元：记录<字符串，未知>\n   * 选修的\n   * 如果设置，则存储有关可根据需要使用的突变缓存条目的附加信息。只要突变可用，它就可以访问（例如 MutationCache 的 onError、onSuccess 函数）。\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\nReturns\n\n * 变异：（变量：TVariables，{onSuccess，onSettled，onError}）=>无效\n   * 您可以使用变量调用突变函数来触发突变，并可选择挂钩其他回调选项。\n   * 变量：TV变量\n     * 选修的\n     * 要传递给 mutationFn 的变量对象。\n   * onSuccess:（数据：TData，变量：TVariables，上下文：TContext）=>无效\n     * 选修的\n     * 该函数将在突变成功时触发，并将传递突变的结果。\n     * void 函数，返回值将被忽略\n   * onError: (err: TError, variables: TVariables, context: TContext | undefined) => 无效\n     * 选修的\n     * 如果突变遇到错误并将传递错误，则此函数将触发。\n     * void 函数，返回值将被忽略\n   * onSettled：（数据：TData | undefined，错误：TError | null，变量：TVariables，上下文：TContext | undefined）=> void\n     * 选修的\n     * 当成功获取突变或遇到错误并传递数据或错误时，此函数将触发\n     * void 函数，返回值将被忽略\n   * 如果您发出多个请求，onSuccess 只会在您最近一次调用后触发。\n * mutateAsync: (变量: TVariables, { onSuccess, onSettled, onError }) => Promise<TData>\n   * 类似于 mutate 但返回一个可以等待的承诺。\n * 状态：字符串\n   * 将：\n     * 变异函数执行前的空闲初始状态。\n     * 如果当前正在执行突变，则加载。\n     * 如果最后一次突变尝试导致错误，则为错误。\n     * 如果最后一次突变尝试成功，则成功。\n * isIdle、isLoading、isSuccess、isError：从状态派生的布尔变量\n * 暂停：布尔值\n   * 如果突变已暂停，则为真\n   * 有关详细信息，请参阅网络模式。\n * 数据：未定义 |未知\n   * 默认为未定义\n   * 查询的最后一次成功解析的数据。\n * 错误：空 |恐怖\n   * 如果遇到错误，查询的错误对象。\n * 重置：（）=>无效\n   * 清除突变内部状态的函数（即，它将突变重置为其初始状态）。\n * 失败计数：数字\n   * 突变的失败计数。\n   * 每次突变失败时增加。\n   * 突变成功时重置为 0。\n * 失败原因：空 |恐怖\n   * 突变重试的失败原因。\n   * 突变成功时重置为 null。\n\n在 GitHub 上编辑",normalizedContent:"# usemutation\n\nconst {  data,  error,  iserror,  isidle,  isloading,  ispaused,  issuccess,  failurecount,  failurereason,  mutate,  mutateasync,  reset,  status,} = usemutation({  mutationfn,  cachetime,  mutationkey,  networkmode,  onerror,  onmutate,  onsettled,  onsuccess,  retry,  retrydelay,  useerrorboundary,  meta})\nmutate(variables, {  onerror,  onsettled,  onsuccess,})\n\n\n选项\n\n * mutationfn: (变量: tvariables) => promise<tdata>\n   * 必需，但前提是未定义默认突变函数\n   * 执行异步任务并返回承诺的函数。\n   * variables 是 mutate 将传递给您的 mutationfn 的对象\n * 缓存时间：数字 |无穷\n   * 未使用/非活动缓存数据保留在内存中的时间（以毫秒为单位）。当突变的缓存变为未使用或不活动时，该缓存数据将在这段时间后被垃圾收集。当指定不同的缓存时间时，将使用最长的一个。\n   * 如果设置为 infinity，将禁用垃圾收集\n * 突变键：字符串\n   * 选修的\n   * 可以将突变键设置为继承使用 queryclient.setmutationdefaults 设置的默认值或在开发工具中识别突变。\n * 网络模式：'在线' | '总是' | '离线优先\n   * 选修的\n   * 默认为“在线”\n   * 有关详细信息，请参阅网络模式。\n * onmutate: (变量: tvariables) => promise<tcontext |无效> |上下文 |空白\n   * 选修的\n   * 此函数将在触发变异函数之前触发，并传递变异函数将接收的相同变量\n   * 用于对资源执行乐观更新以希望突变成功\n   * 如果发生突变失败，此函数返回的值将传递给 onerror 和 onsettled 函数，并且可用于回滚乐观更新。\n * onsuccess：（数据：tdata，变量：tvariables，上下文？：tcontext）=> promise<unknown> |未知\n   * 选修的\n   * 该函数将在突变成功时触发，并将传递突变的结果。\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * onerror: (err: terror, variables: tvariables, context?: tcontext) => promise<未知> |未知\n   * 选修的\n   * 如果突变遇到错误并将传递错误，则此函数将触发。\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * onsettled: (data: tdata, error: terror, variables: tvariables, context?: tcontext) => promise<未知> |未知\n   * 选修的\n   * 当成功获取突变或遇到错误并传递数据或错误时，此函数将触发\n   * 如果返回一个承诺，它将在继续之前等待并解决\n * 重试：布尔值 |编号 | (failurecount: number, error: terror) => 布尔值\n   * 默认为 0。\n   * 如果为假，失败的突变将不会重试。\n   * 如果为真，失败的突变将无限重试。\n   * 如果设置为数字，例如3，失败的突变会重试，直到失败的突变计数满足该数量。\n * 重试延迟：数字 | (retryattempt: number, error: terror) => number\n   * 此函数接收一个 retryattempt 整数和实际错误，并返回在下一次尝试之前应用的延迟（以毫秒为单位）。\n   * 像 attempt => math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) 这样的函数应用指数退避。\n   * 像 attempt => attempt * 1000 这样的函数应用线性退避。\n * 使用错误边界：未定义 |布尔 | （错误：terror）=> 布尔值\n   * 默认为全局查询配置的 useerrorboundary 值，未定义\n   * 如果您希望在渲染阶段抛出变异错误并传播到最近的错误边界，请将此设置为 true\n   * 将此设置为 false 以禁用将错误抛出到错误边界的行为。\n   * 如果设置为函数，它将传递错误并返回一个布尔值，指示是在错误边界中显示错误 (true) 还是将错误作为状态返回 (false)\n * 元：记录<字符串，未知>\n   * 选修的\n   * 如果设置，则存储有关可根据需要使用的突变缓存条目的附加信息。只要突变可用，它就可以访问（例如 mutationcache 的 onerror、onsuccess 函数）。\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\nreturns\n\n * 变异：（变量：tvariables，{onsuccess，onsettled，onerror}）=>无效\n   * 您可以使用变量调用突变函数来触发突变，并可选择挂钩其他回调选项。\n   * 变量：tv变量\n     * 选修的\n     * 要传递给 mutationfn 的变量对象。\n   * onsuccess:（数据：tdata，变量：tvariables，上下文：tcontext）=>无效\n     * 选修的\n     * 该函数将在突变成功时触发，并将传递突变的结果。\n     * void 函数，返回值将被忽略\n   * onerror: (err: terror, variables: tvariables, context: tcontext | undefined) => 无效\n     * 选修的\n     * 如果突变遇到错误并将传递错误，则此函数将触发。\n     * void 函数，返回值将被忽略\n   * onsettled：（数据：tdata | undefined，错误：terror | null，变量：tvariables，上下文：tcontext | undefined）=> void\n     * 选修的\n     * 当成功获取突变或遇到错误并传递数据或错误时，此函数将触发\n     * void 函数，返回值将被忽略\n   * 如果您发出多个请求，onsuccess 只会在您最近一次调用后触发。\n * mutateasync: (变量: tvariables, { onsuccess, onsettled, onerror }) => promise<tdata>\n   * 类似于 mutate 但返回一个可以等待的承诺。\n * 状态：字符串\n   * 将：\n     * 变异函数执行前的空闲初始状态。\n     * 如果当前正在执行突变，则加载。\n     * 如果最后一次突变尝试导致错误，则为错误。\n     * 如果最后一次突变尝试成功，则成功。\n * isidle、isloading、issuccess、iserror：从状态派生的布尔变量\n * 暂停：布尔值\n   * 如果突变已暂停，则为真\n   * 有关详细信息，请参阅网络模式。\n * 数据：未定义 |未知\n   * 默认为未定义\n   * 查询的最后一次成功解析的数据。\n * 错误：空 |恐怖\n   * 如果遇到错误，查询的错误对象。\n * 重置：（）=>无效\n   * 清除突变内部状态的函数（即，它将突变重置为其初始状态）。\n * 失败计数：数字\n   * 突变的失败计数。\n   * 每次突变失败时增加。\n   * 突变成功时重置为 0。\n * 失败原因：空 |恐怖\n   * 突变重试的失败原因。\n   * 突变成功时重置为 null。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useIsFetching",frontmatter:{title:"useIsFetching",date:"2023-03-27T22:59:05.000Z",permalink:"/pages/a75465/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/05.useIsFetching.html",relativePath:"01.文档/03.API参考/05.useIsFetching.md",key:"v-5cf913ea",path:"/pages/a75465/",headersStr:null,content:"# useIsFetching\n\nuseIsFetching 是一个可选的钩子，它返回您的应用程序在后台加载或获取的查询数量（对于应用程序范围的加载指示器很有用）。\n\nimport { useIsFetching } from '@tanstack/react-query'// How many queries are fetching?const isFetching = useIsFetching()// How many queries matching the posts prefix are fetching?const isFetchingPosts = useIsFetching({ queryKey: ['posts'] })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\nReturns\n\n * isFetching: 数字\n   * 将是您的应用程序当前正在后台加载或获取的查询数。\n\n在 GitHub 上编辑",normalizedContent:"# useisfetching\n\nuseisfetching 是一个可选的钩子，它返回您的应用程序在后台加载或获取的查询数量（对于应用程序范围的加载指示器很有用）。\n\nimport { useisfetching } from '@tanstack/react-query'// how many queries are fetching?const isfetching = useisfetching()// how many queries matching the posts prefix are fetching?const isfetchingposts = useisfetching({ querykey: ['posts'] })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\nreturns\n\n * isfetching: 数字\n   * 将是您的应用程序当前正在后台加载或获取的查询数。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueryClient",frontmatter:{title:"QueryClient",date:"2023-03-27T23:01:02.000Z",permalink:"/pages/a861fb/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/07.QueryClient.html",relativePath:"01.文档/03.API参考/07.QueryClient.md",key:"v-1868812c",path:"/pages/a861fb/",headers:[{level:2,title:"QueryClient",slug:"queryclient-2",normalizedTitle:"queryclient",charIndex:2},{level:2,title:"queryClient.fetchQuery",slug:"queryclient-fetchquery",normalizedTitle:"queryclient.fetchquery",charIndex:394},{level:2,title:"queryClient.fetchInfiniteQuery",slug:"queryclient-fetchinfinitequery",normalizedTitle:"queryclient.fetchinfinitequery",charIndex:420},{level:2,title:"queryClient.prefetchQuery",slug:"queryclient-prefetchquery",normalizedTitle:"queryclient.prefetchquery",charIndex:307},{level:2,title:"queryClient.prefetchInfiniteQuery",slug:"queryclient-prefetchinfinitequery",normalizedTitle:"queryclient.prefetchinfinitequery",charIndex:483},{level:2,title:"queryClient.getQueryData",slug:"queryclient-getquerydata",normalizedTitle:"queryclient.getquerydata",charIndex:520},{level:2,title:"queryClient.ensureQueryData",slug:"queryclient-ensurequerydata",normalizedTitle:"queryclient.ensurequerydata",charIndex:548},{level:2,title:"queryClient.getQueriesData",slug:"queryclient-getqueriesdata",normalizedTitle:"queryclient.getqueriesdata",charIndex:579},{level:2,title:"queryClient.setQueryData",slug:"queryclient-setquerydata",normalizedTitle:"queryclient.setquerydata",charIndex:609},{level:2,title:"queryClient.getQueryState",slug:"queryclient-getquerystate",normalizedTitle:"queryclient.getquerystate",charIndex:637},{level:2,title:"queryClient.setQueriesData",slug:"queryclient-setqueriesdata",normalizedTitle:"queryclient.setqueriesdata",charIndex:666},{level:2,title:"queryClient.invalidateQueries",slug:"queryclient-invalidatequeries",normalizedTitle:"queryclient.invalidatequeries",charIndex:696},{level:2,title:"queryClient.refetchQueries",slug:"queryclient-refetchqueries",normalizedTitle:"queryclient.refetchqueries",charIndex:729},{level:2,title:"queryClient.cancelQueries",slug:"queryclient-cancelqueries",normalizedTitle:"queryclient.cancelqueries",charIndex:759},{level:2,title:"queryClient.removeQueries",slug:"queryclient-removequeries",normalizedTitle:"queryclient.removequeries",charIndex:788},{level:2,title:"queryClient.resetQueries",slug:"queryclient-resetqueries",normalizedTitle:"queryclient.resetqueries",charIndex:817},{level:2,title:"queryClient.isFetching",slug:"queryclient-isfetching",normalizedTitle:"queryclient.isfetching",charIndex:845},{level:2,title:"queryClient.isMutating",slug:"queryclient-ismutating",normalizedTitle:"queryclient.ismutating",charIndex:871},{level:2,title:"查询客户端.getLogger",slug:"查询客户端-getlogger",normalizedTitle:"查询客户端.getlogger",charIndex:897},{level:2,title:"queryClient.getDefaultOptions",slug:"queryclient-getdefaultoptions",normalizedTitle:"queryclient.getdefaultoptions",charIndex:916},{level:2,title:"queryClient.setDefaultOptions 设置默认选项",slug:"queryclient-setdefaultoptions-设置默认选项",normalizedTitle:"queryclient.setdefaultoptions 设置默认选项",charIndex:949},{level:2,title:"queryClient.getQueryDefaults",slug:"queryclient-getquerydefaults",normalizedTitle:"queryclient.getquerydefaults",charIndex:989},{level:2,title:"queryClient.setQueryDefaults",slug:"queryclient-setquerydefaults",normalizedTitle:"queryclient.setquerydefaults",charIndex:1021},{level:2,title:"queryClient.getMutationDefaults",slug:"queryclient-getmutationdefaults",normalizedTitle:"queryclient.getmutationdefaults",charIndex:1053},{level:2,title:"queryClient.setMutationDefaults",slug:"queryclient-setmutationdefaults",normalizedTitle:"queryclient.setmutationdefaults",charIndex:1088},{level:2,title:"查询客户端.getQueryCache",slug:"查询客户端-getquerycache",normalizedTitle:"查询客户端.getquerycache",charIndex:1123},{level:2,title:"queryClient.getMutationCache",slug:"queryclient-getmutationcache",normalizedTitle:"queryclient.getmutationcache",charIndex:1146},{level:2,title:"查询客户端.clear",slug:"查询客户端-clear",normalizedTitle:"查询客户端.clear",charIndex:1178},{level:2,title:"queryClient.resumePausedMutations",slug:"queryclient-resumepausedmutations",normalizedTitle:"queryclient.resumepausedmutations",charIndex:1193}],headersStr:"QueryClient queryClient.fetchQuery queryClient.fetchInfiniteQuery queryClient.prefetchQuery queryClient.prefetchInfiniteQuery queryClient.getQueryData queryClient.ensureQueryData queryClient.getQueriesData queryClient.setQueryData queryClient.getQueryState queryClient.setQueriesData queryClient.invalidateQueries queryClient.refetchQueries queryClient.cancelQueries queryClient.removeQueries queryClient.resetQueries queryClient.isFetching queryClient.isMutating 查询客户端.getLogger queryClient.getDefaultOptions queryClient.setDefaultOptions 设置默认选项 queryClient.getQueryDefaults queryClient.setQueryDefaults queryClient.getMutationDefaults queryClient.setMutationDefaults 查询客户端.getQueryCache queryClient.getMutationCache 查询客户端.clear queryClient.resumePausedMutations",content:"# QueryClient\n\n[\n\n\n# QueryClient\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclient)\n\nQueryClient 可用于与缓存交互：\n\nimport { QueryClient } from '@tanstack/react-query'\nconst queryClient = new QueryClient({  defaultOptions: {    queries: {      staleTime: Infinity,    },  },})\nawait queryClient.prefetchQuery({ queryKey: ['posts'], queryFn: fetchPosts })\n\n\n它可用的方法有：\n\n * queryClient.fetchQuery\n * queryClient.fetchInfiniteQuery\n * queryClient.prefetchQuery\n * queryClient.prefetchInfiniteQuery\n * queryClient.getQueryData\n * queryClient.ensureQueryData\n * queryClient.getQueriesData\n * queryClient.setQueryData\n * queryClient.getQueryState\n * queryClient.setQueriesData\n * queryClient.invalidateQueries\n * queryClient.refetchQueries\n * queryClient.cancelQueries\n * queryClient.removeQueries\n * queryClient.resetQueries\n * queryClient.isFetching\n * queryClient.isMutating\n * 查询客户端.getLogger\n * queryClient.getDefaultOptions\n * queryClient.setDefaultOptions 设置默认选项\n * queryClient.getQueryDefaults\n * queryClient.setQueryDefaults\n * queryClient.getMutationDefaults\n * queryClient.setMutationDefaults\n * 查询客户端.getQueryCache\n * queryClient.getMutationCache\n * 查询客户端.clear\n * queryClient.resumePausedMutations\n\n选项\n\n * 查询缓存？：查询缓存\n   * 选修的\n   * 此客户端连接到的查询缓存。\n * mutationCache?: 突变缓存\n   * 选修的\n   * 此客户端连接到的突变缓存。\n * 记录器？：记录器\n   * 选修的\n   * 此客户端用于记录调试信息、警告和错误的记录器。如果未设置，则控制台是默认记录器。\n * 默认选项？：默认选项\n   * 选修的\n   * 使用此 queryClient 为所有查询和变更定义默认值。\n\n[\n\n\n# queryClient.fetchQuery\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientfetchquery)\n\nfetchQuery 是一种异步方法，可用于获取和缓存查询。它将解析数据或抛出错误。如果您只想获取查询而不需要结果，请使用 prefetchQuery 方法。\n\n如果查询存在并且数据未失效或早于给定的 staleTime，则将返回缓存中的数据。否则它将尝试获取最新数据。\n\n> 使用 fetchQuery 和 setQueryData 之间的区别在于 fetchQuery 是异步的，并且将确保在获取数据时呈现同一查询的 useQuery 实例不会创建此查询的重复请求。\n\ntry {  const data = await queryClient.fetchQuery({ queryKey, queryFn })} catch (error) {  console.log(error)}\n\n\n指定一个 staleTime 以仅在数据早于特定时间时获取：\n\ntry {  const data = await queryClient.fetchQuery({ queryKey, queryFn, staleTime: 10000 })} catch (error) {  console.log(error)}\n\n\n选项\n\nfetchQuery的选项与useQ uery完全一样，除了以下：enabled, refetchInterval, refetchIntervalInBackground, refetchOnWindowFocus, refetchOnReconnect, notifyOnChangeProps, onSuccess, onError, onSettled, useErrorBoundary, select, suspense, keepPreviousData, placeholderData;严格用于 useQuery 和 useInfiniteQuery。您可以查看源代码以获得更清晰的信息。\n\nReturns\n\n * 承诺<TData>\n\n[\n\n\n# queryClient.fetchInfiniteQuery\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientfetchinfinitequery)\n\nfetchInfiniteQuery 类似于 fetchQuery 但可用于获取和缓存无限查询。\n\ntry {  const data = await queryClient.fetchInfiniteQuery({ queryKey, queryFn })  console.log(data.pages)} catch (error) {  console.log(error)}\n\n\n选项\n\nfetchInfiniteQuery 的选项与 fetchQuery 的选项完全相同。\n\nReturns\n\n * 承诺<无限数据<TData>>\n\n[\n\n\n# queryClient.prefetchQuery\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientprefetchquery)\n\nprefetchQuery 是一种异步方法，可用于在需要或使用 useQuery 和朋友呈现查询之前预取查询。该方法与 fetchQuery 的工作原理相同，只是它不会抛出或返回任何数据。\n\nawait queryClient.prefetchQuery({ queryKey, queryFn })\n\n\n您甚至可以在配置中将其与默认的 queryFn 一起使用！\n\nawait queryClient.prefetchQuery({ queryKey })\n\n\n选项\n\nprefetchQuery 的选项与 fetchQuery 的选项完全相同。\n\nReturns\n\n * 承诺<无效>\n   * 返回一个承诺，如果不需要提取或执行查询后将立即解决。它不会返回任何数据或抛出任何错误。\n\n[\n\n\n# queryClient.prefetchInfiniteQuery\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientprefetchinfinitequery)\n\nprefetchInfiniteQuery 类似于 prefetchQuery 但可用于预取和缓存无限查询。\n\nawait queryClient.prefetchInfiniteQuery({ queryKey, queryFn })\n\n\n选项\n\nprefetchInfiniteQuery 的选项与 fetchQuery 的选项完全相同。\n\nReturns\n\n * 承诺<无效>\n   * 返回一个承诺，如果不需要提取或执行查询后将立即解决。它不会返回任何数据或抛出任何错误。\n\n[\n\n\n# queryClient.getQueryData\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetquerydata)\n\ngetQueryData 是一个同步函数，可用于获取现有查询的缓存数据。如果查询不存在，将返回 undefined。\n\nconst data = queryClient.getQueryData(queryKey)\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n * 数据：TQueryFnData |不明确的\n   * 缓存查询的数据，如果查询不存在则未定义。\n\n[\n\n\n# queryClient.ensureQueryData\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientensurequerydata)\n\nensureQueryData 是一个异步函数，可用于获取现有查询的缓存数据。如果查询不存在，将调用 queryClient.fetchQuery 并返回其结果。\n\nconst data = await queryClient.ensureQueryData({ queryKey, queryFn })\n\n\n选项\n\n * 除了需要 queryKey 之外，ensureQueryData 的选项与 fetchQuery 的选项完全相同。\n\nReturns\n\n * 承诺<TData>\n\n[\n\n\n# queryClient.getQueriesData\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetqueriesdata)\n\ngetQueriesData 是一个同步函数，可用于获取多个查询的缓存数据。只会返回与传递的 queryKey 或 queryFilter 匹配的查询。如果没有匹配的查询，将返回一个空数组。\n\nconst data = queryClient.getQueriesData(filters)\n\n\n选项\n\n * filters: QueryFilters: 查询过滤器\n   * 如果通过过滤器，将返回与过滤器匹配的queryKeys的数据\n\nReturns\n\n * [查询键：查询键，数据：TQueryFnData |不明确的][]\n   * 匹配查询键的元组数组，如果没有匹配项，则为 []。元组是查询键及其关联数据。\n\n注意事项\n\n因为每个元组中返回的数据可以具有不同的结构（即使用过滤器返回“活动”查询可以返回不同的数据类型），TData 泛型默认为未知。如果您为 TData 提供更具体的类型，则假定您确定每个元组的数据条目都是同一类型。\n\n这种区别对于知道将返回哪个结构的 ts 开发人员来说更“方便”。\n\n[\n\n\n# queryClient.setQueryData\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientsetquerydata)\n\nsetQueryData 是一个同步函数，可用于立即更新查询的缓存数据。如果查询不存在，将创建它。如果查询在默认的 5 分钟缓存时间内未被查询挂钩使用，则查询将被垃圾收集。要一次更新多个查询并部分匹配查询键，您需要改用 queryClient.setQueriesData。\n\n> 使用 setQueryData 和 fetchQuery 的区别在于 setQueryData 是同步的，并假定您已经同步地拥有可用数据。如果您需要异步获取数据，建议您重新获取查询键或使用 fetchQuery 来处理异步获取。\n\nqueryClient.setQueryData(queryKey, updater)\n\n\n选项\n\n * queryKey: QueryKey: 查询键\n * 更新程序：TQueryFnData |未定义 | ((oldData: TQueryFnData | undefined) => TQueryFnData | undefined)\n   * 如果传了non-function，数据会更新为这个值\n   * 如果传递了一个函数，它将接收旧数据值并期望返回一个新值。\n\n使用更新程序值\n\nsetQueryData(queryKey, newData)\n\n\n如果该值未定义，则不更新查询数据。\n\n使用更新程序功能\n\n为了语法方便，您还可以传递一个更新程序函数，该函数接收当前数据值并返回新值：\n\nsetQueryData(queryKey, oldData => newData)\n\n\n如果updater函数返回undefined，则不会更新查询数据。如果更新函数接收到 undefined 作为输入，您可以返回 undefined 以退出更新，从而不创建新的缓存条目。\n\n不变性\n\n通过 setQueryData 进行的更新必须以不可变的方式执行。不要尝试通过改变 oldData 或您通过 getQueryData 就地检索的数据来直接写入缓存。\n\n[\n\n\n# queryClient.getQueryState\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetquerystate)\n\ngetQueryState 是一个同步函数，可用于获取现有查询的状态。如果查询不存在，将返回 undefined。\n\nconst state = queryClient.getQueryState({ queryKey })console.log(state.dataUpdatedAt)\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\n[\n\n\n# queryClient.setQueriesData\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientsetqueriesdata)\n\nsetQueriesData 是一个同步函数，可用于通过使用过滤器函数或部分匹配查询键来立即更新多个查询的缓存数据。只有与传递的 queryKey 或 queryFilter 匹配的查询才会被更新——不会创建新的缓存条目。在幕后，为每个现有查询调用 setQueryData。\n\nqueryClient.setQueriesData(filters, updater)\n\n\n选项\n\n * filters: QueryFilters: 查询过滤器\n   * 如果通过过滤器，将更新与过滤器匹配的 queryKeys\n * 更新程序：TQueryFnData | （旧数据：TQueryFnData | 未定义）=> TQueryFnData\n   * setQueryData updater 函数或新数据，将为每个匹配的 queryKey 调用\n\n[\n\n\n# queryClient.invalidateQueries\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientinvalidatequeries)\n\ninvalidateQueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态使缓存中的单个或多个查询无效和重新获取。默认情况下，所有匹配的查询都会立即标记为无效，并在后台重新获取活动查询。\n\n * 如果您不希望重新获取活动查询，并且只是将其标记为无效，则可以使用 refetchType: 'none' 选项。\n * 如果您还希望重新获取非活动查询，请使用 refetchType: 'all' 选项\n\nawait queryClient.invalidateQueries({  queryKey: ['posts'],  exact,  refetchType: 'active',}, { throwOnError, cancelRefetch })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n   * queryKey?: QueryKey: 查询键\n   * refetchType?: '活动' | '不活跃' | '全部' | '没有任何'\n     * 默认为“活动”\n     * 当设置为 active 时，只有与 refetch 谓词匹配并且正在通过 useQuery 和 friends 主动呈现的查询才会在后台重新获取。\n     * 当设置为 inactive 时，只有与 refetch 谓词匹配且未通过 useQuery 和朋友主动呈现的查询才会在后台重新获取。\n     * 当设置为 all 时，所有匹配 refetch 谓词的查询都将在后台重新获取。\n     * 当设置为 none 时，不会重新获取任何查询，那些与重新获取谓词匹配的查询将被标记为无效。\n   * refetchPage: (page: TData, index: number, allPages: TData[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：无效选项：\n   * throwOnError?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelRefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\n[\n\n\n# queryClient.refetchQueries\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientrefetchqueries)\n\nrefetchQueries 方法可用于根据特定条件重新获取查询。\n\n例子：\n\n// refetch all queries:await queryClient.refetchQueries()\n// refetch all stale queries:await queryClient.refetchQueries({ stale: true })\n// refetch all active queries partially matching a query key:await queryClient.refetchQueries({ queryKey: ['posts'], type: 'active' })\n// refetch all active queries exactly matching a query key:await queryClient.refetchQueries({ queryKey: ['posts', 1], type: 'active', exact: true })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n   * refetchPage: (page: TData, index: number, allPages: TData[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：RefetchOptions：\n   * throwOnError?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelRefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\nReturns\n\n此函数返回一个承诺，该承诺将在所有查询完成重新获取时解决。默认情况下，如果这些查询中的任何一个重新获取失败，它都不会抛出错误，但这可以通过将 throwOnError 选项设置为 true 来配置\n\n[\n\n\n# queryClient.cancelQueries\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientcancelqueries)\n\ncancelQueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态取消传出查询。\n\n这在执行乐观更新时最有用，因为您可能需要取消任何传出查询重新获取，以便它们在解析时不会破坏您的乐观更新。\n\nawait queryClient.cancelQueries({ queryKey: ['posts'], exact: true })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n此方法不返回任何内容\n\n[\n\n\n# queryClient.removeQueries\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientremovequeries)\n\nremoveQueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态从缓存中删除查询。\n\nqueryClient.removeQueries({ queryKey, exact: true })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n此方法不返回任何内容\n\n[\n\n\n# queryClient.resetQueries\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientresetqueries)\n\nresetQueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态将缓存中的查询重置为其初始状态。\n\n这将通知订阅者——与 clear 不同，后者会删除所有订阅者——并将查询重置为其预加载状态——与 invalidateQueries 不同。如果查询有 initialData，查询的数据将被重置为初始数据。如果查询处于活动状态，它将被重新获取。\n\nqueryClient.resetQueries({ queryKey, exact: true })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n   * refetchPage: (page: TData, index: number, allPages: TData[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：重置选项：\n   * throwOnError?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelRefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\nReturns\n\n此方法返回一个承诺，该承诺会在重新获取所有活动查询时解决。\n\n[\n\n\n# queryClient.isFetching\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientisfetching)\n\n此 isFetching 方法返回一个整数，表示缓存中当前正在提取的查询（如果有）数量（包括后台提取、加载新页面或加载更多无限查询结果）\n\nif (queryClient.isFetching()) {  console.log('At least one query is fetching!')}\n\n\nTanStack Query 还导出了一个方便的 useIsFetching 挂钩，它可以让您在组件中订阅此状态，而无需创建对查询缓存的手动订阅。\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n此方法返回获取查询的数量。\n\n[\n\n\n# queryClient.isMutating\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientismutating)\n\n此 isMutating 方法返回一个整数，表示当前正在获取缓存中的突变数量（如果有）。\n\nif (queryClient.isMutating()) {  console.log('At least one mutation is fetching!')}\n\n\nTanStack Query 还导出了一个方便的 useIsMutating 挂钩，它可以让您在组件中订阅此状态，而无需创建对突变缓存的手动订阅。\n\n选项\n\n * 过滤器：MutationFilters：突变过滤器\n\nReturns\n\n此方法返回获取突变的数量。\n\n[\n\n\n# 查询客户端.getLogger\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetlogger)\n\ngetLogger 方法返回创建客户端时设置的记录器。\n\nconst logger = queryClient.getLogger()\n\n\n[\n\n\n# queryClient.getDefaultOptions\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetdefaultoptions)\n\ngetDefaultOptions 方法返回在创建客户端时或使用 setDefaultOptions 设置的默认选项。\n\nconst defaultOptions = queryClient.getDefaultOptions()\n\n\n[\n\n\n# queryClient.setDefaultOptions 设置默认选项\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientsetdefaultoptions)\n\nsetDefaultOptions 方法可用于动态设置此 queryClient 的默认选项。先前定义的默认选项将被覆盖。\n\nqueryClient.setDefaultOptions({  queries: {    staleTime: Infinity,  },})\n\n\n[\n\n\n# queryClient.getQueryDefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetquerydefaults)\n\ngetQueryDefaults 方法返回为特定查询设置的默认选项：\n\nconst defaultOptions = queryClient.getQueryDefaults(['posts'])\n\n\n> 请注意，如果多个查询默认值与给定的查询键匹配，则返回第一个匹配的。这可能会导致意外行为。请参阅设置查询默认值。\n\n[\n\n\n# queryClient.setQueryDefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientsetquerydefaults)\n\nsetQueryDefaults 可用于为特定查询设置默认选项：\n\nqueryClient.setQueryDefaults(['posts'], { queryFn: fetchPosts })\nfunction Component() {  const { data } = useQuery({ queryKey: ['posts'] })}\n\n\n选项\n\n * queryKey: QueryKey: 查询键\n * 选项：查询选项\n\n> 如 getQueryDefaults 所述，查询默认值的注册顺序很重要。由于 getQueryDefaults 返回第一个匹配的默认值，因此应按以下顺序进行注册：从最不通用的键到最通用的键。这样，在特定键的情况下，第一个匹配的将是预期的。\n\n[\n\n\n# queryClient.getMutationDefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetmutationdefaults)\n\ngetMutationDefaults 方法返回为特定突变设置的默认选项：\n\nconst defaultOptions = queryClient.getMutationDefaults(['addPost'])\n\n\n[\n\n\n# queryClient.setMutationDefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientsetmutationdefaults)\n\nsetMutationDefaults 可用于设置特定突变的默认选项：\n\nqueryClient.setMutationDefaults(['addPost'], { mutationFn: addPost })\nfunction Component() {  const { data } = useMutation({ mutationKey: ['addPost'] })}\n\n\n选项\n\n * 突变键：字符串 |未知[]\n * 选项：MutationOptions\n\n> 与 setQueryDefaults 类似，注册顺序在这里很重要。\n\n[\n\n\n# 查询客户端.getQueryCache\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetquerycache)\n\ngetQueryCache 方法返回此客户端连接到的查询缓存。\n\nconst queryCache = queryClient.getQueryCache()\n\n\n[\n\n\n# queryClient.getMutationCache\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientgetmutationcache)\n\ngetMutationCache 方法返回此客户端连接到的突变缓存。\n\nconst mutationCache = queryClient.getMutationCache()\n\n\n[\n\n\n# 查询客户端.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientclear)\n\nclear 方法清除所有连接的缓存。\n\nqueryClient.clear()\n\n\n[\n\n\n# queryClient.resumePausedMutations\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryClient#queryclientresumepausedmutations)\n\n可用于恢复因没有网络连接而暂停的突变。\n\nqueryClient.resumePausedMutations()\n\n\n在 GitHub 上编辑",normalizedContent:"# queryclient\n\n[\n\n\n# queryclient\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclient)\n\nqueryclient 可用于与缓存交互：\n\nimport { queryclient } from '@tanstack/react-query'\nconst queryclient = new queryclient({  defaultoptions: {    queries: {      staletime: infinity,    },  },})\nawait queryclient.prefetchquery({ querykey: ['posts'], queryfn: fetchposts })\n\n\n它可用的方法有：\n\n * queryclient.fetchquery\n * queryclient.fetchinfinitequery\n * queryclient.prefetchquery\n * queryclient.prefetchinfinitequery\n * queryclient.getquerydata\n * queryclient.ensurequerydata\n * queryclient.getqueriesdata\n * queryclient.setquerydata\n * queryclient.getquerystate\n * queryclient.setqueriesdata\n * queryclient.invalidatequeries\n * queryclient.refetchqueries\n * queryclient.cancelqueries\n * queryclient.removequeries\n * queryclient.resetqueries\n * queryclient.isfetching\n * queryclient.ismutating\n * 查询客户端.getlogger\n * queryclient.getdefaultoptions\n * queryclient.setdefaultoptions 设置默认选项\n * queryclient.getquerydefaults\n * queryclient.setquerydefaults\n * queryclient.getmutationdefaults\n * queryclient.setmutationdefaults\n * 查询客户端.getquerycache\n * queryclient.getmutationcache\n * 查询客户端.clear\n * queryclient.resumepausedmutations\n\n选项\n\n * 查询缓存？：查询缓存\n   * 选修的\n   * 此客户端连接到的查询缓存。\n * mutationcache?: 突变缓存\n   * 选修的\n   * 此客户端连接到的突变缓存。\n * 记录器？：记录器\n   * 选修的\n   * 此客户端用于记录调试信息、警告和错误的记录器。如果未设置，则控制台是默认记录器。\n * 默认选项？：默认选项\n   * 选修的\n   * 使用此 queryclient 为所有查询和变更定义默认值。\n\n[\n\n\n# queryclient.fetchquery\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientfetchquery)\n\nfetchquery 是一种异步方法，可用于获取和缓存查询。它将解析数据或抛出错误。如果您只想获取查询而不需要结果，请使用 prefetchquery 方法。\n\n如果查询存在并且数据未失效或早于给定的 staletime，则将返回缓存中的数据。否则它将尝试获取最新数据。\n\n> 使用 fetchquery 和 setquerydata 之间的区别在于 fetchquery 是异步的，并且将确保在获取数据时呈现同一查询的 usequery 实例不会创建此查询的重复请求。\n\ntry {  const data = await queryclient.fetchquery({ querykey, queryfn })} catch (error) {  console.log(error)}\n\n\n指定一个 staletime 以仅在数据早于特定时间时获取：\n\ntry {  const data = await queryclient.fetchquery({ querykey, queryfn, staletime: 10000 })} catch (error) {  console.log(error)}\n\n\n选项\n\nfetchquery的选项与useq uery完全一样，除了以下：enabled, refetchinterval, refetchintervalinbackground, refetchonwindowfocus, refetchonreconnect, notifyonchangeprops, onsuccess, onerror, onsettled, useerrorboundary, select, suspense, keeppreviousdata, placeholderdata;严格用于 usequery 和 useinfinitequery。您可以查看源代码以获得更清晰的信息。\n\nreturns\n\n * 承诺<tdata>\n\n[\n\n\n# queryclient.fetchinfinitequery\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientfetchinfinitequery)\n\nfetchinfinitequery 类似于 fetchquery 但可用于获取和缓存无限查询。\n\ntry {  const data = await queryclient.fetchinfinitequery({ querykey, queryfn })  console.log(data.pages)} catch (error) {  console.log(error)}\n\n\n选项\n\nfetchinfinitequery 的选项与 fetchquery 的选项完全相同。\n\nreturns\n\n * 承诺<无限数据<tdata>>\n\n[\n\n\n# queryclient.prefetchquery\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientprefetchquery)\n\nprefetchquery 是一种异步方法，可用于在需要或使用 usequery 和朋友呈现查询之前预取查询。该方法与 fetchquery 的工作原理相同，只是它不会抛出或返回任何数据。\n\nawait queryclient.prefetchquery({ querykey, queryfn })\n\n\n您甚至可以在配置中将其与默认的 queryfn 一起使用！\n\nawait queryclient.prefetchquery({ querykey })\n\n\n选项\n\nprefetchquery 的选项与 fetchquery 的选项完全相同。\n\nreturns\n\n * 承诺<无效>\n   * 返回一个承诺，如果不需要提取或执行查询后将立即解决。它不会返回任何数据或抛出任何错误。\n\n[\n\n\n# queryclient.prefetchinfinitequery\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientprefetchinfinitequery)\n\nprefetchinfinitequery 类似于 prefetchquery 但可用于预取和缓存无限查询。\n\nawait queryclient.prefetchinfinitequery({ querykey, queryfn })\n\n\n选项\n\nprefetchinfinitequery 的选项与 fetchquery 的选项完全相同。\n\nreturns\n\n * 承诺<无效>\n   * 返回一个承诺，如果不需要提取或执行查询后将立即解决。它不会返回任何数据或抛出任何错误。\n\n[\n\n\n# queryclient.getquerydata\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetquerydata)\n\ngetquerydata 是一个同步函数，可用于获取现有查询的缓存数据。如果查询不存在，将返回 undefined。\n\nconst data = queryclient.getquerydata(querykey)\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n * 数据：tqueryfndata |不明确的\n   * 缓存查询的数据，如果查询不存在则未定义。\n\n[\n\n\n# queryclient.ensurequerydata\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientensurequerydata)\n\nensurequerydata 是一个异步函数，可用于获取现有查询的缓存数据。如果查询不存在，将调用 queryclient.fetchquery 并返回其结果。\n\nconst data = await queryclient.ensurequerydata({ querykey, queryfn })\n\n\n选项\n\n * 除了需要 querykey 之外，ensurequerydata 的选项与 fetchquery 的选项完全相同。\n\nreturns\n\n * 承诺<tdata>\n\n[\n\n\n# queryclient.getqueriesdata\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetqueriesdata)\n\ngetqueriesdata 是一个同步函数，可用于获取多个查询的缓存数据。只会返回与传递的 querykey 或 queryfilter 匹配的查询。如果没有匹配的查询，将返回一个空数组。\n\nconst data = queryclient.getqueriesdata(filters)\n\n\n选项\n\n * filters: queryfilters: 查询过滤器\n   * 如果通过过滤器，将返回与过滤器匹配的querykeys的数据\n\nreturns\n\n * [查询键：查询键，数据：tqueryfndata |不明确的][]\n   * 匹配查询键的元组数组，如果没有匹配项，则为 []。元组是查询键及其关联数据。\n\n注意事项\n\n因为每个元组中返回的数据可以具有不同的结构（即使用过滤器返回“活动”查询可以返回不同的数据类型），tdata 泛型默认为未知。如果您为 tdata 提供更具体的类型，则假定您确定每个元组的数据条目都是同一类型。\n\n这种区别对于知道将返回哪个结构的 ts 开发人员来说更“方便”。\n\n[\n\n\n# queryclient.setquerydata\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientsetquerydata)\n\nsetquerydata 是一个同步函数，可用于立即更新查询的缓存数据。如果查询不存在，将创建它。如果查询在默认的 5 分钟缓存时间内未被查询挂钩使用，则查询将被垃圾收集。要一次更新多个查询并部分匹配查询键，您需要改用 queryclient.setqueriesdata。\n\n> 使用 setquerydata 和 fetchquery 的区别在于 setquerydata 是同步的，并假定您已经同步地拥有可用数据。如果您需要异步获取数据，建议您重新获取查询键或使用 fetchquery 来处理异步获取。\n\nqueryclient.setquerydata(querykey, updater)\n\n\n选项\n\n * querykey: querykey: 查询键\n * 更新程序：tqueryfndata |未定义 | ((olddata: tqueryfndata | undefined) => tqueryfndata | undefined)\n   * 如果传了non-function，数据会更新为这个值\n   * 如果传递了一个函数，它将接收旧数据值并期望返回一个新值。\n\n使用更新程序值\n\nsetquerydata(querykey, newdata)\n\n\n如果该值未定义，则不更新查询数据。\n\n使用更新程序功能\n\n为了语法方便，您还可以传递一个更新程序函数，该函数接收当前数据值并返回新值：\n\nsetquerydata(querykey, olddata => newdata)\n\n\n如果updater函数返回undefined，则不会更新查询数据。如果更新函数接收到 undefined 作为输入，您可以返回 undefined 以退出更新，从而不创建新的缓存条目。\n\n不变性\n\n通过 setquerydata 进行的更新必须以不可变的方式执行。不要尝试通过改变 olddata 或您通过 getquerydata 就地检索的数据来直接写入缓存。\n\n[\n\n\n# queryclient.getquerystate\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetquerystate)\n\ngetquerystate 是一个同步函数，可用于获取现有查询的状态。如果查询不存在，将返回 undefined。\n\nconst state = queryclient.getquerystate({ querykey })console.log(state.dataupdatedat)\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\n[\n\n\n# queryclient.setqueriesdata\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientsetqueriesdata)\n\nsetqueriesdata 是一个同步函数，可用于通过使用过滤器函数或部分匹配查询键来立即更新多个查询的缓存数据。只有与传递的 querykey 或 queryfilter 匹配的查询才会被更新——不会创建新的缓存条目。在幕后，为每个现有查询调用 setquerydata。\n\nqueryclient.setqueriesdata(filters, updater)\n\n\n选项\n\n * filters: queryfilters: 查询过滤器\n   * 如果通过过滤器，将更新与过滤器匹配的 querykeys\n * 更新程序：tqueryfndata | （旧数据：tqueryfndata | 未定义）=> tqueryfndata\n   * setquerydata updater 函数或新数据，将为每个匹配的 querykey 调用\n\n[\n\n\n# queryclient.invalidatequeries\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientinvalidatequeries)\n\ninvalidatequeries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态使缓存中的单个或多个查询无效和重新获取。默认情况下，所有匹配的查询都会立即标记为无效，并在后台重新获取活动查询。\n\n * 如果您不希望重新获取活动查询，并且只是将其标记为无效，则可以使用 refetchtype: 'none' 选项。\n * 如果您还希望重新获取非活动查询，请使用 refetchtype: 'all' 选项\n\nawait queryclient.invalidatequeries({  querykey: ['posts'],  exact,  refetchtype: 'active',}, { throwonerror, cancelrefetch })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n   * querykey?: querykey: 查询键\n   * refetchtype?: '活动' | '不活跃' | '全部' | '没有任何'\n     * 默认为“活动”\n     * 当设置为 active 时，只有与 refetch 谓词匹配并且正在通过 usequery 和 friends 主动呈现的查询才会在后台重新获取。\n     * 当设置为 inactive 时，只有与 refetch 谓词匹配且未通过 usequery 和朋友主动呈现的查询才会在后台重新获取。\n     * 当设置为 all 时，所有匹配 refetch 谓词的查询都将在后台重新获取。\n     * 当设置为 none 时，不会重新获取任何查询，那些与重新获取谓词匹配的查询将被标记为无效。\n   * refetchpage: (page: tdata, index: number, allpages: tdata[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：无效选项：\n   * throwonerror?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelrefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\n[\n\n\n# queryclient.refetchqueries\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientrefetchqueries)\n\nrefetchqueries 方法可用于根据特定条件重新获取查询。\n\n例子：\n\n// refetch all queries:await queryclient.refetchqueries()\n// refetch all stale queries:await queryclient.refetchqueries({ stale: true })\n// refetch all active queries partially matching a query key:await queryclient.refetchqueries({ querykey: ['posts'], type: 'active' })\n// refetch all active queries exactly matching a query key:await queryclient.refetchqueries({ querykey: ['posts', 1], type: 'active', exact: true })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n   * refetchpage: (page: tdata, index: number, allpages: tdata[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：refetchoptions：\n   * throwonerror?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelrefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\nreturns\n\n此函数返回一个承诺，该承诺将在所有查询完成重新获取时解决。默认情况下，如果这些查询中的任何一个重新获取失败，它都不会抛出错误，但这可以通过将 throwonerror 选项设置为 true 来配置\n\n[\n\n\n# queryclient.cancelqueries\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientcancelqueries)\n\ncancelqueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态取消传出查询。\n\n这在执行乐观更新时最有用，因为您可能需要取消任何传出查询重新获取，以便它们在解析时不会破坏您的乐观更新。\n\nawait queryclient.cancelqueries({ querykey: ['posts'], exact: true })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n此方法不返回任何内容\n\n[\n\n\n# queryclient.removequeries\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientremovequeries)\n\nremovequeries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态从缓存中删除查询。\n\nqueryclient.removequeries({ querykey, exact: true })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n此方法不返回任何内容\n\n[\n\n\n# queryclient.resetqueries\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientresetqueries)\n\nresetqueries 方法可用于根据查询键或查询的任何其他功能可访问属性/状态将缓存中的查询重置为其初始状态。\n\n这将通知订阅者——与 clear 不同，后者会删除所有订阅者——并将查询重置为其预加载状态——与 invalidatequeries 不同。如果查询有 initialdata，查询的数据将被重置为初始数据。如果查询处于活动状态，它将被重新获取。\n\nqueryclient.resetqueries({ querykey, exact: true })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n   * refetchpage: (page: tdata, index: number, allpages: tdata[]) => 布尔值\n     * 仅适用于无限查询\n     * 使用此函数指定应重新获取哪些页面\n * 选项？：重置选项：\n   * throwonerror?: 布尔值\n     * 当设置为 true 时，如果任何查询重新获取任务失败，此方法将抛出。\n   * cancelrefetch?: 布尔值\n     * 默认为真\n       * 默认情况下，当前正在运行的请求将在发出新请求之前被取消\n     * 当设置为 false 时，如果已经有请求正在运行，则不会重新获取。\n\nreturns\n\n此方法返回一个承诺，该承诺会在重新获取所有活动查询时解决。\n\n[\n\n\n# queryclient.isfetching\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientisfetching)\n\n此 isfetching 方法返回一个整数，表示缓存中当前正在提取的查询（如果有）数量（包括后台提取、加载新页面或加载更多无限查询结果）\n\nif (queryclient.isfetching()) {  console.log('at least one query is fetching!')}\n\n\ntanstack query 还导出了一个方便的 useisfetching 挂钩，它可以让您在组件中订阅此状态，而无需创建对查询缓存的手动订阅。\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n此方法返回获取查询的数量。\n\n[\n\n\n# queryclient.ismutating\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientismutating)\n\n此 ismutating 方法返回一个整数，表示当前正在获取缓存中的突变数量（如果有）。\n\nif (queryclient.ismutating()) {  console.log('at least one mutation is fetching!')}\n\n\ntanstack query 还导出了一个方便的 useismutating 挂钩，它可以让您在组件中订阅此状态，而无需创建对突变缓存的手动订阅。\n\n选项\n\n * 过滤器：mutationfilters：突变过滤器\n\nreturns\n\n此方法返回获取突变的数量。\n\n[\n\n\n# 查询客户端.getlogger\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetlogger)\n\ngetlogger 方法返回创建客户端时设置的记录器。\n\nconst logger = queryclient.getlogger()\n\n\n[\n\n\n# queryclient.getdefaultoptions\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetdefaultoptions)\n\ngetdefaultoptions 方法返回在创建客户端时或使用 setdefaultoptions 设置的默认选项。\n\nconst defaultoptions = queryclient.getdefaultoptions()\n\n\n[\n\n\n# queryclient.setdefaultoptions 设置默认选项\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientsetdefaultoptions)\n\nsetdefaultoptions 方法可用于动态设置此 queryclient 的默认选项。先前定义的默认选项将被覆盖。\n\nqueryclient.setdefaultoptions({  queries: {    staletime: infinity,  },})\n\n\n[\n\n\n# queryclient.getquerydefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetquerydefaults)\n\ngetquerydefaults 方法返回为特定查询设置的默认选项：\n\nconst defaultoptions = queryclient.getquerydefaults(['posts'])\n\n\n> 请注意，如果多个查询默认值与给定的查询键匹配，则返回第一个匹配的。这可能会导致意外行为。请参阅设置查询默认值。\n\n[\n\n\n# queryclient.setquerydefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientsetquerydefaults)\n\nsetquerydefaults 可用于为特定查询设置默认选项：\n\nqueryclient.setquerydefaults(['posts'], { queryfn: fetchposts })\nfunction component() {  const { data } = usequery({ querykey: ['posts'] })}\n\n\n选项\n\n * querykey: querykey: 查询键\n * 选项：查询选项\n\n> 如 getquerydefaults 所述，查询默认值的注册顺序很重要。由于 getquerydefaults 返回第一个匹配的默认值，因此应按以下顺序进行注册：从最不通用的键到最通用的键。这样，在特定键的情况下，第一个匹配的将是预期的。\n\n[\n\n\n# queryclient.getmutationdefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetmutationdefaults)\n\ngetmutationdefaults 方法返回为特定突变设置的默认选项：\n\nconst defaultoptions = queryclient.getmutationdefaults(['addpost'])\n\n\n[\n\n\n# queryclient.setmutationdefaults\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientsetmutationdefaults)\n\nsetmutationdefaults 可用于设置特定突变的默认选项：\n\nqueryclient.setmutationdefaults(['addpost'], { mutationfn: addpost })\nfunction component() {  const { data } = usemutation({ mutationkey: ['addpost'] })}\n\n\n选项\n\n * 突变键：字符串 |未知[]\n * 选项：mutationoptions\n\n> 与 setquerydefaults 类似，注册顺序在这里很重要。\n\n[\n\n\n# 查询客户端.getquerycache\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetquerycache)\n\ngetquerycache 方法返回此客户端连接到的查询缓存。\n\nconst querycache = queryclient.getquerycache()\n\n\n[\n\n\n# queryclient.getmutationcache\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientgetmutationcache)\n\ngetmutationcache 方法返回此客户端连接到的突变缓存。\n\nconst mutationcache = queryclient.getmutationcache()\n\n\n[\n\n\n# 查询客户端.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientclear)\n\nclear 方法清除所有连接的缓存。\n\nqueryclient.clear()\n\n\n[\n\n\n# queryclient.resumepausedmutations\n\n](https://tanstack.com/query/latest/docs/react/reference/queryclient#queryclientresumepausedmutations)\n\n可用于恢复因没有网络连接而暂停的突变。\n\nqueryclient.resumepausedmutations()\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueryClientProvider",frontmatter:{title:"QueryClientProvider",date:"2023-03-27T23:11:07.000Z",permalink:"/pages/3ff973/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/08.QueryClientProvider.html",relativePath:"01.文档/03.API参考/08.QueryClientProvider.md",key:"v-77162b2a",path:"/pages/3ff973/",headersStr:null,content:"# QueryClientProvider\n\n使用 QueryClientProvider 组件连接并向您的应用程序提供 QueryClient：\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nconst queryClient = new QueryClient()\nfunction App() {  return <QueryClientProvider client={queryClient}>...</QueryClientProvider>}\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * 要提供的 QueryClient 实例\n * 上下文共享：布尔值\n   * 弃用\n   * 默认为假\n   * 将此设置为 true 以启用上下文共享，这将跨窗口共享上下文的第一个实例和至少一个实例，以确保如果跨不同的包或微前端使用 React Query，它们都将使用相同的上下文实例，而不管模块范围。\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n在 GitHub 上编辑",normalizedContent:"# queryclientprovider\n\n使用 queryclientprovider 组件连接并向您的应用程序提供 queryclient：\n\nimport { queryclient, queryclientprovider } from '@tanstack/react-query'\nconst queryclient = new queryclient()\nfunction app() {  return <queryclientprovider client={queryclient}>...</queryclientprovider>}\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * 要提供的 queryclient 实例\n * 上下文共享：布尔值\n   * 弃用\n   * 默认为假\n   * 将此设置为 true 以启用上下文共享，这将跨窗口共享上下文的第一个实例和至少一个实例，以确保如果跨不同的包或微前端使用 react query，它们都将使用相同的上下文实例，而不管模块范围。\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useIsMutating",frontmatter:{title:"useIsMutating",date:"2023-03-27T22:59:53.000Z",permalink:"/pages/3d7176/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/06.useIsMutating.html",relativePath:"01.文档/03.API参考/06.useIsMutating.md",key:"v-5a22e16a",path:"/pages/3d7176/",headersStr:null,content:"# useIsMutating\n\nuseIsMutating 是一个可选的钩子，它返回您的应用程序正在获取的突变数量（对于应用程序范围的加载指示器很有用）。\n\nimport { useIsMutating } from '@tanstack/react-query'// How many mutations are fetching?const isMutating = useIsMutating()// How many mutations matching the posts prefix are fetching?const isMutatingPosts = useIsMutating({ mutationKey: ['posts'] })\n\n\n选项\n\n * filters?: MutationFilters: 变异过滤器\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\nReturns\n\n * isMutating：数字\n   * 将是您的应用程序当前正在获取的突变数。\n\n在 GitHub 上编辑",normalizedContent:"# useismutating\n\nuseismutating 是一个可选的钩子，它返回您的应用程序正在获取的突变数量（对于应用程序范围的加载指示器很有用）。\n\nimport { useismutating } from '@tanstack/react-query'// how many mutations are fetching?const ismutating = useismutating()// how many mutations matching the posts prefix are fetching?const ismutatingposts = useismutating({ mutationkey: ['posts'] })\n\n\n选项\n\n * filters?: mutationfilters: 变异过滤器\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\nreturns\n\n * ismutating：数字\n   * 将是您的应用程序当前正在获取的突变数。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useQueryClient",frontmatter:{title:"useQueryClient",date:"2023-03-27T23:11:44.000Z",permalink:"/pages/ab0f39/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/09.useQueryClient.html",relativePath:"01.文档/03.API参考/09.useQueryClient.md",key:"v-833e7788",path:"/pages/ab0f39/",headersStr:null,content:"# useQueryClient\n\nuseQueryClient 挂钩返回当前的 QueryClient 实例。\n\nimport { useQueryClient } from '@tanstack/react-query'\nconst queryClient = useQueryClient({ context })\n\n\n选项\n\n * 上下文？：React.Context<QueryClient |未定义>\n   * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n在 GitHub 上编辑",normalizedContent:"# usequeryclient\n\nusequeryclient 挂钩返回当前的 queryclient 实例。\n\nimport { usequeryclient } from '@tanstack/react-query'\nconst queryclient = usequeryclient({ context })\n\n\n选项\n\n * 上下文？：react.context<queryclient |未定义>\n   * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueryObserver",frontmatter:{title:"QueryObserver",date:"2023-03-27T23:13:16.000Z",permalink:"/pages/0dc10f/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/12.QueryObserver.html",relativePath:"01.文档/03.API参考/12.QueryObserver.md",key:"v-4191778a",path:"/pages/0dc10f/",headers:[{level:2,title:"查询观察者",slug:"查询观察者",normalizedTitle:"查询观察者",charIndex:23}],headersStr:"查询观察者",content:"# QueryObserver\n\n[\n\n\n# 查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryObserver#queryobserver)\n\nQueryObserver 可用于观察和切换查询。\n\nconst observer = new QueryObserver(queryClient, { queryKey: ['posts'] })\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\nQueryObserver 的选项与 useQuery 的选项完全相同。\n\n在 GitHub 上编辑",normalizedContent:"# queryobserver\n\n[\n\n\n# 查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/queryobserver#queryobserver)\n\nqueryobserver 可用于观察和切换查询。\n\nconst observer = new queryobserver(queryclient, { querykey: ['posts'] })\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\nqueryobserver 的选项与 usequery 的选项完全相同。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueryCache",frontmatter:{title:"QueryCache",date:"2023-03-27T23:12:29.000Z",permalink:"/pages/652a78/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/10.QueryCache.html",relativePath:"01.文档/03.API参考/10.QueryCache.md",key:"v-0819964c",path:"/pages/652a78/",headers:[{level:2,title:"全局回调",slug:"全局回调",normalizedTitle:"全局回调",charIndex:761},{level:2,title:"查询缓存.find",slug:"查询缓存-find",normalizedTitle:"查询缓存.find",charIndex:1074},{level:2,title:"查询缓存.findAll",slug:"查询缓存-findall",normalizedTitle:"查询缓存.findall",charIndex:1482},{level:2,title:"查询缓存.订阅",slug:"查询缓存-订阅",normalizedTitle:"查询缓存.订阅",charIndex:1818},{level:2,title:"查询缓存.clear",slug:"查询缓存-clear",normalizedTitle:"查询缓存.clear",charIndex:2299},{level:2,title:"延伸阅读",slug:"延伸阅读",normalizedTitle:"延伸阅读",charIndex:2449}],headersStr:"全局回调 查询缓存.find 查询缓存.findAll 查询缓存.订阅 查询缓存.clear 延伸阅读",content:"# QueryCache\n\nQueryCache 是 TanStack Query 的存储机制。它存储它包含的所有数据、元信息和查询状态。\n\n通常，您不会直接与 QueryCache 交互，而是将 QueryClient 用于特定缓存。\n\nimport { QueryCache } from '@tanstack/react-query'\nconst queryCache = new QueryCache({  onError: error => {    console.log(error)  },  onSuccess: data => {    console.log(data)  },  onSettled: (data, error) => {    console.log(data, error)  },})\nconst query = queryCache.find({ queryKey: ['posts'] })\n\n\n它可用的方法有：\n\n * 寻找\n * 找到所有\n * 订阅\n * 清除\n\n选项\n\n * onError?: (error: unknown, query: Query) => 无效\n   * 选修的\n   * 如果某些查询遇到错误，将调用此函数。\n * onSuccess?: (data: unknown, query: Query) => 无效\n   * 选修的\n   * 如果某些查询成功，将调用此函数。\n * onSettled?: (data: unknown | undefined, error: unknown | null, query: Query) => 无效\n   * 选修的\n   * 如果某些查询已解决（成功或错误），将调用此函数。\n\n[\n\n\n# 全局回调\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#global-callbacks)\n\nQueryCache 上的 onError、onSuccess 和 onSettled 回调可用于在全局级别处理这些事件。它们与提供给 QueryClient 的 defaultOptions 不同，因为：\n\n * defaultOptions 可以被每个 Query 覆盖——全局回调将始终被调用。\n * defaultOptions 回调将为每个 Observer 调用一次，而全局回调只会为每个 Query 调用一次。\n\n[\n\n\n# 查询缓存.find\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#querycachefind)\n\nfind 是一种稍微高级的同步方法，可用于从缓存中获取现有的查询实例。该实例不仅包含查询的所有状态，还包含查询的所有实例和底层内容。如果查询不存在，将返回 undefined。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关查询的更多信息时可以派上用场（例如，查看 query.state.dataUpdatedAt 时间戳以确定查询是否足够新鲜以用作初始值）\n\nconst query = queryCache.find({ queryKey })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n * 询问\n   * 来自缓存的查询实例\n\n[\n\n\n# 查询缓存.findAll\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#querycachefindall)\n\nfindAll 是更高级的同步方法，可用于从缓存中获取与查询键部分匹配的现有查询实例。如果查询不存在，将返回空数组。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关查询的更多信息时可以派上用场\n\nconst queries = queryCache.findAll({ queryKey })\n\n\n选项\n\n * filters?: QueryFilters: 查询过滤器\n\nReturns\n\n * 询问[]\n   * 从缓存中查询实例\n\n[\n\n\n# 查询缓存.订阅\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#querycachesubscribe)\n\nsubscribe 方法可用于订阅整个查询缓存，并获知缓存的安全/已知更新，例如查询状态更改或查询被更新、添加或删除\n\nconst callback = event => {  console.log(event.type, event.query)}\nconst unsubscribe = queryCache.subscribe(callback)\n\n\n选项\n\n * 回调：（事件：QueryCacheNotifyEvent）=>无效\n   * 每当查询缓存通过其跟踪更新机制（例如，query.setState、queryClient.removeQueries 等）进行更新时，都会调用此函数。不鼓励对缓存进行超出范围的突变，并且不会触发订阅回调\n\nReturns\n\n * 退订：功能=>无效\n   * 此函数将从查询缓存中取消订阅回调。\n\n[\n\n\n# 查询缓存.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#querycacheclear)\n\nclear 方法可用于完全清除缓存并重新开始。\n\nqueryCache.clear()\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/reference/QueryCache#further-reading)\n\n要更好地了解 QueryCache 的内部工作方式，请查看社区资源中的 #18：Inside React Query。\n\n在 GitHub 上编辑",normalizedContent:"# querycache\n\nquerycache 是 tanstack query 的存储机制。它存储它包含的所有数据、元信息和查询状态。\n\n通常，您不会直接与 querycache 交互，而是将 queryclient 用于特定缓存。\n\nimport { querycache } from '@tanstack/react-query'\nconst querycache = new querycache({  onerror: error => {    console.log(error)  },  onsuccess: data => {    console.log(data)  },  onsettled: (data, error) => {    console.log(data, error)  },})\nconst query = querycache.find({ querykey: ['posts'] })\n\n\n它可用的方法有：\n\n * 寻找\n * 找到所有\n * 订阅\n * 清除\n\n选项\n\n * onerror?: (error: unknown, query: query) => 无效\n   * 选修的\n   * 如果某些查询遇到错误，将调用此函数。\n * onsuccess?: (data: unknown, query: query) => 无效\n   * 选修的\n   * 如果某些查询成功，将调用此函数。\n * onsettled?: (data: unknown | undefined, error: unknown | null, query: query) => 无效\n   * 选修的\n   * 如果某些查询已解决（成功或错误），将调用此函数。\n\n[\n\n\n# 全局回调\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#global-callbacks)\n\nquerycache 上的 onerror、onsuccess 和 onsettled 回调可用于在全局级别处理这些事件。它们与提供给 queryclient 的 defaultoptions 不同，因为：\n\n * defaultoptions 可以被每个 query 覆盖——全局回调将始终被调用。\n * defaultoptions 回调将为每个 observer 调用一次，而全局回调只会为每个 query 调用一次。\n\n[\n\n\n# 查询缓存.find\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#querycachefind)\n\nfind 是一种稍微高级的同步方法，可用于从缓存中获取现有的查询实例。该实例不仅包含查询的所有状态，还包含查询的所有实例和底层内容。如果查询不存在，将返回 undefined。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关查询的更多信息时可以派上用场（例如，查看 query.state.dataupdatedat 时间戳以确定查询是否足够新鲜以用作初始值）\n\nconst query = querycache.find({ querykey })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n * 询问\n   * 来自缓存的查询实例\n\n[\n\n\n# 查询缓存.findall\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#querycachefindall)\n\nfindall 是更高级的同步方法，可用于从缓存中获取与查询键部分匹配的现有查询实例。如果查询不存在，将返回空数组。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关查询的更多信息时可以派上用场\n\nconst queries = querycache.findall({ querykey })\n\n\n选项\n\n * filters?: queryfilters: 查询过滤器\n\nreturns\n\n * 询问[]\n   * 从缓存中查询实例\n\n[\n\n\n# 查询缓存.订阅\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#querycachesubscribe)\n\nsubscribe 方法可用于订阅整个查询缓存，并获知缓存的安全/已知更新，例如查询状态更改或查询被更新、添加或删除\n\nconst callback = event => {  console.log(event.type, event.query)}\nconst unsubscribe = querycache.subscribe(callback)\n\n\n选项\n\n * 回调：（事件：querycachenotifyevent）=>无效\n   * 每当查询缓存通过其跟踪更新机制（例如，query.setstate、queryclient.removequeries 等）进行更新时，都会调用此函数。不鼓励对缓存进行超出范围的突变，并且不会触发订阅回调\n\nreturns\n\n * 退订：功能=>无效\n   * 此函数将从查询缓存中取消订阅回调。\n\n[\n\n\n# 查询缓存.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#querycacheclear)\n\nclear 方法可用于完全清除缓存并重新开始。\n\nquerycache.clear()\n\n\n[\n\n\n# 延伸阅读\n\n](https://tanstack.com/query/latest/docs/react/reference/querycache#further-reading)\n\n要更好地了解 querycache 的内部工作方式，请查看社区资源中的 #18：inside react query。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"MutationCache",frontmatter:{title:"MutationCache",date:"2023-03-27T23:12:50.000Z",permalink:"/pages/742846/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/11.MutationCache.html",relativePath:"01.文档/03.API参考/11.MutationCache.md",key:"v-a9b3546c",path:"/pages/742846/",headers:[{level:2,title:"全局回调",slug:"全局回调",normalizedTitle:"全局回调",charIndex:1006},{level:2,title:"突变缓存.getAll",slug:"突变缓存-getall",normalizedTitle:"突变缓存.getall",charIndex:1298},{level:2,title:"mutationCache.subscribe 订阅",slug:"mutationcache-subscribe-订阅",normalizedTitle:"mutationcache.subscribe 订阅",charIndex:1553},{level:2,title:"突变缓存.clear",slug:"突变缓存-clear",normalizedTitle:"突变缓存.clear",charIndex:1989}],headersStr:"全局回调 突变缓存.getAll mutationCache.subscribe 订阅 突变缓存.clear",content:"# MutationCache\n\nMutationCache 是突变的存储。\n\n通常，您不会直接与 MutationCache 交互，而是使用 QueryClient。\n\nimport { MutationCache } from '@tanstack/react-query'\nconst mutationCache = new MutationCache({  onError: error => {    console.log(error)  },  onSuccess: data => {    console.log(data)  },})\n\n\n它可用的方法有：\n\n * 得到所有\n * 订阅\n * 清除\n\n选项\n\n * onError?: (error: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise<未知> |未知\n   * 选修的\n   * 如果某些突变遇到错误，将调用此函数。\n   * 如果您从中返回一个 Promise，它将被等待\n * onSuccess?: (data: unknown, variables: unknown, context: unknown, mutation: Mutation) => Promise<未知> |未知\n   * 选修的\n   * 如果某些突变成功，将调用此函数。\n   * 如果您从中返回一个 Promise，它将被等待\n * onSettled?: (data: unknown | undefined, error: unknown | null, variables: unknown, context: unknown, mutation: Mutation) => 承诺<未知> |未知\n   * 选修的\n   * 如果某些突变已解决（成功或错误），将调用此函数。\n   * 如果您从中返回一个 Promise，它将被等待\n * onMutate?: (variables: unknown, mutation: Mutation) => Promise<unknown> |未知\n   * 选修的\n   * 这个函数将在一些突变执行之前被调用。\n   * 如果您从中返回一个 Promise，它将被等待\n\n[\n\n\n# 全局回调\n\n](https://tanstack.com/query/latest/docs/react/reference/MutationCache#global-callbacks)\n\nMutationCache 上的 onError、onSuccess、onSettled 和 onMutate 回调可用于在全局级别处理这些事件。它们与提供给 QueryClient 的 defaultOptions 不同，因为：\n\n * defaultOptions 可以被每个 Mutation 覆盖——全局回调将始终被调用。\n * onMutate 不允许返回上下文值。\n\n[\n\n\n# 突变缓存.getAll\n\n](https://tanstack.com/query/latest/docs/react/reference/MutationCache#mutationcachegetall)\n\ngetAll 返回缓存中的所有突变。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关突变的更多信息时可以派上用场\n\nconst mutations = mutationCache.getAll()\n\n\nReturns\n\n * 突变[]\n   * 来自缓存的变异实例\n\n[\n\n\n# mutationCache.subscribe 订阅\n\n](https://tanstack.com/query/latest/docs/react/reference/MutationCache#mutationcachesubscribe)\n\nsubscribe 方法可用于订阅整个突变缓存，并获知对缓存的安全/已知更新，例如突变状态更改或突变被更新、添加或删除。\n\nconst callback = event => {  console.log(event.type, event.mutation)}\nconst unsubscribe = mutationCache.subscribe(callback)\n\n\n选项\n\n * 回调：（突变？：MutationCacheNotifyEvent）=>无效\n   * 每当更新时，都会使用突变缓存调用此函数。\n\nReturns\n\n * 退订：功能=>无效\n   * 此函数将从突变缓存中取消订阅回调。\n\n[\n\n\n# 突变缓存.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/MutationCache#mutationcacheclear)\n\nclear 方法可用于完全清除缓存并重新开始。\n\nmutationCache.clear()\n\n\n在 GitHub 上编辑",normalizedContent:"# mutationcache\n\nmutationcache 是突变的存储。\n\n通常，您不会直接与 mutationcache 交互，而是使用 queryclient。\n\nimport { mutationcache } from '@tanstack/react-query'\nconst mutationcache = new mutationcache({  onerror: error => {    console.log(error)  },  onsuccess: data => {    console.log(data)  },})\n\n\n它可用的方法有：\n\n * 得到所有\n * 订阅\n * 清除\n\n选项\n\n * onerror?: (error: unknown, variables: unknown, context: unknown, mutation: mutation) => promise<未知> |未知\n   * 选修的\n   * 如果某些突变遇到错误，将调用此函数。\n   * 如果您从中返回一个 promise，它将被等待\n * onsuccess?: (data: unknown, variables: unknown, context: unknown, mutation: mutation) => promise<未知> |未知\n   * 选修的\n   * 如果某些突变成功，将调用此函数。\n   * 如果您从中返回一个 promise，它将被等待\n * onsettled?: (data: unknown | undefined, error: unknown | null, variables: unknown, context: unknown, mutation: mutation) => 承诺<未知> |未知\n   * 选修的\n   * 如果某些突变已解决（成功或错误），将调用此函数。\n   * 如果您从中返回一个 promise，它将被等待\n * onmutate?: (variables: unknown, mutation: mutation) => promise<unknown> |未知\n   * 选修的\n   * 这个函数将在一些突变执行之前被调用。\n   * 如果您从中返回一个 promise，它将被等待\n\n[\n\n\n# 全局回调\n\n](https://tanstack.com/query/latest/docs/react/reference/mutationcache#global-callbacks)\n\nmutationcache 上的 onerror、onsuccess、onsettled 和 onmutate 回调可用于在全局级别处理这些事件。它们与提供给 queryclient 的 defaultoptions 不同，因为：\n\n * defaultoptions 可以被每个 mutation 覆盖——全局回调将始终被调用。\n * onmutate 不允许返回上下文值。\n\n[\n\n\n# 突变缓存.getall\n\n](https://tanstack.com/query/latest/docs/react/reference/mutationcache#mutationcachegetall)\n\ngetall 返回缓存中的所有突变。\n\n> 注意：大多数应用程序通常不需要这，但在极少数情况下需要有关突变的更多信息时可以派上用场\n\nconst mutations = mutationcache.getall()\n\n\nreturns\n\n * 突变[]\n   * 来自缓存的变异实例\n\n[\n\n\n# mutationcache.subscribe 订阅\n\n](https://tanstack.com/query/latest/docs/react/reference/mutationcache#mutationcachesubscribe)\n\nsubscribe 方法可用于订阅整个突变缓存，并获知对缓存的安全/已知更新，例如突变状态更改或突变被更新、添加或删除。\n\nconst callback = event => {  console.log(event.type, event.mutation)}\nconst unsubscribe = mutationcache.subscribe(callback)\n\n\n选项\n\n * 回调：（突变？：mutationcachenotifyevent）=>无效\n   * 每当更新时，都会使用突变缓存调用此函数。\n\nreturns\n\n * 退订：功能=>无效\n   * 此函数将从突变缓存中取消订阅回调。\n\n[\n\n\n# 突变缓存.clear\n\n](https://tanstack.com/query/latest/docs/react/reference/mutationcache#mutationcacheclear)\n\nclear 方法可用于完全清除缓存并重新开始。\n\nmutationcache.clear()\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"infiniteQueryObserver",frontmatter:{title:"infiniteQueryObserver",date:"2023-03-27T23:13:46.000Z",permalink:"/pages/630f72/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/13.infiniteQueryObserver.html",relativePath:"01.文档/03.API参考/13.infiniteQueryObserver.md",key:"v-3848fcaa",path:"/pages/630f72/",headers:[{level:2,title:"无限查询观察者",slug:"无限查询观察者",normalizedTitle:"无限查询观察者",charIndex:31}],headersStr:"无限查询观察者",content:"# InfiniteQueryObserver\n\n[\n\n\n# 无限查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/InfiniteQueryObserver#infinitequeryobserver)\n\nInfiniteQueryObserver 可用于观察和在无限查询之间切换。\n\nconst observer = new InfiniteQueryObserver(queryClient, {  queryKey: ['posts'],  queryFn: fetchPosts,  getNextPageParam: (lastPage, allPages) => lastPage.nextCursor,  getPreviousPageParam: (firstPage, allPages) => firstPage.prevCursor,})\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\nInfiniteQueryObserver 的选项与 useInfiniteQuery 的选项完全相同。\n\n在 GitHub 上编辑",normalizedContent:"# infinitequeryobserver\n\n[\n\n\n# 无限查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/infinitequeryobserver#infinitequeryobserver)\n\ninfinitequeryobserver 可用于观察和在无限查询之间切换。\n\nconst observer = new infinitequeryobserver(queryclient, {  querykey: ['posts'],  queryfn: fetchposts,  getnextpageparam: (lastpage, allpages) => lastpage.nextcursor,  getpreviouspageparam: (firstpage, allpages) => firstpage.prevcursor,})\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\ninfinitequeryobserver 的选项与 useinfinitequery 的选项完全相同。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueryErrorResetBoundary",frontmatter:{title:"QueryErrorResetBoundary",date:"2023-03-27T23:14:51.000Z",permalink:"/pages/3b8175/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/15.QueryErrorResetBoundary.html",relativePath:"01.文档/03.API参考/15.QueryErrorResetBoundary.md",key:"v-054ae28a",path:"/pages/3b8175/",headersStr:null,content:"# QueryErrorResetBoundary\n\n在查询中使用 suspense 或 useErrorBoundaries 时，您需要一种方法让查询知道您想要在发生某些错误后重新呈现时重试。使用 QueryErrorResetBoundary 组件，您可以重置组件边界内的任何查询错误。\n\nimport { QueryErrorResetBoundary } from '@tanstack/react-query'import { ErrorBoundary } from 'react-error-boundary'\nconst App: React.FC = () => (  <QueryErrorResetBoundary>    {({ reset }) => (      <ErrorBoundary        onReset={reset}        fallbackRender={({ resetErrorBoundary }) => (          <div>            There was an error!            <Button onClick={() => resetErrorBoundary()}>Try again</Button>          </div>        )}      >        <Page />      </ErrorBoundary>    )}  </QueryErrorResetBoundary>)\n\n\n在 GitHub 上编辑",normalizedContent:"# queryerrorresetboundary\n\n在查询中使用 suspense 或 useerrorboundaries 时，您需要一种方法让查询知道您想要在发生某些错误后重新呈现时重试。使用 queryerrorresetboundary 组件，您可以重置组件边界内的任何查询错误。\n\nimport { queryerrorresetboundary } from '@tanstack/react-query'import { errorboundary } from 'react-error-boundary'\nconst app: react.fc = () => (  <queryerrorresetboundary>    {({ reset }) => (      <errorboundary        onreset={reset}        fallbackrender={({ reseterrorboundary }) => (          <div>            there was an error!            <button onclick={() => reseterrorboundary()}>try again</button>          </div>        )}      >        <page />      </errorboundary>    )}  </queryerrorresetboundary>)\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"QueriesObserver",frontmatter:{title:"QueriesObserver",date:"2023-03-27T23:14:23.000Z",permalink:"/pages/f40633/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/14.QueriesObserver.html",relativePath:"01.文档/03.API参考/14.QueriesObserver.md",key:"v-4ba8376c",path:"/pages/f40633/",headers:[{level:2,title:"查询观察者",slug:"查询观察者",normalizedTitle:"查询观察者",charIndex:25}],headersStr:"查询观察者",content:"# QueriesObserver\n\n[\n\n\n# 查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/QueriesObserver#queriesobserver)\n\nQueriesObserver 可用于观察多个查询。\n\nconst observer = new QueriesObserver(queryClient, [  { queryKey: ['post', 1], queryFn: fetchPost },  { queryKey: ['post', 2], queryFn: fetchPost },])\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\nQueriesObserver 的选项与 useQueries 的选项完全相同。\n\n在 GitHub 上编辑",normalizedContent:"# queriesobserver\n\n[\n\n\n# 查询观察者\n\n](https://tanstack.com/query/latest/docs/react/reference/queriesobserver#queriesobserver)\n\nqueriesobserver 可用于观察多个查询。\n\nconst observer = new queriesobserver(queryclient, [  { querykey: ['post', 1], queryfn: fetchpost },  { querykey: ['post', 2], queryfn: fetchpost },])\nconst unsubscribe = observer.subscribe(result => {  console.log(result)  unsubscribe()})\n\n\n选项\n\nqueriesobserver 的选项与 usequeries 的选项完全相同。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"FocusManager",frontmatter:{title:"FocusManager",date:"2023-03-27T23:15:37.000Z",permalink:"/pages/e801b7/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/17.FocusManager.html",relativePath:"01.文档/03.API参考/17.FocusManager.md",key:"v-5f04cf24",path:"/pages/e801b7/",headers:[{level:2,title:"focusManager.setEventListener",slug:"focusmanager-seteventlistener",normalizedTitle:"focusmanager.seteventlistener",charIndex:124},{level:2,title:"focusManager.setFocused",slug:"focusmanager-setfocused",normalizedTitle:"focusmanager.setfocused",charIndex:819},{level:2,title:"focusManager.isFocused",slug:"focusmanager-isfocused",normalizedTitle:"focusmanager.isfocused",charIndex:1235}],headersStr:"focusManager.setEventListener focusManager.setFocused focusManager.isFocused",content:"# FocusManager\n\nFocusManager 管理 TanStack Query 中的焦点状态。\n\n它可用于更改默认事件侦听器或手动更改焦点状态。\n\n它可用的方法有：\n\n * 设置事件监听器\n * 设置重点\n * 专注于\n\n[\n\n\n# focusManager.setEventListener\n\n](https://tanstack.com/query/latest/docs/react/reference/focusManager#focusmanagerseteventlistener)\n\nsetEventListener 可用于设置自定义事件侦听器：\n\nimport { focusManager } from '@tanstack/react-query'\nfocusManager.setEventListener(handleFocus => {  // Listen to visibilitychange and focus  if (typeof window !== 'undefined' && window.addEventListener) {    window.addEventListener('visibilitychange', handleFocus, false)    window.addEventListener('focus', handleFocus, false)  }\n  return () => {    // Be sure to unsubscribe if a new handler is set    window.removeEventListener('visibilitychange', handleFocus)    window.removeEventListener('focus', handleFocus)  }})\n\n\n[\n\n\n# focusManager.setFocused\n\n](https://tanstack.com/query/latest/docs/react/reference/focusManager#focusmanagersetfocused)\n\nsetFocused 可用于手动设置焦点状态。设置 undefined 以回退到默认的焦点检查。\n\nimport { focusManager } from '@tanstack/react-query'\n// Set focusedfocusManager.setFocused(true)\n// Set unfocusedfocusManager.setFocused(false)\n// Fallback to the default focus checkfocusManager.setFocused(undefined)\n\n\n选项\n\n * 重点：布尔值 |不明确的\n\n[\n\n\n# focusManager.isFocused\n\n](https://tanstack.com/query/latest/docs/react/reference/focusManager#focusmanagerisfocused)\n\nisFocused 可用于获取当前焦点状态。\n\nconst isFocused = focusManager.isFocused()\n\n\n在 GitHub 上编辑",normalizedContent:"# focusmanager\n\nfocusmanager 管理 tanstack query 中的焦点状态。\n\n它可用于更改默认事件侦听器或手动更改焦点状态。\n\n它可用的方法有：\n\n * 设置事件监听器\n * 设置重点\n * 专注于\n\n[\n\n\n# focusmanager.seteventlistener\n\n](https://tanstack.com/query/latest/docs/react/reference/focusmanager#focusmanagerseteventlistener)\n\nseteventlistener 可用于设置自定义事件侦听器：\n\nimport { focusmanager } from '@tanstack/react-query'\nfocusmanager.seteventlistener(handlefocus => {  // listen to visibilitychange and focus  if (typeof window !== 'undefined' && window.addeventlistener) {    window.addeventlistener('visibilitychange', handlefocus, false)    window.addeventlistener('focus', handlefocus, false)  }\n  return () => {    // be sure to unsubscribe if a new handler is set    window.removeeventlistener('visibilitychange', handlefocus)    window.removeeventlistener('focus', handlefocus)  }})\n\n\n[\n\n\n# focusmanager.setfocused\n\n](https://tanstack.com/query/latest/docs/react/reference/focusmanager#focusmanagersetfocused)\n\nsetfocused 可用于手动设置焦点状态。设置 undefined 以回退到默认的焦点检查。\n\nimport { focusmanager } from '@tanstack/react-query'\n// set focusedfocusmanager.setfocused(true)\n// set unfocusedfocusmanager.setfocused(false)\n// fallback to the default focus checkfocusmanager.setfocused(undefined)\n\n\n选项\n\n * 重点：布尔值 |不明确的\n\n[\n\n\n# focusmanager.isfocused\n\n](https://tanstack.com/query/latest/docs/react/reference/focusmanager#focusmanagerisfocused)\n\nisfocused 可用于获取当前焦点状态。\n\nconst isfocused = focusmanager.isfocused()\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"useQueryErrorResetBoundary",frontmatter:{title:"useQueryErrorResetBoundary",date:"2023-03-27T23:15:17.000Z",permalink:"/pages/b25a66/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/16.useQueryErrorResetBoundary.html",relativePath:"01.文档/03.API参考/16.useQueryErrorResetBoundary.md",key:"v-22d42028",path:"/pages/b25a66/",headersStr:null,content:"# useQueryErrorResetBoundary\n\n此挂钩将重置最近的 QueryErrorResetBoundary 中的任何查询错误。如果没有定义边界，它将全局重置它们：\n\nimport { useQueryErrorResetBoundary } from '@tanstack/react-query'import { ErrorBoundary } from 'react-error-boundary'\nconst App: React.FC = () => {  const { reset } = useQueryErrorResetBoundary()  return (    <ErrorBoundary      onReset={reset}      fallbackRender={({ resetErrorBoundary }) => (        <div>          There was an error!          <Button onClick={() => resetErrorBoundary()}>Try again</Button>        </div>      )}    >      <Page />    </ErrorBoundary>  )}\n\n\n在 GitHub 上编辑",normalizedContent:"# usequeryerrorresetboundary\n\n此挂钩将重置最近的 queryerrorresetboundary 中的任何查询错误。如果没有定义边界，它将全局重置它们：\n\nimport { usequeryerrorresetboundary } from '@tanstack/react-query'import { errorboundary } from 'react-error-boundary'\nconst app: react.fc = () => {  const { reset } = usequeryerrorresetboundary()  return (    <errorboundary      onreset={reset}      fallbackrender={({ reseterrorboundary }) => (        <div>          there was an error!          <button onclick={() => reseterrorboundary()}>try again</button>        </div>      )}    >      <page />    </errorboundary>  )}\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-cb7d9a7c",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/25, 23:44:17",lastUpdatedTimestamp:1679759057e3},{title:"OnlineManager",frontmatter:{title:"OnlineManager",date:"2023-03-27T23:16:02.000Z",permalink:"/pages/42488c/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/18.OnlineManager.html",relativePath:"01.文档/03.API参考/18.OnlineManager.md",key:"v-1e079aca",path:"/pages/42488c/",headers:[{level:2,title:"onlineManager.setEventListener",slug:"onlinemanager-seteventlistener",normalizedTitle:"onlinemanager.seteventlistener",charIndex:125},{level:2,title:"在线管理器.setOnline",slug:"在线管理器-setonline",normalizedTitle:"在线管理器.setonline",charIndex:538},{level:2,title:"在线管理器.isOnline",slug:"在线管理器-isonline",normalizedTitle:"在线管理器.isonline",charIndex:951}],headersStr:"onlineManager.setEventListener 在线管理器.setOnline 在线管理器.isOnline",content:"# OnlineManager\n\nOnlineManager 管理 TanStack Query 中的在线状态。\n\n它可用于更改默认事件侦听器或手动更改在线状态。\n\n它可用的方法有：\n\n * 设置事件监听器\n * 设置在线\n * 在线\n\n[\n\n\n# onlineManager.setEventListener\n\n](https://tanstack.com/query/latest/docs/react/reference/onlineManager#onlinemanagerseteventlistener)\n\nsetEventListener 可用于设置自定义事件侦听器：\n\nimport NetInfo from '@react-native-community/netinfo'import { onlineManager } from '@tanstack/react-query'\nonlineManager.setEventListener(setOnline => {  return NetInfo.addEventListener(state => {    setOnline(!!state.isConnected)  })})\n\n\n[\n\n\n# 在线管理器.setOnline\n\n](https://tanstack.com/query/latest/docs/react/reference/onlineManager#onlinemanagersetonline)\n\nsetOnline 可用于手动设置在线状态。设置 undefined 以回退到默认的在线检查。\n\nimport { onlineManager } from '@tanstack/react-query'\n// Set to onlineonlineManager.setOnline(true)\n// Set to offlineonlineManager.setOnline(false)\n// Fallback to the default online checkonlineManager.setOnline(undefined)\n\n\n选项\n\n * 在线：布尔值 |不明确的\n\n[\n\n\n# 在线管理器.isOnline\n\n](https://tanstack.com/query/latest/docs/react/reference/onlineManager#onlinemanagerisonline)\n\nisOnline 可用于获取当前在线状态。\n\nconst isOnline = onlineManager.isOnline()\n\n\n在 GitHub 上编辑",normalizedContent:"# onlinemanager\n\nonlinemanager 管理 tanstack query 中的在线状态。\n\n它可用于更改默认事件侦听器或手动更改在线状态。\n\n它可用的方法有：\n\n * 设置事件监听器\n * 设置在线\n * 在线\n\n[\n\n\n# onlinemanager.seteventlistener\n\n](https://tanstack.com/query/latest/docs/react/reference/onlinemanager#onlinemanagerseteventlistener)\n\nseteventlistener 可用于设置自定义事件侦听器：\n\nimport netinfo from '@react-native-community/netinfo'import { onlinemanager } from '@tanstack/react-query'\nonlinemanager.seteventlistener(setonline => {  return netinfo.addeventlistener(state => {    setonline(!!state.isconnected)  })})\n\n\n[\n\n\n# 在线管理器.setonline\n\n](https://tanstack.com/query/latest/docs/react/reference/onlinemanager#onlinemanagersetonline)\n\nsetonline 可用于手动设置在线状态。设置 undefined 以回退到默认的在线检查。\n\nimport { onlinemanager } from '@tanstack/react-query'\n// set to onlineonlinemanager.setonline(true)\n// set to offlineonlinemanager.setonline(false)\n// fallback to the default online checkonlinemanager.setonline(undefined)\n\n\n选项\n\n * 在线：布尔值 |不明确的\n\n[\n\n\n# 在线管理器.isonline\n\n](https://tanstack.com/query/latest/docs/react/reference/onlinemanager#onlinemanagerisonline)\n\nisonline 可用于获取当前在线状态。\n\nconst isonline = onlinemanager.isonline()\n\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"hydration",frontmatter:{title:"hydration",date:"2023-03-27T23:17:12.000Z",permalink:"/pages/52e8bd/"},regularPath:"/01.%E6%96%87%E6%A1%A3/03.API%E5%8F%82%E8%80%83/19.hydration.html",relativePath:"01.文档/03.API参考/19.hydration.md",key:"v-f3679c2c",path:"/pages/52e8bd/",headers:[{level:2,title:"脱水",slug:"脱水",normalizedTitle:"脱水",charIndex:19},{level:3,title:"限制",slug:"限制",normalizedTitle:"限制",charIndex:1126},{level:2,title:"水合物",slug:"水合物",normalizedTitle:"水合物",charIndex:1685},{level:3,title:"限制",slug:"限制-2",normalizedTitle:"限制",charIndex:1126},{level:2,title:"使用水合物",slug:"使用水合物",normalizedTitle:"使用水合物",charIndex:2381},{level:2,title:"补水",slug:"补水",normalizedTitle:"补水",charIndex:2682}],headersStr:"脱水 限制 水合物 限制 使用水合物 补水",content:"# hydration\n\n[\n\n\n# 脱水\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#dehydrate)\n\ndehydrate 创建缓存的冻结表示，稍后可以使用 Hydrate、useHydrate 或 hydrate 对其进行水合。这对于将预取查询从服务器传递到客户端或将查询持久保存到 localStorage 或其他持久位置很有用。默认情况下它只包括当前成功的查询。\n\nimport { dehydrate } from '@tanstack/react-query'\nconst dehydratedState = dehydrate(queryClient, {  shouldDehydrateQuery,})\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * 应该脱水的queryClient\n * 选项：脱水选项\n   * 选修的\n   * 脱水突变：布尔值\n     * 选修的\n     * 是否脱水突变。\n   * 脱水查询：布尔值\n     * 选修的\n     * 是否脱水查询。\n   * shouldDehydrateMutation: (mutation: Mutation) => 布尔值\n     * 选修的\n     * 为缓存中的每个突变调用此函数\n     * 返回 true 以将此突变包含在脱水中，否则返回 false\n     * 默认版本仅包含暂停的突变\n     * 如果您想在保留以前行为的同时扩展功能，请导入并执行 defaultShouldDehydrateMutation 作为 return 语句的一部分\n   * shouldDehydrateQuery: (query: Query) => 布尔值\n     * 选修的\n     * 为缓存中的每个查询调用此函数\n     * 返回 true 以将此查询包含在脱水中，否则返回 false\n     * 默认版本只包括成功的查询，做 shouldDehydrateQuery: () => true 包括所有查询\n     * 如果您想在保留以前行为的同时扩展功能，请导入并执行 defaultShouldDehydrateQuery 作为返回语句的一部分\n\nReturns\n\n * 脱水状态：脱水状态\n   * 这包括稍后补充 queryClient 所需的一切\n   * 您不应该依赖此响应的确切格式，它不是公共 API 的一部分并且可以随时更改\n   * 此结果不是序列化形式，如果需要，您需要自己做\n\n[\n\n\n# 限制\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#limitations)\n\n一些存储系统（例如浏览器 Web Storage API）要求值是 JSON 可序列化的。如果您需要对不能自动序列化为 JSON 的值进行脱水处理（例如 Error 或 undefined），您必须自己序列化它们。由于默认只包含成功的查询，要包含错误，您必须提供 shouldDehydrateQuery，例如：\n\n// serverconst state = dehydrate(client, { shouldDehydrateQuery: () => true }) // to also include Errorsconst serializedState = mySerialize(state) // transform Error instances to objects\n// clientconst state = myDeserialize(serializedState) // transform objects back to Error instanceshydrate(client, state)\n\n\n[\n\n\n# 水合物\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#hydrate)\n\nhydrate 将先前脱水的状态添加到缓存中。\n\nimport { hydrate } from '@tanstack/react-query'\nhydrate(queryClient, dehydratedState, options)\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * queryClient 将状态混合到\n * 脱水状态：脱水状态\n   * 必需的\n   * 水合物进入客户端的状态\n * 选项：HydrateOptions\n   * 选修的\n   * 默认选项：默认选项\n     * 选修的\n     * mutations: MutationOptions 用于水合突变的默认突变选项。\n     * 查询：QueryOptions 用于混合查询的默认查询选项。\n   * 上下文？：React.Context<QueryClient |未定义>\n     * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n[\n\n\n# 限制\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#limitations-1)\n\n如果 dehydration 中包含的查询已经存在于 queryCache 中，hydrate 不会覆盖它们，它们将被静默丢弃。\n\n[\n\n\n# 使用水合物\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#usehydrate)\n\nuseHydrate 将先前的脱水状态添加到 queryClient 中，该状态将由 useQueryClient() 返回。如果客户端已经包含数据，新查询将根据更新时间戳智能合并。\n\nimport { useHydrate } from '@tanstack/react-query'\nuseHydrate(dehydratedState, options)\n\n\n选项\n\n * 脱水状态：脱水状态\n   * 必需的\n   * 补水的状态\n * 选项：HydrateOptions\n   * 选修的\n   * 默认选项：查询选项\n     * 用于混合查询的默认查询选项。\n   * 上下文？：React.Context<QueryClient |未定义>\n     * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n[\n\n\n# 补水\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#hydrate-1)\n\nHydrate 将 useHydrate 包装到组件中。当您需要类组件中的 hydrate 或在 QueryClientProvider 呈现的同一级别上需要 hydrate 时可能很有用。\n\nimport { Hydrate } from '@tanstack/react-query'\nfunction App() {  return <Hydrate state={dehydratedState}>...</Hydrate>}\n\n\n选项\n\n * 状态：脱水状态\n   * 补水的状态\n * 选项：HydrateOptions\n   * 选修的\n   * 默认选项：查询选项\n     * 用于混合查询的默认查询选项。\n   * 上下文？：React.Context<QueryClient |未定义>\n     * 使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。\n\n在 GitHub 上编辑",normalizedContent:"# hydration\n\n[\n\n\n# 脱水\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#dehydrate)\n\ndehydrate 创建缓存的冻结表示，稍后可以使用 hydrate、usehydrate 或 hydrate 对其进行水合。这对于将预取查询从服务器传递到客户端或将查询持久保存到 localstorage 或其他持久位置很有用。默认情况下它只包括当前成功的查询。\n\nimport { dehydrate } from '@tanstack/react-query'\nconst dehydratedstate = dehydrate(queryclient, {  shoulddehydratequery,})\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * 应该脱水的queryclient\n * 选项：脱水选项\n   * 选修的\n   * 脱水突变：布尔值\n     * 选修的\n     * 是否脱水突变。\n   * 脱水查询：布尔值\n     * 选修的\n     * 是否脱水查询。\n   * shoulddehydratemutation: (mutation: mutation) => 布尔值\n     * 选修的\n     * 为缓存中的每个突变调用此函数\n     * 返回 true 以将此突变包含在脱水中，否则返回 false\n     * 默认版本仅包含暂停的突变\n     * 如果您想在保留以前行为的同时扩展功能，请导入并执行 defaultshoulddehydratemutation 作为 return 语句的一部分\n   * shoulddehydratequery: (query: query) => 布尔值\n     * 选修的\n     * 为缓存中的每个查询调用此函数\n     * 返回 true 以将此查询包含在脱水中，否则返回 false\n     * 默认版本只包括成功的查询，做 shoulddehydratequery: () => true 包括所有查询\n     * 如果您想在保留以前行为的同时扩展功能，请导入并执行 defaultshoulddehydratequery 作为返回语句的一部分\n\nreturns\n\n * 脱水状态：脱水状态\n   * 这包括稍后补充 queryclient 所需的一切\n   * 您不应该依赖此响应的确切格式，它不是公共 api 的一部分并且可以随时更改\n   * 此结果不是序列化形式，如果需要，您需要自己做\n\n[\n\n\n# 限制\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#limitations)\n\n一些存储系统（例如浏览器 web storage api）要求值是 json 可序列化的。如果您需要对不能自动序列化为 json 的值进行脱水处理（例如 error 或 undefined），您必须自己序列化它们。由于默认只包含成功的查询，要包含错误，您必须提供 shoulddehydratequery，例如：\n\n// serverconst state = dehydrate(client, { shoulddehydratequery: () => true }) // to also include errorsconst serializedstate = myserialize(state) // transform error instances to objects\n// clientconst state = mydeserialize(serializedstate) // transform objects back to error instanceshydrate(client, state)\n\n\n[\n\n\n# 水合物\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#hydrate)\n\nhydrate 将先前脱水的状态添加到缓存中。\n\nimport { hydrate } from '@tanstack/react-query'\nhydrate(queryclient, dehydratedstate, options)\n\n\n选项\n\n * 客户端：查询客户端\n   * 必需的\n   * queryclient 将状态混合到\n * 脱水状态：脱水状态\n   * 必需的\n   * 水合物进入客户端的状态\n * 选项：hydrateoptions\n   * 选修的\n   * 默认选项：默认选项\n     * 选修的\n     * mutations: mutationoptions 用于水合突变的默认突变选项。\n     * 查询：queryoptions 用于混合查询的默认查询选项。\n   * 上下文？：react.context<queryclient |未定义>\n     * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n[\n\n\n# 限制\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#limitations-1)\n\n如果 dehydration 中包含的查询已经存在于 querycache 中，hydrate 不会覆盖它们，它们将被静默丢弃。\n\n[\n\n\n# 使用水合物\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#usehydrate)\n\nusehydrate 将先前的脱水状态添加到 queryclient 中，该状态将由 usequeryclient() 返回。如果客户端已经包含数据，新查询将根据更新时间戳智能合并。\n\nimport { usehydrate } from '@tanstack/react-query'\nusehydrate(dehydratedstate, options)\n\n\n选项\n\n * 脱水状态：脱水状态\n   * 必需的\n   * 补水的状态\n * 选项：hydrateoptions\n   * 选修的\n   * 默认选项：查询选项\n     * 用于混合查询的默认查询选项。\n   * 上下文？：react.context<queryclient |未定义>\n     * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n[\n\n\n# 补水\n\n](https://tanstack.com/query/latest/docs/react/reference/hydration#hydrate-1)\n\nhydrate 将 usehydrate 包装到组件中。当您需要类组件中的 hydrate 或在 queryclientprovider 呈现的同一级别上需要 hydrate 时可能很有用。\n\nimport { hydrate } from '@tanstack/react-query'\nfunction app() {  return <hydrate state={dehydratedstate}>...</hydrate>}\n\n\n选项\n\n * 状态：脱水状态\n   * 补水的状态\n * 选项：hydrateoptions\n   * 选修的\n   * 默认选项：查询选项\n     * 用于混合查询的默认查询选项。\n   * 上下文？：react.context<queryclient |未定义>\n     * 使用它来使用自定义 react 查询上下文。否则，将使用 defaultcontext。\n\n在 github 上编辑",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"React Query",tagline:"🚀为TS/JS、React、Solid、Vue和Svelte提供强大的异步状态管理。",actionText:"开始使用 →",actionLink:"/pages/70bdff/",bannerBg:"none",features:[{title:"声明性和自动",details:"用手写你的数据获取逻辑已经结束了。告诉TanStack Query在哪里获取你的数据，以及你需要它有多新鲜，其余的都是自动的。它处理缓存，后台更新和陈旧的数据，开箱即用，零配置。"},{title:"简单和熟悉",details:"如果你知道如何使用承诺或async/await，那么你已经知道如何使用TanStack Query。没有全局状态需要管理，没有还原器、规范化系统或沉重的配置需要理解。只需传递一个能解决你的数据的函数（或抛出一个错误），剩下的就是历史了。"},{title:"可扩展性",details:"TanStack Query可以配置到每个观察者的查询实例，并有旋钮和选项来适应每个使用情况。它配备了专用的开发工具、无限加载的API和一流的突变工具，使更新数据变得轻而易举。不要担心，所有的东西都是为成功而预先配置的！"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-251cb4a4",path:"/",headersStr:null,content:"本文档仅供个人学习使用，机翻，会有大量错误，慢慢完善吧。\n\n\n",normalizedContent:"本文档仅供个人学习使用，机翻，会有大量错误，慢慢完善吧。\n\n\n",charsets:{cjk:!0},lastUpdated:"2023/03/26, 00:48:07",lastUpdatedTimestamp:1679762887e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"文档",link:"/pages/70bdff/"}],sidebarDepth:3,logo:"/img/logo.png",repo:"xugaoyi/vuepress-theme-vdoing",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.文档/":[{title:"入门",collapsable:!1,children:[["01.入门/01.概述.md","概述","/pages/70bdff/"],["01.入门/02.安装.md","安装","/pages/1ab0d6/"],["01.入门/03.快速开始.md","快速开始","/pages/c31375/"]]},{title:"指南和概念",collapsable:!1,children:[["02.指南和概念/01.Querys.md","Querys","/pages/3e9b56/"],["02.指南和概念/02.Query Keys.md","Query Keys","/pages/0b320a/"],["02.指南和概念/03.Query Function.md","Query Function","/pages/4dbca6/"],["02.指南和概念/04.Network Mode.md","Network Mode","/pages/b75375/"],["02.指南和概念/05.并行查询.md","并行查询","/pages/540635/"],["02.指南和概念/06.依赖查询.md","依赖查询","/pages/743bc6/"],["02.指南和概念/07.后台查询状态.md","后台查询状态","/pages/6c8d60/"],["02.指南和概念/08.窗口焦点.md","窗口焦点","/pages/28a0b1/"],["02.指南和概念/09.禁用&暂停.md","禁用&暂停","/pages/e5c1c3/"],["02.指南和概念/10.重试.md","重试","/pages/cf1427/"],["02.指南和概念/11.分页查询.md","分页查询","/pages/2179dd/"],["02.指南和概念/12.无限查询.md","无限查询","/pages/77c0e9/"],["02.指南和概念/13.初始化查询数据.md","初始化查询数据","/pages/a17f72/"]]},{title:"API参考",collapsable:!1,children:[["03.API参考/01.useQuery.md","useQuery","/pages/c9540b/"],["03.API参考/02.useQueries.md","useQueries","/pages/14ba95/"],["03.API参考/03.useInfiniteQuery.md","useInfiniteQuery","/pages/579fc0/"],["03.API参考/04.useMutation.md","useMutation","/pages/1c32fa/"],["03.API参考/05.useIsFetching.md","useIsFetching","/pages/a75465/"],["03.API参考/06.useIsMutating.md","useIsMutating","/pages/3d7176/"],["03.API参考/07.QueryClient.md","QueryClient","/pages/a861fb/"],["03.API参考/08.QueryClientProvider.md","QueryClientProvider","/pages/3ff973/"],["03.API参考/09.useQueryClient.md","useQueryClient","/pages/ab0f39/"],["03.API参考/10.QueryCache.md","QueryCache","/pages/652a78/"],["03.API参考/11.MutationCache.md","MutationCache","/pages/742846/"],["03.API参考/12.QueryObserver.md","QueryObserver","/pages/0dc10f/"],["03.API参考/13.infiniteQueryObserver.md","infiniteQueryObserver","/pages/630f72/"],["03.API参考/14.QueriesObserver.md","QueriesObserver","/pages/f40633/"],["03.API参考/15.QueryErrorResetBoundary.md","QueryErrorResetBoundary","/pages/3b8175/"],["03.API参考/16.useQueryErrorResetBoundary.md","useQueryErrorResetBoundary","/pages/b25a66/"],["03.API参考/17.FocusManager.md","FocusManager","/pages/e801b7/"],["03.API参考/18.OnlineManager.md","OnlineManager","/pages/42488c/"],["03.API参考/19.hydration.md","hydration","/pages/52e8bd/"]]}],catalogue:{}},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"WXL570CN",href:"https://github.com/WXL570CN"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/WXL570CN"}]},footer:{createYear:2023,copyrightInfo:"WXL570CN | MIT License"}}};var wu=n(94),ku=n(95),xu=n(11);var _u={computed:{$filterPosts(){return this.$site.pages.filter(e=>{const{frontmatter:{pageComponent:t,article:n,home:r}}=e;return!(t||!1===n||!0===r)})},$sortPosts(){return(e=this.$filterPosts).sort((e,t)=>{const n=e.frontmatter.sticky,r=t.frontmatter.sticky;return n&&r?n==r?Object(xu.a)(e,t):n-r:n&&!r?-1:!n&&r?1:Object(xu.a)(e,t)}),e;var e},$sortPostsByDate(){return(e=this.$filterPosts).sort((e,t)=>Object(xu.a)(e,t)),e;var e},$groupPosts(){return function(e){const t={},n={};for(let r=0,a=e.length;r<a;r++){const{frontmatter:{categories:a,tags:o}}=e[r];"array"===Object(xu.n)(a)&&a.forEach(n=>{n&&(t[n]||(t[n]=[]),t[n].push(e[r]))}),"array"===Object(xu.n)(o)&&o.forEach(t=>{t&&(n[t]||(n[t]=[]),n[t].push(e[r]))})}return{categories:t,tags:n}}(this.$sortPosts)},$categoriesAndTags(){return function(e){const t=[],n=[];for(let n in e.categories)t.push({key:n,length:e.categories[n].length});for(let t in e.tags)n.push({key:t,length:e.tags[t].length});return{categories:t,tags:n}}(this.$groupPosts)}}};Hn.component(wu.default),Hn.component(ku.default);function Cu(e){return e.toString().padStart(2,"0")}n(243);Hn.component("Badge",()=>Promise.all([n.e(0),n.e(3)]).then(n.bind(null,368))),Hn.component("CodeBlock",()=>Promise.resolve().then(n.bind(null,94))),Hn.component("CodeGroup",()=>Promise.resolve().then(n.bind(null,95)));n(244);var Eu=[({Vue:e,options:t,router:n,siteData:r,isServer:a})=>{a||n.afterEach(()=>{var e;e=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const e=document.getElementsByClassName("wwads-cn"),t=document.querySelector(".wwads-content");e[0]&&!t&&(e[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(e,1):document.addEventListener("DOMContentLoaded",e),setTimeout(()=>{const e=document.querySelector(".page-wwads");if(!e)return;const t=e.querySelector(".wwads-hide");t&&(t.onclick=()=>{e.style.display="none"}),"none"===e.style.display&&(e.style.display="flex")},900)})},({Vue:e,options:t,router:n,siteData:r})=>{r.pages.map(e=>{const{frontmatter:{date:t,author:n}}=e;"string"==typeof t&&"Z"===t.charAt(t.length-1)&&(e.frontmatter.date=function(e){e instanceof Date||(e=new Date(e));return`${e.getUTCFullYear()}-${Cu(e.getUTCMonth()+1)}-${Cu(e.getUTCDate())} ${Cu(e.getUTCHours())}:${Cu(e.getUTCMinutes())}:${Cu(e.getUTCSeconds())}`}(t)),n?e.author=n:r.themeConfig.author&&(e.author=r.themeConfig.author)}),e.mixin(_u)},{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:e})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var e=document.createElement("script");e.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}(),e.afterEach((function(e){_hmt.push(["_trackPageview",e.fullPath])})))}],Pu=[];class Tu extends class{constructor(){this.store=new Hn({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,t){Hn.set(this.store.state,e,t)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Tu.prototype,{getPageAsyncComponent:is,getLayoutAsyncComponent:ss,getAsyncComponent:us,getVueComponent:cs});var Qu={install(e){const t=new Tu;e.$vuepress=t,e.prototype.$vuepress=t}};function Su(e,t){const n=t.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===n)}var Ou={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const t=this.pageKey||this.$parent.$page.key;return ds("pageKey",t),Hn.component(t)||Hn.component(t,is(t)),Hn.component(t)?e(t):e("")}},Au={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:t,slots:n})=>e("div",{class:["content__"+t.slotKey]},n()[t.slotKey])},ju={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Iu=(n(245),n(246),Object(mu.a)(ju,(function(){var e=this.$createElement,t=this._self._c||e;return t("span",[t("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[t("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),t("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),t("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Du={functional:!0,render(e,{parent:t,children:n}){if(t._isMounted)return n;t.$once("hook:mounted",()=>{t.$forceUpdate()})}};Hn.config.productionTip=!1,Hn.use(Ki),Hn.use(Qu),Hn.mixin(function(e,t,n=Hn){!function(e){e.locales&&Object.keys(e.locales).forEach(t=>{e.locales[t].path=t});Object.freeze(e)}(t),n.$vuepress.$set("siteData",t);const r=new(e(n.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),o={};return Object.keys(a).reduce((e,t)=>(t.startsWith("$")&&(e[t]=a[t].get),e),o),{computed:o}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let t,n;for(const r in e)"/"===r?n=e[r]:0===this.$page.path.indexOf(r)&&(t=e[r]);return t||n||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:t}=this.$page.frontmatter;if("string"==typeof t)return t;const n=this.$siteTitle,r=e.frontmatter.home?null:e.frontmatter.title||e.title;return n?r?r+" | "+n:n:r||"VuePress"}get $description(){const e=function(e){if(e){const t=e.filter(e=>"description"===e.name)[0];if(t)return t.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(r.path.toLowerCase()===t.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},qu)),Hn.component("Content",Ou),Hn.component("ContentSlotsDistributor",Au),Hn.component("OutboundLink",Iu),Hn.component("ClientOnly",Du),Hn.component("Layout",ss("Layout")),Hn.component("NotFound",ss("NotFound")),Hn.prototype.$withBase=function(e){const t=this.$site.base;return"/"===e.charAt(0)?t+e.slice(1):e},window.__VUEPRESS__={version:"1.9.2",hash:"50fa597"},async function(e){const t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:qu.routerBase||qu.base,n=new Ki({base:t,mode:"history",fallback:!1,routes:bu,scrollBehavior:(e,t,n)=>n||(e.hash?!Hn.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((t,n,r)=>{if(Su(e,t.path))r();else if(/(\/|\.html)$/.test(t.path))if(/\/$/.test(t.path)){const n=t.path.replace(/\/$/,"")+".html";Su(e,n)?r(n):r()}else r();else{const n=t.path+"/",a=t.path+".html";Su(e,a)?r(a):Su(e,n)?r(n):r()}})}(n);const r={};try{await Promise.all(Eu.filter(e=>"function"==typeof e).map(t=>t({Vue:Hn,options:r,router:n,siteData:qu,isServer:e})))}catch(e){console.error(e)}return{app:new Hn(Object.assign(r,{router:n,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Pu.map(t=>e(t)))])})),router:n}}(!1).then(({app:e,router:t})=>{t.onReady(()=>{e.$mount("#app")})})}]);