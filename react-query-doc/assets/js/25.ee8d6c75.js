(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{350:function(t,a,v){"use strict";v.r(a);var e=v(7),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"usemutation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#usemutation"}},[t._v("#")]),t._v(" useMutation")]),t._v(" "),v("div",{staticClass:"language-tsx extra-class"},[v("pre",{pre:!0,attrs:{class:"language-tsx"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  data"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  error"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  isError"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  isIdle"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  isLoading"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  isPaused"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  isSuccess"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  failureCount"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  failureReason"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  mutate"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  mutateAsync"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  reset"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  status"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMutation")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  mutationFn"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  cacheTime"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  mutationKey"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  networkMode"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onError"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onMutate"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onSettled"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onSuccess"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  retry"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  retryDelay"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  useErrorBoundary"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  meta"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutate")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variables"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  onError"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onSettled"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  onSuccess"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[v("strong",[t._v("选项")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("mutationFn: (变量: TVariables) => Promise<TData>")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("必需，但前提是未定义默认突变函数")])]),t._v(" "),v("li",[t._v("执行异步任务并返回承诺的函数。")]),t._v(" "),v("li",[t._v("variables 是 mutate 将传递给您的 mutationFn 的对象")])])]),t._v(" "),v("li",[v("code",[t._v("缓存时间：数字 |无穷")]),t._v(" "),v("ul",[v("li",[t._v("未使用/非活动缓存数据保留在内存中的时间（以毫秒为单位）。当突变的缓存变为未使用或不活动时，该缓存数据将在这段时间后被垃圾收集。当指定不同的缓存时间时，将使用最长的一个。")]),t._v(" "),v("li",[t._v("如果设置为 Infinity，将禁用垃圾收集")])])]),t._v(" "),v("li",[v("code",[t._v("突变键：字符串")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("可以将突变键设置为继承使用 queryClient.setMutationDefaults 设置的默认值或在开发工具中识别突变。")])])]),t._v(" "),v("li",[v("code",[t._v("网络模式：'在线' | '总是' | '离线优先")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("默认为“在线”")]),t._v(" "),v("li",[t._v("有关详细信息，请参阅网络模式。")])])]),t._v(" "),v("li",[v("code",[t._v("onMutate: (变量: TVariables) => Promise<TContext |无效> |上下文 |空白")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("此函数将在触发变异函数之前触发，并传递变异函数将接收的相同变量")]),t._v(" "),v("li",[t._v("用于对资源执行乐观更新以希望突变成功")]),t._v(" "),v("li",[t._v("如果发生突变失败，此函数返回的值将传递给 onError 和 onSettled 函数，并且可用于回滚乐观更新。")])])]),t._v(" "),v("li",[v("code",[t._v("onSuccess：（数据：TData，变量：TVariables，上下文？：TContext）=> Promise<unknown> |未知")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("该函数将在突变成功时触发，并将传递突变的结果。")]),t._v(" "),v("li",[t._v("如果返回一个承诺，它将在继续之前等待并解决")])])]),t._v(" "),v("li",[v("code",[t._v("onError: (err: TError, variables: TVariables, context?: TContext) => Promise<未知> |未知")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("如果突变遇到错误并将传递错误，则此函数将触发。")]),t._v(" "),v("li",[t._v("如果返回一个承诺，它将在继续之前等待并解决")])])]),t._v(" "),v("li",[v("code",[t._v("onSettled: (data: TData, error: TError, variables: TVariables, context?: TContext) => Promise<未知> |未知")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("当成功获取突变或遇到错误并传递数据或错误时，此函数将触发")]),t._v(" "),v("li",[t._v("如果返回一个承诺，它将在继续之前等待并解决")])])]),t._v(" "),v("li",[v("code",[t._v("重试：布尔值 |编号 | (failureCount: number, error: TError) => 布尔值")]),t._v(" "),v("ul",[v("li",[t._v("默认为 0。")]),t._v(" "),v("li",[t._v("如果为假，失败的突变将不会重试。")]),t._v(" "),v("li",[t._v("如果为真，失败的突变将无限重试。")]),t._v(" "),v("li",[t._v("如果设置为数字，例如3，失败的突变会重试，直到失败的突变计数满足该数量。")])])]),t._v(" "),v("li",[v("code",[t._v("重试延迟：数字 | (retryAttempt: number, error: TError) => number")]),t._v(" "),v("ul",[v("li",[t._v("此函数接收一个 retryAttempt 整数和实际错误，并返回在下一次尝试之前应用的延迟（以毫秒为单位）。")]),t._v(" "),v("li",[t._v("像 attempt => Math.min(attempt > 1 ? 2 ** attempt * 1000 : 1000, 30 * 1000) 这样的函数应用指数退避。")]),t._v(" "),v("li",[t._v("像 attempt => attempt * 1000 这样的函数应用线性退避。")])])]),t._v(" "),v("li",[v("code",[t._v("使用错误边界：未定义 |布尔 | （错误：TError）=> 布尔值")]),t._v(" "),v("ul",[v("li",[t._v("默认为全局查询配置的 useErrorBoundary 值，未定义")]),t._v(" "),v("li",[t._v("如果您希望在渲染阶段抛出变异错误并传播到最近的错误边界，请将此设置为 true")]),t._v(" "),v("li",[t._v("将此设置为 false 以禁用将错误抛出到错误边界的行为。")]),t._v(" "),v("li",[t._v("如果设置为函数，它将传递错误并返回一个布尔值，指示是在错误边界中显示错误 (true) 还是将错误作为状态返回 (false)")])])]),t._v(" "),v("li",[v("code",[t._v("元：记录<字符串，未知>")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("如果设置，则存储有关可根据需要使用的突变缓存条目的附加信息。只要突变可用，它就可以访问（例如 MutationCache 的 onError、onSuccess 函数）。")])])]),t._v(" "),v("li",[v("code",[t._v("上下文？：React.Context<QueryClient |未定义>")]),t._v(" "),v("ul",[v("li",[t._v("使用它来使用自定义 React 查询上下文。否则，将使用 defaultContext。")])])])]),t._v(" "),v("p",[v("strong",[t._v("Returns")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("变异：（变量：TVariables，{onSuccess，onSettled，onError}）=>无效")]),t._v(" "),v("ul",[v("li",[t._v("您可以使用变量调用突变函数来触发突变，并可选择挂钩其他回调选项。")]),t._v(" "),v("li",[v("code",[t._v("变量：TV变量")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("要传递给 mutationFn 的变量对象。")])])]),t._v(" "),v("li",[v("code",[t._v("onSuccess:（数据：TData，变量：TVariables，上下文：TContext）=>无效")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("该函数将在突变成功时触发，并将传递突变的结果。")]),t._v(" "),v("li",[t._v("void 函数，返回值将被忽略")])])]),t._v(" "),v("li",[v("code",[t._v("onError: (err: TError, variables: TVariables, context: TContext | undefined) => 无效")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("如果突变遇到错误并将传递错误，则此函数将触发。")]),t._v(" "),v("li",[t._v("void 函数，返回值将被忽略")])])]),t._v(" "),v("li",[v("code",[t._v("onSettled：（数据：TData | undefined，错误：TError | null，变量：TVariables，上下文：TContext | undefined）=> void")]),t._v(" "),v("ul",[v("li",[t._v("选修的")]),t._v(" "),v("li",[t._v("当成功获取突变或遇到错误并传递数据或错误时，此函数将触发")]),t._v(" "),v("li",[t._v("void 函数，返回值将被忽略")])])]),t._v(" "),v("li",[t._v("如果您发出多个请求，onSuccess 只会在您最近一次调用后触发。")])])]),t._v(" "),v("li",[v("code",[t._v("mutateAsync: (变量: TVariables, { onSuccess, onSettled, onError }) => Promise<TData>")]),t._v(" "),v("ul",[v("li",[t._v("类似于 mutate 但返回一个可以等待的承诺。")])])]),t._v(" "),v("li",[v("code",[t._v("状态：字符串")]),t._v(" "),v("ul",[v("li",[t._v("将：\n"),v("ul",[v("li",[t._v("变异函数执行前的空闲初始状态。")]),t._v(" "),v("li",[t._v("如果当前正在执行突变，则加载。")]),t._v(" "),v("li",[t._v("如果最后一次突变尝试导致错误，则为错误。")]),t._v(" "),v("li",[t._v("如果最后一次突变尝试成功，则成功。")])])])])]),t._v(" "),v("li",[t._v("isIdle、isLoading、isSuccess、isError：从状态派生的布尔变量")]),t._v(" "),v("li",[v("code",[t._v("暂停：布尔值")]),t._v(" "),v("ul",[v("li",[t._v("如果突变已暂停，则为真")]),t._v(" "),v("li",[t._v("有关详细信息，请参阅网络模式。")])])]),t._v(" "),v("li",[v("code",[t._v("数据：未定义 |未知")]),t._v(" "),v("ul",[v("li",[t._v("默认为未定义")]),t._v(" "),v("li",[t._v("查询的最后一次成功解析的数据。")])])]),t._v(" "),v("li",[v("code",[t._v("错误：空 |恐怖")]),t._v(" "),v("ul",[v("li",[t._v("如果遇到错误，查询的错误对象。")])])]),t._v(" "),v("li",[v("code",[t._v("重置：（）=>无效")]),t._v(" "),v("ul",[v("li",[t._v("清除突变内部状态的函数（即，它将突变重置为其初始状态）。")])])]),t._v(" "),v("li",[v("code",[t._v("失败计数：数字")]),t._v(" "),v("ul",[v("li",[t._v("突变的失败计数。")]),t._v(" "),v("li",[t._v("每次突变失败时增加。")]),t._v(" "),v("li",[t._v("突变成功时重置为 0。")])])]),t._v(" "),v("li",[v("code",[t._v("失败原因：空 |恐怖")]),t._v(" "),v("ul",[v("li",[t._v("突变重试的失败原因。")]),t._v(" "),v("li",[t._v("突变成功时重置为 null。")])])])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/tanstack/query/tree/main/docs/react/reference/useMutation.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 GitHub 上编辑"),v("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);