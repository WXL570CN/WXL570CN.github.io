import{_ as a,p as s,q as t,w as e,Y as n}from"./framework-e1bed10d.js";const p={},o=n(`<h2 id="原型对象" tabindex="-1"><a class="header-anchor" href="#原型对象" aria-hidden="true">#</a> 原型对象</h2><h3 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
<span class="token punctuation">}</span>
<span class="token keyword">const</span> xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们所创建的每一个函数， 解析器都会向函数中添加一个属性prototype</p><p>这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p><p>如果函数作为普通函数调用prototype没有任何作用</p><p>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，</p><p>指向该构造函数的原型对象，我们可以通过__ proto__ 来访问该属性</p>`,8),c=n(`<p><code>xiaoMing.__proto__ === Person.prototype</code></p><p>原型对象就相当于一一个公共的区域，所有同一个类的实例都可以访问到这个原型对象 我们可以将对象中共有的对象放入原型对象中</p><p><code>Person.prototype.nationnality = &quot;Chinese&quot;</code></p><p>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用， 如果没有则会去原型对象中寻找，如果找到则直接使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span>
Tom<span class="token punctuation">.</span>Chinese <span class="token operator">=</span> <span class="token string">&quot;American&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span>nationnality<span class="token punctuation">,</span> Tom<span class="token punctuation">.</span>nationnality<span class="token punctuation">)</span>  <span class="token comment">// &quot;Chinese&quot; &quot;American&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、检查对象中是否有某个属性" tabindex="-1"><a class="header-anchor" href="#二、检查对象中是否有某个属性" aria-hidden="true">#</a> 二、检查对象中是否有某个属性</h3><h4 id="_1、in" tabindex="-1"><a class="header-anchor" href="#_1、in" aria-hidden="true">#</a> 1、in</h4><p>只要对象或者原型中存在，则返回true</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nationnality&quot;</span> <span class="token keyword">in</span> xiaoming<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nationnality&quot;</span> <span class="token keyword">in</span> Tom<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、hasownproperty" tabindex="-1"><a class="header-anchor" href="#_2、hasownproperty" aria-hidden="true">#</a> 2、hasOwnProperty()</h4><p>只有对象中存在才会返回true，原型中存在而对象中不存在返回false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;nationnality&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tom<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;nationnality&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、原型的原型" tabindex="-1"><a class="header-anchor" href="#三、原型的原型" aria-hidden="true">#</a> 三、原型的原型</h3><p>原型对象也是对象，所以它也有原型， 当我们使用一个对象的属性或方法时，会现在自身中寻找， 自身中如果有，则直接使用， 如果没有则去原型对象中寻找，如果原型对象中与，则使用， 如果没有则去原型的原型中寻找,直到找到 Object 对象的原型， object对象的原型没有原型，如果在 Object 中依然没有找到，则返回 null</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// Person { nationnality: &#39;Chinese&#39; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="垃圾回收-gc-gabage-collect" tabindex="-1"><a class="header-anchor" href="#垃圾回收-gc-gabage-collect" aria-hidden="true">#</a> 垃圾回收(GC:gabage collect)</h2><p>当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象， 此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢， 所以这种垃圾必须进行清理。 在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁， 我们不需要也不能进行垃圾回收的操作 我们需要做的只是要将不再使用的对象设置 null 即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 该操作在内存中开辟了空间</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 开辟的空间无法使用了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法" aria-hidden="true">#</a> 数组方法</h2><table><thead><tr><th>方法</th><th>概述</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或更多的数组，并返回结果。</td></tr><tr><td>join()</td><td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</td></tr><tr><td>pop()</td><td>删除并返回数组的最后一个元素</td></tr><tr><td>push()</td><td>向数组的末尾添加一个或更多元素，并返回新的长度。</td></tr><tr><td>reverse()</td><td>颠倒数组中元素的顺序。</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>从某个已有的数组返回选定的元素</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td></tr><tr><td>splice()</td><td>删余元素，并向数组添加新元素。</td></tr><tr><td>toSource()</td><td>返回该对象的源代码。</td></tr><tr><td>toString()</td><td>把数组转换为字符串，并返回结果。</td></tr><tr><td>toLocaleString()</td><td>把数组转换为本地数组，并返回结果。</td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或更多元素，并返回新的长度。</td></tr><tr><td>valueOf()</td><td>返回数组对象的原始值</td></tr></tbody></table><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice()</h3><blockquote><p>arrayObject.slice(start, end) 该方法不会改变原数组，而是返回一个新数组 start, end 传负值取倒数</p></blockquote><h3 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice()</h3><blockquote><p>arrayObject.splice(start, num, item1, item2, ...)<br> 删除数组的指定下标后的 num 个元素，并添加新元素(可选)<br> 该方法会改变原数组，并返回被删除的数组，原数组为删除剩下的数组</p></blockquote><p><code>const arr = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;]</code></p><p>可删除元素 <code>arr.splice(1, 1) // 删除 two</code></p><p>可替换元素 <code>arr.splice(1, 1, &#39;twoReplace&#39;) // 将 two 替换为 twoReplace</code></p><p>可插入元素 <code>arr.splice(1, 0, &#39;twoInsert&#39;) // 在 two 前面插入 twoInsert</code></p><h2 id="call-和-apply" tabindex="-1"><a class="header-anchor" href="#call-和-apply" aria-hidden="true">#</a> call() 和 apply()</h2><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>当对函数调用 call() 和 apply() 都会调用函数执行</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>在调用 call() 和 apply() 可以将一个对象指定为第一个参数<br> 此时这个对象将会成为函数执行时的this</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fuction <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// window对象</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// obj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>call() 方法可以将实参在对象之后依次传递<br> apply() 方法需要将实参封装到一个数组中统一传递</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fuction <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// 2, 3</span>
<span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 2, 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind()</h2><p>创建一个新函数，当这个新函数被调用时，它的 this 值是传递给 bind() 的第一个参数, 它的参数是 bind() 的其他参数和其原本的参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> _fn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ans <span class="token operator">=</span> <span class="token function">_fn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fn 函数需要三个参数，_fn 函数将 10 作为默认的第一个参数，所以只需要传入两个参数即可，如果你不小心传入了三个参数，放心，也只会取前两个。</p><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><ul><li>以函数形式调用时，this永远都是window</li><li>以方法的形式调用时，this是调用方法的对象</li><li>以构造函数的形式调用时，this是新创建的那个对象</li><li>使用call和app1y调用时，this是指定的那个对象</li></ul><h2 id="函数的隐含参数" tabindex="-1"><a class="header-anchor" href="#函数的隐含参数" aria-hidden="true">#</a> 函数的隐含参数</h2><h3 id="函数的上下文对象this" tabindex="-1"><a class="header-anchor" href="#函数的上下文对象this" aria-hidden="true">#</a> 函数的上下文对象this</h3><h3 id="封装实参的对象arguments" tabindex="-1"><a class="header-anchor" href="#封装实参的对象arguments" aria-hidden="true">#</a> 封装实参的对象arguments</h3><p>arguments 是一个类数组对象 ,它也可以通过索引来操作数据，也可以获取长度在调用函数时，我们所传递的实参都会在 arguments 中保存</p><p>arguments.length可以用来获取实参的长度</p><p>我们即使不定义形参， 也可以通过arguments来使用实参，</p><p>arguments[index]</p><p>它里边有一个属性叫做 callee，对应的是当前正在指向的函数的对象</p><h2 id="dom-操作" tabindex="-1"><a class="header-anchor" href="#dom-操作" aria-hidden="true">#</a> DOM 操作</h2><h3 id="一、概览" tabindex="-1"><a class="header-anchor" href="#一、概览" aria-hidden="true">#</a> 一、概览</h3><h4 id="document-body" tabindex="-1"><a class="header-anchor" href="#document-body" aria-hidden="true">#</a> document.body</h4><h4 id="document-documentelement" tabindex="-1"><a class="header-anchor" href="#document-documentelement" aria-hidden="true">#</a> document.documentElement</h4><h4 id="documnet-getelementbyclassname" tabindex="-1"><a class="header-anchor" href="#documnet-getelementbyclassname" aria-hidden="true">#</a> documnet.getElementByClassName()</h4><p>根据类获取DOM 兼容性：ie9+（兼容性不足）</p><h4 id="document-queryselector" tabindex="-1"><a class="header-anchor" href="#document-queryselector" aria-hidden="true">#</a> document.querySelector()</h4><p>可根据CSS选择器来获取DOM，但只返回符合条件的第一个DOM 兼容性：ie8+</p><h4 id="document-queryselectorall" tabindex="-1"><a class="header-anchor" href="#document-queryselectorall" aria-hidden="true">#</a> document.querySelectorAll()</h4><p>返回符合条件的所有DOM组成的数组 兼容性：ie8+</p><h3 id="二、增删改查" tabindex="-1"><a class="header-anchor" href="#二、增删改查" aria-hidden="true">#</a> 二、增删改查</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>appendChild()</td><td>把新的子节点添加到指定节点</td></tr><tr><td>removeChild()</td><td>删除子节点</td></tr><tr><td>replaceChild()</td><td>替换子节点</td></tr><tr><td>insertBefore()</td><td>在指定的子节点前面插入新的子节点</td></tr><tr><td>createAttribute()</td><td>创建属性节点</td></tr><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>createTextNode()</td><td>创建文本节点</td></tr></tbody></table>`,63);function i(l,r){return s(),t("div",null,[o,e("more"),c])}const u=a(p,[["render",i],["__file","Notes-JavaScript-review.html.vue"]]);export{u as default};
