import{_ as a,p as n,q as s,Y as e}from"./framework-e1bed10d.js";const t={},i=e(`<h2 id="一、简单的说-node-js-就是运行在服务端的-javascript。运行环境" tabindex="-1"><a class="header-anchor" href="#一、简单的说-node-js-就是运行在服务端的-javascript。运行环境" aria-hidden="true">#</a> 一、简单的说 Node.js 就是运行在服务端的 JavaScript。运行环境</h2><h3 id="阻塞-非阻塞i-o" tabindex="-1"><a class="header-anchor" href="#阻塞-非阻塞i-o" aria-hidden="true">#</a> 阻塞/非阻塞I/O</h3><p>阻塞I/O：进程遇到I/O，则休眠等其执行完，再进行下一步<br> 非阻塞I/O：进程不等待I/O完成，I/O时函数立即返回</p><h2 id="二、没有dom和bom-没有html结构" tabindex="-1"><a class="header-anchor" href="#二、没有dom和bom-没有html结构" aria-hidden="true">#</a> 二、没有DOM和BOM（没有html结构）</h2><h2 id="三、读写" tabindex="-1"><a class="header-anchor" href="#三、读写" aria-hidden="true">#</a> 三、读写</h2><h4 id="首先需要引入fs-filesystem-文件系统-这个核心模块-其提供了读取文件相关的api" tabindex="-1"><a class="header-anchor" href="#首先需要引入fs-filesystem-文件系统-这个核心模块-其提供了读取文件相关的api" aria-hidden="true">#</a> 首先需要引入fs（filesystem，文件系统）这个核心模块，其提供了读取文件相关的API</h4><p><code>var fs = require(&#39;fs&#39;)</code></p><h4 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h4><p><code>fs.writeFile(&#39;文件路径&#39;,回调函数)</code> 回调函数<code>function(error,data)</code></p><h4 id="写文件" tabindex="-1"><a class="header-anchor" href="#写文件" aria-hidden="true">#</a> 写文件</h4><p><code>fs.readFile(&#39;文件路径&#39;,&#39;文件内容&#39;,function(error){})</code></p><h4 id="读取文件目录" tabindex="-1"><a class="header-anchor" href="#读取文件目录" aria-hidden="true">#</a> 读取文件目录</h4><p><code>fs.readdir(&#39;目录路径&#39;,function(err,files){})</code><br><code>files是一个数组</code></p><h4 id="stats-获取文件信息" tabindex="-1"><a class="header-anchor" href="#stats-获取文件信息" aria-hidden="true">#</a> stats 获取文件信息</h4><ul><li>常用方法<br> isFile()<br> isDirectory()</li><li>其他方法可打印stats查看</li></ul><h4 id="rename-重命名" tabindex="-1"><a class="header-anchor" href="#rename-重命名" aria-hidden="true">#</a> rename 重命名</h4><p><code>fs.rename(oldfilename,newfilename,function)</code></p><h4 id="unlink-删除文件" tabindex="-1"><a class="header-anchor" href="#unlink-删除文件" aria-hidden="true">#</a> unlink 删除文件</h4><p><code>fs.unlink(url,function)</code></p><h4 id="readdir-读文件夹" tabindex="-1"><a class="header-anchor" href="#readdir-读文件夹" aria-hidden="true">#</a> readdir 读文件夹</h4><p><code>fs.readdir(url,(err,files) =&gt; {})</code><br><code>其中files为文件名组成的数组</code></p><h4 id="mkdir-创建文件夹" tabindex="-1"><a class="header-anchor" href="#mkdir-创建文件夹" aria-hidden="true">#</a> mkdir 创建文件夹</h4><p><code>fs.mkdir(url,function)</code></p><h4 id="remove-删除文件夹" tabindex="-1"><a class="header-anchor" href="#remove-删除文件夹" aria-hidden="true">#</a> remove 删除文件夹</h4><p><code>fs.remove(url,function)</code></p><h4 id="watch-监听文件变化" tabindex="-1"><a class="header-anchor" href="#watch-监听文件变化" aria-hidden="true">#</a> watch 监听文件变化</h4><p><code>fs.watch(url,object,(变化类型，文件名) =&gt; {})</code></p><ul><li>object<br> persistent &lt; boolean&gt; 指示如果文件已正被监视，进程是否应继续运行。默认值: true。<br> recursive &lt; boolean&gt; 指示应该监视所有子目录，还是仅监视当前目录。这适用于监视目录时，并且仅适用于受支持的平台（参阅注意。默认:false。<br> encoding &lt; string&gt; 指定用于传给监听器的文件名的字符编码。默认值: &#39;utf8&#39;。</li><li>listener &lt; Function&gt; | &lt; undefined&gt; 默认值: undefined，该函数有两个参数：<br> eventType &lt; string&gt; eventType 是 &#39;rename&#39; 或 &#39;change&#39;， filename 是触发事件的文件的名称。<br> filename &lt; string&gt; | &lt; Buffer&gt;</li></ul><h2 id="四、构建web服务器" tabindex="-1"><a class="header-anchor" href="#四、构建web服务器" aria-hidden="true">#</a> 四、构建web服务器</h2><p>引入http模块<br><code>var http = require(&#39;http&#39;)</code><br> 创建web服务器<br><code>var server = http.createServer()</code><br> 回调处理(用户发起请求，会触发require请求事件，然后执行第二个参数)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server.on(&#39;request&#39;,function(request,response){
    console.log(response.url)
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定端口号，启动服务器<br><code>server.listen(端口号,function(){})</code></p><h2 id="五、在每个文件模块中都提供了一个对象export" tabindex="-1"><a class="header-anchor" href="#五、在每个文件模块中都提供了一个对象export" aria-hidden="true">#</a> 五、在每个文件模块中都提供了一个对象export</h2><h2 id="六、采用无分号风格时需注意-当以-开头时-须在前面加分号" tabindex="-1"><a class="header-anchor" href="#六、采用无分号风格时需注意-当以-开头时-须在前面加分号" aria-hidden="true">#</a> 六、采用无分号风格时需注意，当以( [ \` 开头时，须在前面加分号;</h2><h2 id="七、require特性" tabindex="-1"><a class="header-anchor" href="#七、require特性" aria-hidden="true">#</a> 七、require特性</h2><p>模块被加载的时候会执行，加载后缓存（即不再重新执行，而是直接调用缓存）<br> 一旦某个模块被循环加载，就只输出已执行的部分，还未执行的部分不会输出</p><h2 id="八、global设置全局变量" tabindex="-1"><a class="header-anchor" href="#八、global设置全局变量" aria-hidden="true">#</a> 八、global设置全局变量</h2><h2 id="九、path" tabindex="-1"><a class="header-anchor" href="#九、path" aria-hidden="true">#</a> 九、path</h2><ul><li><p>normalize：规范化给定的 path，解析 &#39;..&#39; 和 &#39;.&#39; 片段。<br> 当找到多个连续的路径段分隔字符时（例如 POSIX 上的 /、Windows 上的 \\ 或 /），则它们将被替换为单个平台特定的路径段分隔符（POSIX 上的 /、Windows 上的 \\）。 尾部的分隔符会保留。<br> path.normalize(path)<br> path.normalize(&#39;C:\\temp\\\\foo\\bar\\..\\&#39;);<br> // 返回: &#39;C:\\temp\\foo\\&#39;</p></li><li><p>join：用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。<br> path.join([...paths])</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz/asdf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;quux&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 返回: &#39;/foo/bar/baz/asdf&#39;</span>
path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出 &#39;TypeError: Path must be a string. Received {}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>resolve：将路径或路径片段的序列解析为绝对路径。将相对路径解析为绝对路径，如将./解析为当前文件夹在整个磁盘中的目录<br> 如果在处理完所有给定的 path 片段之后还未生成绝对路径，则再加上当前工作目录。<br> 生成的路径已规范化，并且除非将路径解析为根目录，否则将删除尾部斜杠。<br> 零长度的 path 片段会被忽略。<br> 如果没有传入 path 片段，则 path.resolve() 将返回当前工作目录的绝对路径。<br> path.resolve([...paths])</p></li><li><p>basename：返回 path 的最后一部分,尾部的目录分隔符将被忽略<br> path.basename(path[, ext])</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/bar/baz/asdf/quux.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;quux&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>extname：返回 path 的扩展名，从最后一次出现 .（句点）字符到 path 最后一部分的字符串结束</p></li><li><p>path.extname(path)</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;.html&#39;</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;index.coffee.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;.md&#39;</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;index.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;.&#39;</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;&#39;</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;.index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;&#39;</span>
path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;.index.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;.md&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>dirname：返回 path 的目录名,尾部的目录分隔符将被忽略<br> path.dirname(path)<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/bar/baz/asdf/quux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;/foo/bar/baz/asdf&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>parse：返回一个对象，其属性表示 path 的重要元素。 尾部的目录分隔符将被忽略 返回的对象有一下属性 dir &lt; string&gt;<br> root &lt; string&gt;<br> base &lt; string&gt;<br> name &lt; string&gt;<br> ext &lt; string&gt;<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
&quot; C:\\      path\\dir   \\ file  .txt &quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>format：从对象返回路径字符串，与 path.parse() 相反。<br> 对象中的属性可以是：<br> dir &lt; string&gt; root &lt; string&gt; base &lt; string&gt; name &lt; string&gt; ext &lt; string&gt; 当为 pathObject 提供属性时，注意以下组合，其中一些属性优先于另一些属性：<br> 如果提供了 pathObject.dir，则忽略 pathObject.root。<br> 如果 pathObject.base 存在，则忽略 pathObject.ext 和 pathObject.name。<br> path.format(pathObject)<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;C:\\\\path\\\\dir&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;file.txt&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;C:\\\\path\\\\dir\\\\file.txt&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>__dirname：总是返回文件夹的绝对路径（在磁盘中的路径）</li><li>process.cwd()：总是返回执行node命令时的文件路径</li><li>./ 之类的相对路径在require中总是相对于当前文件所在的文件夹，在其他地方则和process.cwd()一样取决于node命令执行的地方</li></ul><h2 id="十、导入模块" tabindex="-1"><a class="header-anchor" href="#十、导入模块" aria-hidden="true">#</a> 十、导入模块</h2><p>const {normalize} = require(&#39;path&#39;)<br> 相当于 const normalize = require(&#39;path&#39;).normalize</p><h2 id="十一、buffer" tabindex="-1"><a class="header-anchor" href="#十一、buffer" aria-hidden="true">#</a> 十一、buffer</h2><p>用于处理二进制数据流<br> 实例类似数组，大小固定<br> 是一个全局变量</p><h2 id="十二、supervisor-js文件" tabindex="-1"><a class="header-anchor" href="#十二、supervisor-js文件" aria-hidden="true">#</a> 十二、supervisor js文件</h2><p>自动重启插件</p><h2 id="十三、项目初始化" tabindex="-1"><a class="header-anchor" href="#十三、项目初始化" aria-hidden="true">#</a> 十三、项目初始化</h2><p>.gitignore文件<br> 设置上传Git仓库需要忽略的文件<br> *任意<br> **任意级目录<br> ！不忽略<br> .npmignore文件<br> 模块上传到npm时需要忽略的目录<br> .editorConfig文件<br> 定义代码风格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>root <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 告知当前是根目录，不用再往上找了  </span>
indent_space <span class="token operator">=</span> space  
indent_size <span class="token operator">=</span> <span class="token number">4</span>  
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span>所有文件都匹配  
end_of_line <span class="token operator">=</span> lf    <span class="token comment">// unix回车风格（lf）或者Windows回车风格  </span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span>     <span class="token comment">// 文件最后一行要有回车  </span>
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">{</span>js<span class="token punctuation">,</span>py<span class="token punctuation">}</span><span class="token punctuation">]</span>     <span class="token comment">// {}或的意思  </span>
charset <span class="token operator">=</span> utf<span class="token operator">-</span><span class="token number">8</span>     <span class="token comment">// 使用编码格式  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十四、模板引擎" tabindex="-1"><a class="header-anchor" href="#十四、模板引擎" aria-hidden="true">#</a> 十四、模板引擎</h2><p>handlebars</p><h2 id="十五、content-encoding和accept-encoding" tabindex="-1"><a class="header-anchor" href="#十五、content-encoding和accept-encoding" aria-hidden="true">#</a> 十五、Content-Encoding和Accept-Encoding</h2><p>浏览器告知服务器支持的压缩格式 服务器返回使用的压缩格式 压缩利于优化性能</p><h2 id="十六、缓存" tabindex="-1"><a class="header-anchor" href="#十六、缓存" aria-hidden="true">#</a> 十六、缓存</h2><p>浏览器向服务器发送请求之前,会在本地缓存中查看是否有缓存,如果有缓存并且缓存未失效,则调用缓存<br> 否则向服务器发送请求<br> 服务器协商缓存并返回请求,并规定缓存失效时间,在该时间内,返回的请求都不会改变<br> 浏览器拿到请求之后会将其缓存到本地,在下次发送同样请求时,会先用本地缓存<br> 但也不是直接用,需要先通过Header 中的 Cache-Contrl 检查缓存是否失效</p><h2 id="十七、当项目要上传-而项目中有空目录时-可以在该目录中放一个-gitkeeper文件" tabindex="-1"><a class="header-anchor" href="#十七、当项目要上传-而项目中有空目录时-可以在该目录中放一个-gitkeeper文件" aria-hidden="true">#</a> 十七、当项目要上传，而项目中有空目录时，可以在该目录中放一个.gitkeeper文件</h2><h2 id="十八、爬虫" tabindex="-1"><a class="header-anchor" href="#十八、爬虫" aria-hidden="true">#</a> 十八、爬虫</h2><p>解决懒加载一次加载太少问题<br> 不停滚动浏览器<br> 让浏览器窗口变大（不能设置无限大，否则会触发发爬虫规则）</p><h2 id="十九、包管理" tabindex="-1"><a class="header-anchor" href="#十九、包管理" aria-hidden="true">#</a> 十九、包管理</h2><p>yarn == cnpm 较之npm更快</p><h3 id="发布包" tabindex="-1"><a class="header-anchor" href="#发布包" aria-hidden="true">#</a> 发布包</h3><p>切到国外<br> nrm use npm<br> 入口文件，做整合用<br> 注册账号<br> npm addUser<br> 新用户需要校验邮箱（真实邮箱）<br> npm publish</p><p>引入第三方模块不需要 ./ 的形式，只需要引入包名就行</p>`,64),r=[i];function p(c,o){return n(),s("div",null,r)}const l=a(t,[["render",p],["__file","Notes-NodeJs-review.html.vue"]]);export{l as default};
