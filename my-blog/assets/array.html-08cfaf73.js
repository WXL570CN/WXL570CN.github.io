import{_ as e,p as c,q as o,s as n,R as s,t,Y as p,n as l}from"./framework-e1bed10d.js";const u={},i=p(`<h1 id="「日常」数组" tabindex="-1"><a class="header-anchor" href="#「日常」数组" aria-hidden="true">#</a> 「日常」数组</h1><h2 id="_1、原生方法" tabindex="-1"><a class="header-anchor" href="#_1、原生方法" aria-hidden="true">#</a> 1、原生方法</h2><h3 id="array-map" tabindex="-1"><a class="header-anchor" href="#array-map" aria-hidden="true">#</a> Array.map()</h3><p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😫<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😫<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀, 😀, 😀]</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-filter" tabindex="-1"><a class="header-anchor" href="#array-filter" aria-hidden="true">#</a> Array.filter()</h3><p><code>filter()</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-reduce" tabindex="-1"><a class="header-anchor" href="#array-reduce" aria-hidden="true">#</a> Array.reduce()</h3><p><code>reduce()</code> 方法对数组中的每个元素按序执行一个由您提供的 <code>reducer</code> 函数，每一次运行 <code>reducer</code> 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⬜️<span class="token punctuation">,</span> ⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⬜️ <span class="token operator">+</span> ⚪️<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😀 + 😫 + 😀 + 😫 + 🤪</span>

<span class="token comment">// OR</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-reduceright" tabindex="-1"><a class="header-anchor" href="#array-reduceright" aria-hidden="true">#</a> Array.reduceRight()</h3><p><code>reduceRight()</code> 方法的功能和 <code>reduce()</code> 功能是一样的，不同的是 <code>reduceRight()</code> 从数组的末尾向前将数组中的数组项做累加。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⬜️<span class="token punctuation">,</span> ⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⬜️ <span class="token operator">+</span> ⚪️<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 🤪 + 😫 + 😀 + 😫 + 😀</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-fill" tabindex="-1"><a class="header-anchor" href="#array-fill" aria-hidden="true">#</a> Array.fill()</h3><p><code>fill()</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀, 😀, 😀, 😀]</span>


<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 0, 0, 0, 0]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-find" tabindex="-1"><a class="header-anchor" href="#array-find" aria-hidden="true">#</a> Array.find()</h3><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😀</span>
list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😝<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>


<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-indexof" tabindex="-1"><a class="header-anchor" href="#array-indexof" aria-hidden="true">#</a> Array.indexOf()</h3><p><code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回<code>-1</code>。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>const list = [😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪]<span class="token punctuation">;</span>
list.<span class="token function">indexOf</span><span class="token punctuation">(</span>😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
list.<span class="token function">indexOf</span><span class="token punctuation">(</span>😡<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token comment">// Code</span>
const list = [1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 4<span class="token punctuation">,</span> 5]<span class="token punctuation">;</span>
list.<span class="token function">indexOf</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
list.<span class="token function">indexOf</span><span class="token punctuation">(</span>6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-lastindexof" tabindex="-1"><a class="header-anchor" href="#array-lastindexof" aria-hidden="true">#</a> Array.lastIndexOf()</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>arr.<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchElement[<span class="token punctuation">,</span> fromIndex]<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>lastIndexOf()</code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>const list = [😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪]<span class="token punctuation">;</span>
list.<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
list.<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>😀<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>

<span class="token comment">// Code</span>
const list = [1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 4<span class="token punctuation">,</span> 5]<span class="token punctuation">;</span>
list.<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
list.<span class="token function">lastIndexOf</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-findindex" tabindex="-1"><a class="header-anchor" href="#array-findindex" aria-hidden="true">#</a> Array.findIndex()</h3><p><code>findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回<code>-1</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>

<span class="token comment">// You might be thinking how it&#39;s different from \`indexOf\` 🤔</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element <span class="token operator">&gt;</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token comment">// OR</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> 😀
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> 😫
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> 🤪
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element<span class="token punctuation">.</span>id <span class="token operator">===</span> 🤪<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-includes" tabindex="-1"><a class="header-anchor" href="#array-includes" aria-hidden="true">#</a> Array.includes()</h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-pop" tabindex="-1"><a class="header-anchor" href="#array-pop" aria-hidden="true">#</a> Array.pop()</h3><p><code>pop()</code> 方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 🤪</span>
list<span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 😀, 😫]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
list<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-push" tabindex="-1"><a class="header-anchor" href="#array-push" aria-hidden="true">#</a> Array.push()</h3><p><code>push()</code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>😡<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
list<span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 😀, 😫, 🤪, 😡]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
list<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-shift" tabindex="-1"><a class="header-anchor" href="#array-shift" aria-hidden="true">#</a> Array.shift()</h3><p><code>shift()</code> 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>const list = [😀, 😫, 😀, 😫, 🤪]; list.shift(); // 😀 list; // [😫, 😀, 😫, 🤪]</p><p>// Code const list = [1, 2, 3, 4, 5]; list.shift(); // 1 list; // [2, 3, 4, 5]</p><h3 id="array-unshift" tabindex="-1"><a class="header-anchor" href="#array-unshift" aria-hidden="true">#</a> Array.unshift()</h3><p><code>unshift()</code> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>😡<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
list<span class="token punctuation">;</span> <span class="token comment">// [😡, 😀, 😫, 😀, 😫, 🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
list<span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-splice" tabindex="-1"><a class="header-anchor" href="#array-splice" aria-hidden="true">#</a> Array.splice()</h3><p><code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😫]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [1, 4, 5]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-slice" tabindex="-1"><a class="header-anchor" href="#array-slice" aria-hidden="true">#</a> Array.slice()</h3><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😫, 😀]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 😀, 😫, 🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-join" tabindex="-1"><a class="header-anchor" href="#array-join" aria-hidden="true">#</a> Array.join()</h3><p><code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;〰️&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;😀〰️😫〰️😀〰️😫〰️🤪&quot;</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1, 2, 3, 4, 5&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-reverse" tabindex="-1"><a class="header-anchor" href="#array-reverse" aria-hidden="true">#</a> Array.reverse()</h3><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [🤪, 😫, 😀, 😫, 😀]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [🤪, 😫, 😀, 😫, 😀]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 4, 3, 2, 1]</span>
list<span class="token punctuation">;</span> <span class="token comment">// [5, 4, 3, 2, 1]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-sort" tabindex="-1"><a class="header-anchor" href="#array-sort" aria-hidden="true">#</a> Array.sort()</h3><p><code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀, 😫, 😫, 🤪]</span>

<span class="token comment">// This make more sense 🤔</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😀 [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</span>

<span class="token comment">// OR</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😧 [1, 10, 2, 3, 4]</span>
array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😀 [1, 2, 3, 4, 10]</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-some" tabindex="-1"><a class="header-anchor" href="#array-some" aria-hidden="true">#</a> Array.some()</h3><p><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😡<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-every" tabindex="-1"><a class="header-anchor" href="#array-every" aria-hidden="true">#</a> Array.every()</h3><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😀<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ⚪️ <span class="token operator">===</span> 😀<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from()</h3><p><code>Array.from()</code> 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> 😀😫😀😫🤪<span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 😀, 😫, 🤪]</span>

<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;😀&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;😫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;😀&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;😫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🤪&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 🤪]</span>

<span class="token keyword">const</span> <span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-of" tabindex="-1"><a class="header-anchor" href="#array-of" aria-hidden="true">#</a> Array.of()</h3><p><code>Array.of()</code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><p><code>Array.of()</code> 和 Array 构造函数之间的区别在于处理整数参数：<code>Array.of(7)</code> 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个 <code>undefined</code> 组成的数组）。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>Array.<span class="token function">of</span><span class="token punctuation">(</span>7<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [7]</span>
Array.<span class="token function">of</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token function">Array</span><span class="token punctuation">(</span>7<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// [ , , , , , , ]</span>
<span class="token function">Array</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-isarray" tabindex="-1"><a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a> Array.isArray()</h3><p><code>Array.isArray()</code> 用于确定传递的值是否是一个 Array。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>🤪<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// Code</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-at" tabindex="-1"><a class="header-anchor" href="#array-at" aria-hidden="true">#</a> Array.at()</h3><p><code>at()</code> 方法接收一个整数值并返回该索引的项目，允许正数和负数。负整数从数组中的最后一个项目开始倒数。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>const list = [😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪]<span class="token punctuation">;</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😫</span>

<span class="token comment">// Return from last 🤔</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>-1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 🤪</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>-2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 😫</span>

<span class="token comment">// Code</span>
const list = [1<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 4<span class="token punctuation">,</span> 5]<span class="token punctuation">;</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>-1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
list.<span class="token function">at</span><span class="token punctuation">(</span>-2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-copywithin" tabindex="-1"><a class="header-anchor" href="#array-copywithin" aria-hidden="true">#</a> Array.copyWithin()</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>arr<span class="token punctuation">.</span>copyWithin<span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">start</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>copyWithin()</code> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀, 🤪, 😫, 🤪]</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😫, 😫, 😀, 😫, 🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3, 4, 5]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),r={href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2FcopyWithin",title:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",target:"_blank",rel:"noopener noreferrer"},k=p(`<h3 id="array-flat" tabindex="-1"><a class="header-anchor" href="#array-flat" aria-hidden="true">#</a> Array.flat()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// depth 可选:指定要提取嵌套数组的结构深度，默认值为 1。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😫, 😀, 😫, 🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-flatmap" tabindex="-1"><a class="header-anchor" href="#array-flatmap" aria-hidden="true">#</a> Array.flatMap()</h3><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> <span class="token punctuation">[</span>😀<span class="token punctuation">,</span> 😫<span class="token punctuation">,</span> 🤪<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">⚪️</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>⚪️<span class="token punctuation">,</span> ⚪️ <span class="token operator">+</span> ⚪️ <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [😀, 😀😀, 😫, 😫😫, 😀, 😀😀, 😫, 😫😫, 🤪, 🤪🤪]</span>

<span class="token comment">// Code</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>el<span class="token punctuation">,</span> el <span class="token operator">*</span> el<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 1, 2, 4, 3, 9]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),d={href:"https://juejin.cn/post/7095902024331427870",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="_2、封装方法" tabindex="-1"><a class="header-anchor" href="#_2、封装方法" aria-hidden="true">#</a> 2、封装方法</h2><h3 id="去重" tabindex="-1"><a class="header-anchor" href="#去重" aria-hidden="true">#</a> 去重</h3><blockquote><p>使用<code>filter</code> + <code>Map</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">uniqueFunc</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> uniId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用<code>reduce</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">uniqueFunc2</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> uniId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    hash<span class="token punctuation">[</span>item<span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> hash<span class="token punctuation">[</span>item<span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> accum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token keyword">return</span> accum
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用<code>for</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">uniqueFunc3</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> uniId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>uniId<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> tempArr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对象数组，<code>filter</code> + <code>findIndex</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">checkRepeat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr， key1<span class="token punctuation">,</span>  key2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> item1<span class="token punctuation">[</span>key2<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">[</span>key2<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">==</span> index
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),v={id:"_3、for循环、foreach和map的对比",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_3、for循环、foreach和map的对比","aria-hidden":"true"},"#",-1),h={href:"https://mp.weixin.qq.com/s/3G_LMpz_W3ABFFmDQr1Yjg",target:"_blank",rel:"noopener noreferrer"},f=p('<h3 id="性能比较" tabindex="-1"><a class="header-anchor" href="#性能比较" aria-hidden="true">#</a> 性能比较</h3><p><code>for</code> &gt; <code>forEach</code> &gt; <code>map</code><br> 在chrome 62 和 Node.js v9.1.0环境下：<code>for</code> 循环比 <code>forEach</code> 快1倍，<code>forEach</code> 比 <code>map</code> 快20%左右。</p><h3 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析" aria-hidden="true">#</a> 原因分析</h3><p><code>for</code>：<code>for</code>循环没有额外的函数调用栈和上下文，所以它的实现最为简单。<br><code>forEach</code>：对于<code>forEach</code>来说，它的函数签名中包含了参数和上下文，所以性能会低于 for 循环。<br><code>map</code>：<code>map</code> 最慢的原因是因为 <code>map</code> 会返回一个新的数组，数组的创建和赋值会导致分配内存空间，因此会带来较大的性能开销。</p>',4),y={href:"https://juejin.cn/post/7095902024331427870",target:"_blank",rel:"noopener noreferrer"};function g(x,j){const a=l("ExternalLinkIcon");return c(),o("div",null,[i,n("blockquote",null,[n("p",null,[s("如果没看懂，可以看MDN介绍： "),n("a",r,[s("developer.mozilla.org/zh-CN/docs/…"),t(a)])])]),k,n("blockquote",null,[n("p",null,[s("原文地址："),n("a",d,[s("28个Javascript数组方法"),t(a)])])]),m,n("h2",v,[b,s(" 3、"),n("a",h,[s("for循环、forEach和map的对比"),t(a)])]),f,n("p",null,[s("原文地址："),n("a",y,[s("28个Javascript数组方法"),t(a)])])])}const A=e(u,[["render",g],["__file","array.html.vue"]]);export{A as default};
