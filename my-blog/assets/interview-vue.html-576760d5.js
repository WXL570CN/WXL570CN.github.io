import{_ as i,p as o,q as p,s as n,R as s,t as e,Y as t,n as l}from"./framework-e1bed10d.js";const r={},c=n("h1",{id:"「面试」vue",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#「面试」vue","aria-hidden":"true"},"#"),s(" 「面试」Vue")],-1),d={href:"https://www.nowcoder.com/discuss/622394?type=all&order=time&pos=&page=1&ncTraceId=&channel=-1&source_id=search_all_nctrack",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="双向数据绑定的原理" tabindex="-1"><a class="header-anchor" href="#双向数据绑定的原理" aria-hidden="true">#</a> 双向数据绑定的原理</h2><p>实现mvvm主要包含两个方面，数据变化更新视图，视图变化更新数据。</p><h3 id="视图变化更新数据" tabindex="-1"><a class="header-anchor" href="#视图变化更新数据" aria-hidden="true">#</a> 视图变化更新数据</h3><p>view更新data，可以通过事件监听即可，比如input标签监听 &#39;input&#39; 事件就可以实现了。</p><h3 id="数据变化更新视图" tabindex="-1"><a class="header-anchor" href="#数据变化更新视图" aria-hidden="true">#</a> 数据变化更新视图</h3><p>通过Object.defineProperty( )对属性设置一个set函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现data更新view了。</p><h3 id="实现过程" tabindex="-1"><a class="header-anchor" href="#实现过程" aria-hidden="true">#</a> 实现过程</h3><p>我们已经知道实现数据的双向绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理的。接着，我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。<br> 因此接下去我们执行以下3个步骤，实现数据的双向绑定：</p><ol><li>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</li><li>实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</li><li>实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。 <img src="https://pic2.zhimg.com/v2-057b896f2006500cb44b1569bc1e6ee5_b.jpg" alt="图片"></li></ol><h2 id="常见的事件修饰符及其作用" tabindex="-1"><a class="header-anchor" href="#常见的事件修饰符及其作用" aria-hidden="true">#</a> 常见的事件修饰符及其作用</h2><ul><li><code>.stop</code> ：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；</li><li><code>.prevent</code> ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</li><li><code>.capture</code> ：与事件冒泡的方向相反，事件捕获由外到内；</li><li><code>.self</code> ：只会触发自己范围内的事件，不包含子元素；</li><li><code>.once</code> ：只会触发一次</li></ul><h2 id="兄弟组件之间的传值" tabindex="-1"><a class="header-anchor" href="#兄弟组件之间的传值" aria-hidden="true">#</a> 兄弟组件之间的传值</h2><h3 id="方式一-eventbus" tabindex="-1"><a class="header-anchor" href="#方式一-eventbus" aria-hidden="true">#</a> 方式一：eventBus</h3><ul><li><strong>Vue实例 event.js</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个vue实例，让各个兄弟共用同一个事件机制</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>组件A BrotherA.vue</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>toB<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 event.js</span>
<span class="token keyword">import</span> eventVue <span class="token keyword">from</span> <span class="token string">&#39;event.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">toB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    eventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;toB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;this is from A!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>组件B BrotherB.vue</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 event.js</span>
<span class="token keyword">import</span> eventVue <span class="token keyword">from</span> <span class="token string">&#39;event.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>created() {
  eventBus.$on(&#39;toB&#39;,(fromA)=&gt;{
    console.log(fromA)
  })
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),v={id:"方式二-vuex",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#方式二-vuex","aria-hidden":"true"},"#",-1),m={href:"https://codesandbox.io/s/pensive-currying-b6szw?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fcomponents%2FHelloWorld.vue&theme=dark",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li><strong>store对象</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">toB</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>，
    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）</span>
      <span class="token comment">// 在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</span>
      <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> fromA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>toB <span class="token operator">=</span> fromA<span class="token punctuation">.</span>value
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>组件A BrotherA.vue</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span>@click<span class="token operator">=</span><span class="token string">&quot;toB&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;../store&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fromA</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;hello, this if form A!&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token literal-property property">store</span><span class="token operator">:</span>store<span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">toB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fromA<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>组件B BrotherB.vue</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ fromA }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;../store&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>store,
computed: {
  fromA() {
    return this.$store.state.toB
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖注入-project-inject" tabindex="-1"><a class="header-anchor" href="#依赖注入-project-inject" aria-hidden="true">#</a> 依赖注入（project / inject）</h3><h3 id="ref-refs" tabindex="-1"><a class="header-anchor" href="#ref-refs" aria-hidden="true">#</a> ref / refs</h3><h3 id="parents和-children" tabindex="-1"><a class="header-anchor" href="#parents和-children" aria-hidden="true">#</a> $parents和$children</h3><h3 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h3><h3 id="attrs和-listeners和-emit" tabindex="-1"><a class="header-anchor" href="#attrs和-listeners和-emit" aria-hidden="true">#</a> $attrs和$listeners和$emit</h3><ul><li>$attrs：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上</li><li>$listeners：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 v-on=&quot;$listeners&quot; 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）</li><li>$emit：调用父组件绑定的方法</li></ul><h2 id="谈谈对-spa-和-ssr-的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对-spa-和-ssr-的理解" aria-hidden="true">#</a> 谈谈对 SPA 和 SSR 的理解</h2>`,17),b={href:"https://course.51qux.com/2293.html",target:"_blank",rel:"noopener noreferrer"};function g(f,x){const a=l("ExternalLinkIcon");return o(),p("div",null,[c,n("p",null,[n("a",d,[s("牛客网最新前端面试题汇总之Vue篇"),e(a)])]),u,n("h3",v,[k,s(" 方式二："),n("a",m,[s("Vuex"),e(a)])]),h,n("p",null,[n("a",b,[s("面试题十八：谈谈对SPA和SSR的理解？"),e(a)])])])}const j=i(r,[["render",g],["__file","interview-vue.html.vue"]]);export{j as default};
