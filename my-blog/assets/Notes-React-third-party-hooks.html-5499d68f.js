import{_ as e,p as o,q as p,s as n,R as s,t,Y as c,n as i}from"./framework-e1bed10d.js";const r={},l=n("h1",{id:"「初学笔记」react第三方hooks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#「初学笔记」react第三方hooks","aria-hidden":"true"},"#"),s(" 「初学笔记」React第三方hooks")],-1),u={id:"一、react-query",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#一、react-query","aria-hidden":"true"},"#",-1),k={href:"https://tanstack.com/query/latest",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/TanStack/query",target:"_blank",rel:"noopener noreferrer"},v=c(`<h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h3><p>react-query 是一个异步状态管理的 hook，内置了 loading,error 等状态，提供了很多便利的 API（例如无限加载，分页等等，不需要开发者自己再去维护很多状态。</p><h3 id="_2、使用" tabindex="-1"><a class="header-anchor" href="#_2、使用" aria-hidden="true">#</a> 2、使用</h3><h4 id="_2-1、准备工作" tabindex="-1"><a class="header-anchor" href="#_2-1、准备工作" aria-hidden="true">#</a> 2.1、准备工作</h4><p>需要使用 react-query 的组件，其父组件需要被包裹在<code>QueryClientProvider</code>内，建议直接包裹 App。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient<span class="token punctuation">,</span> QueryClientProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-query&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>QueryClientProvider client<span class="token operator">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>QueryClientProvider<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1、usequery" tabindex="-1"><a class="header-anchor" href="#_2-1、usequery" aria-hidden="true">#</a> 2.1、useQuery</h4><p>当该组件被加载时，组件内的useQuery就会开始请求。<br> useQuery 接收三个参数，第一个是唯一标识 key，第二个是一个 fetch 的异步函数，第三个参数为一些配置。<br> key 是一个唯一的字符串，用来标识 query。<br> key 还可以是个数组，存放 query 的一些依赖变量，当依赖发生变化时会重新发起请求。</p><blockquote><p>key 最好传递一个数组，即使它可以是字符串，但最终它还是会被处理成数组。 key 数组第一个元素最好是唯一标识。</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getTodos <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;.../todo-api&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> 
    data<span class="token punctuation">,</span> <span class="token comment">//这个就是请求成功回来的数据</span>
    isLoading<span class="token punctuation">,</span> <span class="token comment">//true表示数据在获取的路上</span>
    error<span class="token punctuation">,</span><span class="token comment">//错误对象，如果存在则包含相关的错误信息</span>
    refetch，<span class="token comment">//这个还挺实用的，你可以在需要的地方或需要更新数据时调用，则会触发这个请求，比如enabled=false时</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
    queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span>
    queryFn<span class="token operator">:</span> getTodos<span class="token punctuation">,</span>
    <span class="token comment">// react-query也提供了转换器，并且也只在有数据的时候才会被调用</span>
    <span class="token punctuation">{</span>
      select<span class="token operator">:</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todo <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// enable：传入的值类型必须是Boolean，当参数值为false时，将会禁止请求接口</span>
      enable<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>id<span class="token punctuation">,</span>
      retry<span class="token punctuation">,</span> <span class="token comment">//请求失败后，请求的重试次数，也可以为boolean，true为无数次重试，false则不会重试</span>
      refetchOnWindowFocus，<span class="token comment">//页面取得焦点时，重新获取数据，默认为true</span>
      staleTime<span class="token punctuation">,</span> <span class="token comment">//指定缓存时长，以毫秒为单位。</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// isLoading是没有缓存时的加载，是指在内存中没有该缓存时的加载。</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;data loading...&#39;</span>

  <span class="token comment">// isFetching是每次请求时的加载。</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>isFetching<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;data loading...&#39;</span>

  <span class="token comment">// 网络请求遇到了异常，可以通过error属性获取异常对象；</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;something error&#39;</span>

  <span class="token comment">// 接口返回数据</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">...</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、usequeries" tabindex="-1"><a class="header-anchor" href="#_2-2、usequeries" aria-hidden="true">#</a> 2.2、useQueries</h4><blockquote><p>动态生成请求</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQueries <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-query&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">queryItem</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryItem<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">useQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">queries</span><span class="token operator">:</span> query<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span>query<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setUsers</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        更改获取用户      
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        item<span class="token punctuation">.</span>isLoading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中....</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、useinfinitequery" tabindex="-1"><a class="header-anchor" href="#_2-3、useinfinitequery" aria-hidden="true">#</a> 2.3、useInfiniteQuery</h4><p>用于无限加载的列表，非常强大，让构建无限加载组件变得简单。</p>`,15),m={id:"二、ahooks",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#二、ahooks","aria-hidden":"true"},"#",-1),g={href:"https://ahooks.js.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/alibaba/hooks",target:"_blank",rel:"noopener noreferrer"},f={id:"三、usehooks",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#三、usehooks","aria-hidden":"true"},"#",-1),q={href:"https://usehooks.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/uidotdev/usehooks",target:"_blank",rel:"noopener noreferrer"},w={id:"四、react-use",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#四、react-use","aria-hidden":"true"},"#",-1),C={href:"https://github.com/streamich/react-use",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,[n("a",{href:""},"GitHub 地址")],-1),G={id:"五、swr",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#五、swr","aria-hidden":"true"},"#",-1),N={href:"https://swr.vercel.app/zh-CN",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/vercel/swr",target:"_blank",rel:"noopener noreferrer"},T={id:"六、beautiful-react-hooks",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#六、beautiful-react-hooks","aria-hidden":"true"},"#",-1),L={href:"https://antonioru.github.io/beautiful-react-hooks/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/antonioru/beautiful-react-hooks",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/antonioru/beautiful-react-hooks/blob/master/docs/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"七、react-hanger",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#七、react-hanger","aria-hidden":"true"},"#"),s(" 七、react-hanger")],-1),F={href:"https://github.com/kitze/react-hanger",target:"_blank",rel:"noopener noreferrer"},z={id:"八、react-use-gesture",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#八、react-use-gesture","aria-hidden":"true"},"#",-1),S={href:"https://use-gesture.netlify.app/docs/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/pmndrs/use-gesture",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"九、use-scroll-position",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#九、use-scroll-position","aria-hidden":"true"},"#"),s(" 九、use-scroll-position")],-1),K={href:"https://github.com/n8tb1t/use-scroll-position",target:"_blank",rel:"noopener noreferrer"},W={id:"十、react-use-form-state",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#十、react-use-form-state","aria-hidden":"true"},"#",-1),O={href:"https://react-use-form-state.vercel.app/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/wsmd/react-use-form-state",target:"_blank",rel:"noopener noreferrer"};function Y($,J){const a=i("ExternalLinkIcon");return o(),p("div",null,[l,n("h2",u,[d,s(" 一、"),n("a",k,[s("react-query"),t(a)])]),n("p",null,[n("a",h,[s("GitHub 地址"),t(a)])]),v,n("h2",m,[b,s(" 二、"),n("a",g,[s("ahooks"),t(a)])]),n("p",null,[n("a",_,[s("GitHub 地址"),t(a)])]),n("h2",f,[y,s(" 三、"),n("a",q,[s("useHooks"),t(a)])]),n("p",null,[n("a",x,[s("GitHub 地址"),t(a)])]),n("h2",w,[Q,s(" 四、"),n("a",C,[s("react-use"),t(a)])]),H,n("h2",G,[j,s(" 五、"),n("a",N,[s("SWR"),t(a)])]),n("p",null,[n("a",A,[s("GitHub 地址"),t(a)])]),n("h2",T,[I,s(" 六、"),n("a",L,[s("beautiful-react-hooks"),t(a)])]),n("p",null,[n("a",P,[s("GitHub 地址"),t(a)])]),n("p",null,[n("a",R,[s("中文文档"),t(a)])]),E,n("p",null,[n("a",F,[s("GitHub 地址"),t(a)])]),n("h2",z,[B,s(" 八、"),n("a",S,[s("react-use-gesture"),t(a)])]),n("p",null,[n("a",V,[s("GitHub 地址"),t(a)])]),D,n("p",null,[n("a",K,[s("GitHub 地址"),t(a)])]),n("h2",W,[M,s(" 十、"),n("a",O,[s("react-use-form-state"),t(a)])]),n("p",null,[n("a",U,[s("GitHub 地址"),t(a)])])])}const Z=e(r,[["render",Y],["__file","Notes-React-third-party-hooks.html.vue"]]);export{Z as default};
